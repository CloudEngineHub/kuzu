
// Generated from Cypher.g4 by ANTLR 4.13.1



#include "cypher_parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "ku_Statements", "oC_Cypher", "oC_Statement", "kU_CopyFrom", "kU_ColumnNames", 
      "kU_ScanSource", "kU_CopyFromByColumn", "kU_CopyTO", "kU_ExportDatabase", 
      "kU_ImportDatabase", "kU_AttachDatabase", "kU_Option", "kU_Options", 
      "kU_DetachDatabase", "kU_UseDatabase", "kU_StandaloneCall", "kU_CommentOn", 
      "kU_CreateMacro", "kU_PositionalArgs", "kU_DefaultArg", "kU_FilePaths", 
      "kU_ParsingOptions", "kU_IfNotExists", "kU_CreateNodeTable", "kU_CreateRelTable", 
      "kU_CreateRelTableGroup", "kU_RelTableConnection", "kU_CreateRdfGraph", 
      "kU_CreateSequence", "kU_CreateType", "kU_CreateVectorIndex", "kU_UpdateVectorIndex", 
      "kU_SequenceOptions", "kU_IncrementBy", "kU_MinValue", "kU_MaxValue", 
      "kU_StartWith", "kU_Cycle", "kU_Drop", "kU_AlterTable", "kU_AlterOptions", 
      "kU_AddProperty", "kU_Default", "kU_DropProperty", "kU_RenameTable", 
      "kU_RenameProperty", "kU_PropertyDefinitions", "kU_PropertyDefinition", 
      "kU_PropertyDefinitionsDDL", "kU_PropertyDefinitionDDL", "kU_CreateNodeConstraint", 
      "kU_DataType", "kU_ListIdentifiers", "kU_ListIdentifier", "oC_AnyCypherOption", 
      "oC_Explain", "oC_Profile", "kU_Transaction", "kU_Extension", "kU_LoadExtension", 
      "kU_InstallExtension", "oC_Query", "kU_ProjectGraph", "kU_GraphProjectionTableItems", 
      "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
      "oC_MultiPartQuery", "kU_QueryPart", "oC_UpdatingClause", "oC_ReadingClause", 
      "kU_LoadFrom", "kU_InQueryCall", "kU_GraphProjectionTableItem", "kU_GraphProjectionColumnItems", 
      "kU_GraphProjectionColumnItem", "oC_Match", "kU_Hint", "kU_JoinNode", 
      "oC_Unwind", "oC_Create", "oC_Merge", "oC_MergeAction", "oC_Set", 
      "oC_SetItem", "oC_Delete", "oC_With", "oC_Return", "oC_ProjectionBody", 
      "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", "oC_Skip", 
      "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", "oC_PatternPart", 
      "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern", 
      "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", 
      "kU_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
      "oC_RangeLiteral", "kU_RecursiveRelationshipComprehension", "kU_IntermediateNodeProjectionItems", 
      "kU_IntermediateRelProjectionItems", "oC_LowerBound", "oC_UpperBound", 
      "oC_LabelName", "oC_RelTypeName", "oC_Expression", "oC_OrExpression", 
      "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", 
      "kU_ComparisonOperator", "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
      "kU_BitShiftOperatorExpression", "kU_BitShiftOperator", "oC_AddOrSubtractExpression", 
      "kU_AddOrSubtractOperator", "oC_MultiplyDivideModuloExpression", "kU_MultiplyDivideModuloOperator", 
      "oC_PowerOfExpression", "oC_UnaryAddSubtractOrFactorialExpression", 
      "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
      "oC_StringOperatorExpression", "oC_RegularExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral", 
      "oC_ListLiteral", "kU_ListEntry", "kU_StructLiteral", "kU_StructField", 
      "oC_ParenthesizedExpression", "oC_FunctionInvocation", "oC_FunctionName", 
      "kU_FunctionParameter", "kU_LambdaParameter", "kU_LambdaVars", "oC_PathPatterns", 
      "oC_ExistSubquery", "kU_CountSubquery", "oC_PropertyLookup", "oC_CaseExpression", 
      "oC_CaseAlternative", "oC_Variable", "oC_NumberLiteral", "oC_Parameter", 
      "oC_PropertyExpression", "oC_PropertyKeyName", "oC_IntegerLiteral", 
      "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", "kU_NonReservedKeywords", 
      "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "','", "')'", "'.'", "'='", "'['", "']'", "'{'", 
      "'}'", "'|'", "'..'", "'<>'", "'<'", "'<='", "'>'", "'>='", "'&'", 
      "'>>'", "'<<'", "'+'", "'/'", "'%'", "'^'", "'=~'", "'$'", "'\\u27E8'", 
      "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", 
      "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", 
      "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "'*'", "", "'!='", "'-'", "'!'", "':'", "", "", "", "", "", "", 
      "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "ADD", "ALL", "ALTER", 
      "AND", "AS", "ASC", "ASCENDING", "ATTACH", "BEGIN", "BY", "CALL", 
      "CASE", "CAST", "COLUMN", "COMMENT", "COMMIT", "COMMIT_SKIP_CHECKPOINT", 
      "CONTAINS", "COPY", "COUNT", "CREATE", "CYCLE", "DATABASE", "DBTYPE", 
      "DEFAULT", "DELETE", "DESC", "DESCENDING", "DETACH", "DISTINCT", "DROP", 
      "ELSE", "END", "ENDS", "EXISTS", "EXPLAIN", "EXPORT", "EXTENSION", 
      "FALSE", "FROM", "GLOB", "GRAPH", "GROUP", "HEADERS", "HINT", "IMPORT", 
      "IF", "IN", "INCREMENT", "INSTALL", "IS", "JOIN", "KEY", "LIMIT", 
      "LOAD", "MACRO", "MATCH", "MAXVALUE", "MERGE", "MINVALUE", "MULTI_JOIN", 
      "NO", "NODE", "NOT", "NULL", "ON", "ONLY", "OPTIONAL", "OR", "ORDER", 
      "PRIMARY", "PROFILE", "PROJECT", "RDFGRAPH", "READ", "REL", "RENAME", 
      "RETURN", "ROLLBACK", "ROLLBACK_SKIP_CHECKPOINT", "SEQUENCE", "SET", 
      "SHORTEST", "START", "STARTS", "TABLE", "THEN", "TO", "TRANSACTION", 
      "TRUE", "TYPE", "UNION", "UNWIND", "USE", "UPDATE", "WHEN", "WHERE", 
      "WITH", "WRITE", "XOR", "VECTOR", "INDEX", "DECIMAL", "STAR", "L_SKIP", 
      "INVALID_NOT_EQUAL", "MINUS", "FACTORIAL", "COLON", "StringLiteral", 
      "EscapedChar", "DecimalInteger", "HexLetter", "HexDigit", "Digit", 
      "NonZeroDigit", "NonZeroOctDigit", "ZeroDigit", "RegularDecimalReal", 
      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", 
      "SP", "WHITESPACE", "CypherComment", "Unknown"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,172,2779,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,1,0,1,0,3,0,347,8,0,1,0,1,0,3,0,351,8,0,1,0,5,0,354,
  	8,0,10,0,12,0,357,9,0,1,0,3,0,360,8,0,1,0,1,0,1,1,3,1,365,8,1,1,1,3,1,
  	368,8,1,1,1,1,1,3,1,372,8,1,1,1,3,1,375,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
  	3,2,401,8,2,1,3,1,3,1,3,1,3,3,3,407,8,3,1,3,1,3,3,3,411,8,3,1,3,3,3,414,
  	8,3,1,3,1,3,1,3,1,3,3,3,420,8,3,1,3,3,3,423,8,3,1,4,1,4,3,4,427,8,4,1,
  	4,1,4,3,4,431,8,4,1,4,1,4,3,4,435,8,4,1,4,5,4,438,8,4,10,4,12,4,441,9,
  	4,1,4,3,4,444,8,4,1,4,1,4,1,5,1,5,1,5,3,5,451,8,5,1,5,1,5,3,5,455,8,5,
  	1,5,1,5,1,5,1,5,1,5,1,5,3,5,463,8,5,1,5,1,5,3,5,467,8,5,1,6,1,6,1,6,1,
  	6,1,6,1,6,1,6,1,6,3,6,477,8,6,1,6,1,6,3,6,481,8,6,1,6,1,6,3,6,485,8,6,
  	1,6,5,6,488,8,6,10,6,12,6,491,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
  	1,7,3,7,503,8,7,1,7,1,7,3,7,507,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,515,8,
  	7,1,7,3,7,518,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,526,8,8,1,8,3,8,529,8,8,
  	1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,544,8,
  	10,1,10,1,10,1,10,3,10,549,8,10,1,10,1,10,1,10,1,10,3,10,555,8,10,1,10,
  	1,10,3,10,559,8,10,1,10,3,10,562,8,10,1,10,3,10,565,8,10,1,10,1,10,1,
  	11,1,11,3,11,571,8,11,1,11,1,11,3,11,575,8,11,1,11,1,11,1,12,1,12,3,12,
  	581,8,12,1,12,1,12,3,12,585,8,12,1,12,5,12,588,8,12,10,12,12,12,591,9,
  	12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,605,
  	8,15,1,15,1,15,3,15,609,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
  	1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,631,
  	8,17,1,17,1,17,3,17,635,8,17,1,17,3,17,638,8,17,1,17,3,17,641,8,17,1,
  	17,3,17,644,8,17,1,17,3,17,647,8,17,1,17,1,17,3,17,651,8,17,1,17,5,17,
  	654,8,17,10,17,12,17,657,9,17,1,17,3,17,660,8,17,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,18,1,18,3,18,670,8,18,1,18,1,18,3,18,674,8,18,1,18,5,18,677,
  	8,18,10,18,12,18,680,9,18,1,19,1,19,3,19,684,8,19,1,19,1,19,1,19,3,19,
  	689,8,19,1,19,1,19,1,20,1,20,3,20,695,8,20,1,20,1,20,3,20,699,8,20,1,
  	20,1,20,3,20,703,8,20,1,20,5,20,706,8,20,10,20,12,20,709,9,20,1,20,1,
  	20,1,20,1,20,3,20,715,8,20,1,20,1,20,3,20,719,8,20,1,20,1,20,3,20,723,
  	8,20,1,20,3,20,726,8,20,1,21,1,21,3,21,730,8,21,1,21,1,21,3,21,734,8,
  	21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,3,23,753,8,23,1,23,1,23,3,23,757,8,23,1,23,1,23,3,23,
  	761,8,23,1,23,1,23,3,23,765,8,23,1,23,1,23,3,23,769,8,23,1,23,1,23,1,
  	23,3,23,774,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
  	24,3,24,787,8,24,1,24,1,24,3,24,791,8,24,1,24,1,24,3,24,795,8,24,1,24,
  	1,24,3,24,799,8,24,1,24,1,24,3,24,803,8,24,1,24,1,24,3,24,807,8,24,3,
  	24,809,8,24,1,24,1,24,3,24,813,8,24,1,24,1,24,3,24,817,8,24,3,24,819,
  	8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	3,25,834,8,25,1,25,1,25,3,25,838,8,25,1,25,1,25,3,25,842,8,25,1,25,1,
  	25,3,25,846,8,25,1,25,1,25,3,25,850,8,25,1,25,4,25,853,8,25,11,25,12,
  	25,854,1,25,3,25,858,8,25,1,25,1,25,3,25,862,8,25,1,25,1,25,3,25,866,
  	8,25,3,25,868,8,25,1,25,1,25,3,25,872,8,25,1,25,1,25,3,25,876,8,25,3,
  	25,878,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,
  	27,1,27,1,27,1,27,1,27,1,27,3,27,897,8,27,1,27,1,27,1,28,1,28,1,28,1,
  	28,1,28,1,28,1,28,3,28,908,8,28,1,28,1,28,1,28,5,28,913,8,28,10,28,12,
  	28,916,9,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,928,
  	8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,
  	942,8,30,1,30,3,30,945,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
  	31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,3,32,964,8,32,1,33,1,33,1,
  	33,1,33,3,33,970,8,33,1,33,3,33,973,8,33,1,33,1,33,1,34,1,34,1,34,1,34,
  	1,34,1,34,3,34,983,8,34,1,34,3,34,986,8,34,1,35,1,35,1,35,1,35,1,35,1,
  	35,3,35,994,8,35,1,35,3,35,997,8,35,1,36,1,36,1,36,1,36,3,36,1003,8,36,
  	1,36,3,36,1006,8,36,1,36,1,36,1,37,1,37,3,37,1012,8,37,1,37,1,37,1,38,
  	1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,
  	1,40,1,40,1,40,3,40,1034,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,
  	1043,8,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,3,46,1069,
  	8,46,1,46,1,46,3,46,1073,8,46,1,46,5,46,1076,8,46,10,46,12,46,1079,9,
  	46,1,47,1,47,1,47,1,47,1,48,1,48,3,48,1087,8,48,1,48,1,48,3,48,1091,8,
  	48,1,48,5,48,1094,8,48,10,48,12,48,1097,9,48,1,49,1,49,1,49,1,49,1,49,
  	3,49,1104,8,49,1,50,1,50,1,50,1,50,3,50,1110,8,50,1,50,1,50,3,50,1114,
  	8,50,1,50,1,50,3,50,1118,8,50,1,50,1,50,1,51,1,51,1,51,1,51,3,51,1126,
  	8,51,1,51,1,51,3,51,1130,8,51,1,51,1,51,3,51,1134,8,51,1,51,1,51,1,51,
  	1,51,3,51,1140,8,51,1,51,1,51,3,51,1144,8,51,1,51,1,51,3,51,1148,8,51,
  	1,51,1,51,1,51,1,51,3,51,1154,8,51,1,51,1,51,3,51,1158,8,51,1,51,1,51,
  	3,51,1162,8,51,1,51,1,51,3,51,1166,8,51,1,51,1,51,3,51,1170,8,51,1,51,
  	1,51,1,51,1,51,3,51,1176,8,51,1,51,1,51,3,51,1180,8,51,1,51,1,51,3,51,
  	1184,8,51,1,51,1,51,3,51,1188,8,51,1,51,1,51,3,51,1192,8,51,1,51,1,51,
  	3,51,1196,8,51,1,51,1,51,5,51,1200,8,51,10,51,12,51,1203,9,51,1,52,1,
  	52,5,52,1207,8,52,10,52,12,52,1210,9,52,1,53,1,53,3,53,1214,8,53,1,53,
  	1,53,1,54,1,54,3,54,1220,8,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,57,
  	1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,1240,8,57,1,58,
  	1,58,3,58,1244,8,58,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1252,8,59,1,60,
  	1,60,1,60,1,60,1,61,1,61,3,61,1260,8,61,3,61,1262,8,61,1,61,1,61,1,62,
  	1,62,1,62,1,62,1,62,1,62,3,62,1272,8,62,1,62,1,62,3,62,1276,8,62,1,62,
  	1,62,3,62,1280,8,62,1,62,1,62,1,63,1,63,3,63,1286,8,63,1,63,1,63,3,63,
  	1290,8,63,1,63,5,63,1293,8,63,10,63,12,63,1296,9,63,1,64,1,64,3,64,1300,
  	8,64,1,64,5,64,1303,8,64,10,64,12,64,1306,9,64,1,64,1,64,3,64,1310,8,
  	64,4,64,1312,8,64,11,64,12,64,1313,1,64,1,64,1,64,3,64,1319,8,64,1,65,
  	1,65,1,65,1,65,3,65,1325,8,65,1,65,1,65,1,65,3,65,1330,8,65,1,65,3,65,
  	1333,8,65,1,66,1,66,3,66,1337,8,66,1,67,1,67,3,67,1341,8,67,5,67,1343,
  	8,67,10,67,12,67,1346,9,67,1,67,1,67,1,67,3,67,1351,8,67,5,67,1353,8,
  	67,10,67,12,67,1356,9,67,1,67,1,67,3,67,1360,8,67,1,67,5,67,1363,8,67,
  	10,67,12,67,1366,9,67,1,67,3,67,1369,8,67,1,67,3,67,1372,8,67,1,67,1,
  	67,3,67,1376,8,67,4,67,1378,8,67,11,67,12,67,1379,1,67,1,67,3,67,1384,
  	8,67,1,68,1,68,3,68,1388,8,68,4,68,1390,8,68,11,68,12,68,1391,1,68,1,
  	68,1,69,1,69,3,69,1398,8,69,5,69,1400,8,69,10,69,12,69,1403,9,69,1,69,
  	1,69,3,69,1407,8,69,5,69,1409,8,69,10,69,12,69,1412,9,69,1,69,1,69,1,
  	70,1,70,1,70,1,70,3,70,1420,8,70,1,71,1,71,1,71,1,71,3,71,1426,8,71,1,
  	72,1,72,1,72,1,72,1,72,1,72,3,72,1434,8,72,1,72,1,72,3,72,1438,8,72,1,
  	72,1,72,3,72,1442,8,72,1,72,1,72,3,72,1446,8,72,1,72,1,72,1,72,1,72,1,
  	72,3,72,1453,8,72,1,72,3,72,1456,8,72,1,72,3,72,1459,8,72,1,72,3,72,1462,
  	8,72,1,73,1,73,3,73,1466,8,73,3,73,1468,8,73,1,73,1,73,1,73,1,73,3,73,
  	1474,8,73,1,73,3,73,1477,8,73,1,74,1,74,3,74,1481,8,74,1,74,1,74,3,74,
  	1485,8,74,1,74,1,74,3,74,1489,8,74,1,74,1,74,3,74,1493,8,74,1,75,1,75,
  	3,75,1497,8,75,1,75,1,75,3,75,1501,8,75,1,75,5,75,1504,8,75,10,75,12,
  	75,1507,9,75,1,76,1,76,1,76,3,76,1512,8,76,1,76,1,76,3,76,1516,8,76,1,
  	77,1,77,3,77,1520,8,77,1,77,1,77,3,77,1524,8,77,1,77,1,77,1,77,3,77,1529,
  	8,77,1,77,1,77,3,77,1533,8,77,1,78,1,78,1,78,1,78,1,79,1,79,1,79,3,79,
  	1542,8,79,1,79,1,79,3,79,1546,8,79,1,79,1,79,1,79,3,79,1551,8,79,1,79,
  	1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,4,79,1563,8,79,11,79,12,
  	79,1564,5,79,1567,8,79,10,79,12,79,1570,9,79,1,80,1,80,3,80,1574,8,80,
  	1,80,1,80,1,80,1,80,1,80,1,80,1,81,1,81,3,81,1584,8,81,1,81,1,81,1,82,
  	1,82,3,82,1590,8,82,1,82,1,82,1,82,5,82,1595,8,82,10,82,12,82,1598,9,
  	82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1610,8,83,1,
  	84,1,84,3,84,1614,8,84,1,84,1,84,3,84,1618,8,84,1,84,1,84,3,84,1622,8,
  	84,1,84,5,84,1625,8,84,10,84,12,84,1628,9,84,1,85,1,85,3,85,1632,8,85,
  	1,85,1,85,3,85,1636,8,85,1,85,1,85,1,86,1,86,3,86,1642,8,86,1,86,1,86,
  	3,86,1646,8,86,1,86,1,86,3,86,1650,8,86,1,86,1,86,3,86,1654,8,86,1,86,
  	5,86,1657,8,86,10,86,12,86,1660,9,86,1,87,1,87,1,87,3,87,1665,8,87,1,
  	87,3,87,1668,8,87,1,88,1,88,1,88,1,89,3,89,1674,8,89,1,89,3,89,1677,8,
  	89,1,89,1,89,1,89,1,89,3,89,1683,8,89,1,89,1,89,3,89,1687,8,89,1,89,1,
  	89,3,89,1691,8,89,1,90,1,90,3,90,1695,8,90,1,90,1,90,3,90,1699,8,90,1,
  	90,5,90,1702,8,90,10,90,12,90,1705,9,90,1,90,1,90,3,90,1709,8,90,1,90,
  	1,90,3,90,1713,8,90,1,90,5,90,1716,8,90,10,90,12,90,1719,9,90,3,90,1721,
  	8,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1730,8,91,1,92,1,92,1,92,
  	1,92,1,92,1,92,1,92,3,92,1739,8,92,1,92,5,92,1742,8,92,10,92,12,92,1745,
  	9,92,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,95,1,95,3,95,1757,8,95,
  	1,95,3,95,1760,8,95,1,96,1,96,1,96,1,96,1,97,1,97,3,97,1768,8,97,1,97,
  	1,97,3,97,1772,8,97,1,97,5,97,1775,8,97,10,97,12,97,1778,9,97,1,98,1,
  	98,3,98,1782,8,98,1,98,1,98,3,98,1786,8,98,1,98,1,98,1,98,3,98,1791,8,
  	98,1,99,1,99,1,100,1,100,3,100,1797,8,100,1,100,5,100,1800,8,100,10,100,
  	12,100,1803,9,100,1,100,1,100,1,100,1,100,3,100,1809,8,100,1,101,1,101,
  	3,101,1813,8,101,1,101,1,101,3,101,1817,8,101,3,101,1819,8,101,1,101,
  	1,101,3,101,1823,8,101,3,101,1825,8,101,1,101,1,101,3,101,1829,8,101,
  	3,101,1831,8,101,1,101,1,101,1,102,1,102,3,102,1837,8,102,1,102,1,102,
  	1,103,1,103,3,103,1843,8,103,1,103,1,103,3,103,1847,8,103,1,103,3,103,
  	1850,8,103,1,103,3,103,1853,8,103,1,103,1,103,1,103,1,103,3,103,1859,
  	8,103,1,103,3,103,1862,8,103,1,103,3,103,1865,8,103,1,103,1,103,3,103,
  	1869,8,103,1,103,1,103,1,103,1,103,3,103,1875,8,103,1,103,3,103,1878,
  	8,103,1,103,3,103,1881,8,103,1,103,1,103,3,103,1885,8,103,1,104,1,104,
  	3,104,1889,8,104,1,104,1,104,3,104,1893,8,104,3,104,1895,8,104,1,104,
  	1,104,3,104,1899,8,104,3,104,1901,8,104,1,104,1,104,3,104,1905,8,104,
  	3,104,1907,8,104,1,104,1,104,3,104,1911,8,104,3,104,1913,8,104,1,104,
  	1,104,1,105,1,105,3,105,1919,8,105,1,105,1,105,3,105,1923,8,105,1,105,
  	1,105,3,105,1927,8,105,1,105,1,105,3,105,1931,8,105,1,105,1,105,3,105,
  	1935,8,105,1,105,1,105,3,105,1939,8,105,1,105,1,105,3,105,1943,8,105,
  	1,105,1,105,3,105,1947,8,105,5,105,1949,8,105,10,105,12,105,1952,9,105,
  	3,105,1954,8,105,1,105,1,105,1,106,1,106,3,106,1960,8,106,1,106,1,106,
  	3,106,1964,8,106,1,106,1,106,3,106,1968,8,106,1,106,3,106,1971,8,106,
  	1,106,5,106,1974,8,106,10,106,12,106,1977,9,106,1,107,1,107,3,107,1981,
  	8,107,1,107,5,107,1984,8,107,10,107,12,107,1987,9,107,1,108,1,108,3,108,
  	1991,8,108,1,108,1,108,1,109,1,109,3,109,1997,8,109,1,109,1,109,1,109,
  	1,109,3,109,2003,8,109,1,109,3,109,2006,8,109,1,109,3,109,2009,8,109,
  	1,109,3,109,2012,8,109,1,109,1,109,3,109,2016,8,109,1,109,3,109,2019,
  	8,109,1,109,3,109,2022,8,109,1,109,3,109,2025,8,109,1,109,3,109,2028,
  	8,109,1,110,1,110,3,110,2032,8,110,1,110,1,110,3,110,2036,8,110,1,110,
  	1,110,3,110,2040,8,110,1,110,1,110,3,110,2044,8,110,1,110,1,110,3,110,
  	2048,8,110,1,110,1,110,3,110,2052,8,110,3,110,2054,8,110,1,110,3,110,
  	2057,8,110,1,110,1,110,3,110,2061,8,110,1,110,1,110,3,110,2065,8,110,
  	1,110,1,110,3,110,2069,8,110,1,110,1,110,3,110,2073,8,110,3,110,2075,
  	8,110,1,110,1,110,1,111,1,111,3,111,2081,8,111,1,111,3,111,2084,8,111,
  	1,111,3,111,2087,8,111,1,111,1,111,1,112,1,112,3,112,2093,8,112,1,112,
  	3,112,2096,8,112,1,112,3,112,2099,8,112,1,112,1,112,1,113,1,113,1,114,
  	1,114,1,115,1,115,1,116,1,116,1,117,1,117,1,118,1,118,1,118,1,118,1,118,
  	5,118,2118,8,118,10,118,12,118,2121,9,118,1,119,1,119,1,119,1,119,1,119,
  	5,119,2128,8,119,10,119,12,119,2131,9,119,1,120,1,120,1,120,1,120,1,120,
  	5,120,2138,8,120,10,120,12,120,2141,9,120,1,121,1,121,3,121,2145,8,121,
  	5,121,2147,8,121,10,121,12,121,2150,9,121,1,121,1,121,1,122,1,122,3,122,
  	2156,8,122,1,122,1,122,3,122,2160,8,122,1,122,1,122,3,122,2164,8,122,
  	1,122,1,122,3,122,2168,8,122,1,122,1,122,3,122,2172,8,122,1,122,1,122,
  	1,122,1,122,1,122,1,122,3,122,2180,8,122,1,122,1,122,3,122,2184,8,122,
  	1,122,1,122,3,122,2188,8,122,1,122,1,122,3,122,2192,8,122,1,122,1,122,
  	4,122,2196,8,122,11,122,12,122,2197,1,122,1,122,3,122,2202,8,122,1,123,
  	1,123,1,124,1,124,3,124,2208,8,124,1,124,1,124,3,124,2212,8,124,1,124,
  	5,124,2215,8,124,10,124,12,124,2218,9,124,1,125,1,125,3,125,2222,8,125,
  	1,125,1,125,3,125,2226,8,125,1,125,5,125,2229,8,125,10,125,12,125,2232,
  	9,125,1,126,1,126,3,126,2236,8,126,1,126,1,126,3,126,2240,8,126,1,126,
  	1,126,5,126,2244,8,126,10,126,12,126,2247,9,126,1,127,1,127,1,128,1,128,
  	3,128,2253,8,128,1,128,1,128,3,128,2257,8,128,1,128,1,128,5,128,2261,
  	8,128,10,128,12,128,2264,9,128,1,129,1,129,1,130,1,130,3,130,2270,8,130,
  	1,130,1,130,3,130,2274,8,130,1,130,1,130,5,130,2278,8,130,10,130,12,130,
  	2281,9,130,1,131,1,131,1,132,1,132,3,132,2287,8,132,1,132,1,132,3,132,
  	2291,8,132,1,132,5,132,2294,8,132,10,132,12,132,2297,9,132,1,133,1,133,
  	3,133,2301,8,133,5,133,2303,8,133,10,133,12,133,2306,9,133,1,133,1,133,
  	3,133,2310,8,133,1,133,3,133,2313,8,133,1,134,1,134,1,134,4,134,2318,
  	8,134,11,134,12,134,2319,1,134,3,134,2323,8,134,1,135,1,135,1,135,3,135,
  	2328,8,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,3,135,2337,8,135,
  	1,135,1,135,3,135,2341,8,135,1,135,3,135,2344,8,135,1,136,1,136,1,136,
  	1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,2357,8,136,1,136,
  	3,136,2360,8,136,1,136,1,136,1,137,3,137,2365,8,137,1,137,1,137,1,138,
  	1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,2379,8,138,
  	1,139,1,139,3,139,2383,8,139,1,139,5,139,2386,8,139,10,139,12,139,2389,
  	9,139,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,3,140,2400,
  	8,140,1,141,1,141,1,141,1,141,1,141,1,141,3,141,2408,8,141,1,142,1,142,
  	1,143,1,143,3,143,2414,8,143,1,143,1,143,3,143,2418,8,143,1,143,1,143,
  	3,143,2422,8,143,5,143,2424,8,143,10,143,12,143,2427,9,143,3,143,2429,
  	8,143,1,143,1,143,1,144,1,144,3,144,2435,8,144,1,144,3,144,2438,8,144,
  	1,145,1,145,3,145,2442,8,145,1,145,1,145,3,145,2446,8,145,1,145,1,145,
  	3,145,2450,8,145,1,145,1,145,3,145,2454,8,145,5,145,2456,8,145,10,145,
  	12,145,2459,9,145,1,145,1,145,1,146,1,146,3,146,2465,8,146,1,146,3,146,
  	2468,8,146,1,146,1,146,3,146,2472,8,146,1,146,1,146,1,147,1,147,3,147,
  	2478,8,147,1,147,1,147,3,147,2482,8,147,1,147,1,147,1,148,1,148,3,148,
  	2488,8,148,1,148,1,148,3,148,2492,8,148,1,148,1,148,3,148,2496,8,148,
  	1,148,1,148,1,148,3,148,2501,8,148,1,148,1,148,3,148,2505,8,148,1,148,
  	1,148,3,148,2509,8,148,1,148,1,148,3,148,2513,8,148,1,148,1,148,1,148,
  	3,148,2518,8,148,1,148,3,148,2521,8,148,1,148,3,148,2524,8,148,1,148,
  	1,148,1,148,1,148,3,148,2530,8,148,1,148,1,148,3,148,2534,8,148,1,148,
  	1,148,3,148,2538,8,148,3,148,2540,8,148,1,148,1,148,3,148,2544,8,148,
  	1,148,1,148,3,148,2548,8,148,1,148,1,148,3,148,2552,8,148,5,148,2554,
  	8,148,10,148,12,148,2557,9,148,3,148,2559,8,148,1,148,1,148,3,148,2563,
  	8,148,1,149,1,149,1,150,1,150,3,150,2569,8,150,1,150,1,150,1,150,3,150,
  	2574,8,150,3,150,2576,8,150,1,150,1,150,3,150,2580,8,150,1,151,1,151,
  	3,151,2584,8,151,1,151,1,151,1,151,3,151,2589,8,151,1,151,1,151,3,151,
  	2593,8,151,1,152,1,152,1,152,3,152,2598,8,152,1,152,1,152,3,152,2602,
  	8,152,1,152,1,152,3,152,2606,8,152,1,152,1,152,3,152,2610,8,152,5,152,
  	2612,8,152,10,152,12,152,2615,9,152,1,152,1,152,3,152,2619,8,152,1,153,
  	1,153,3,153,2623,8,153,1,153,4,153,2626,8,153,11,153,12,153,2627,1,154,
  	1,154,3,154,2632,8,154,1,154,1,154,3,154,2636,8,154,1,154,1,154,3,154,
  	2640,8,154,1,154,1,154,3,154,2644,8,154,1,154,3,154,2647,8,154,1,154,
  	3,154,2650,8,154,1,154,1,154,1,155,1,155,3,155,2656,8,155,1,155,1,155,
  	3,155,2660,8,155,1,155,1,155,3,155,2664,8,155,1,155,1,155,3,155,2668,
  	8,155,1,155,3,155,2671,8,155,1,155,3,155,2674,8,155,1,155,1,155,1,156,
  	1,156,3,156,2680,8,156,1,156,1,156,3,156,2684,8,156,1,157,1,157,3,157,
  	2688,8,157,1,157,4,157,2691,8,157,11,157,12,157,2692,1,157,1,157,3,157,
  	2697,8,157,1,157,1,157,3,157,2701,8,157,1,157,4,157,2704,8,157,11,157,
  	12,157,2705,3,157,2708,8,157,1,157,3,157,2711,8,157,1,157,1,157,3,157,
  	2715,8,157,1,157,3,157,2718,8,157,1,157,3,157,2721,8,157,1,157,1,157,
  	1,158,1,158,3,158,2727,8,158,1,158,1,158,3,158,2731,8,158,1,158,1,158,
  	3,158,2735,8,158,1,158,1,158,1,159,1,159,1,160,1,160,3,160,2743,8,160,
  	1,161,1,161,1,161,3,161,2748,8,161,1,162,1,162,3,162,2752,8,162,1,162,
  	1,162,1,163,1,163,1,164,1,164,1,165,1,165,1,166,1,166,1,167,1,167,1,167,
  	1,167,1,167,3,167,2769,8,167,1,168,1,168,1,169,1,169,1,170,1,170,1,171,
  	1,171,1,171,0,2,102,158,172,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
  	32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
  	78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
  	118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
  	154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
  	190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
  	226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
  	262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,
  	298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
  	334,336,338,340,342,0,11,3,0,119,119,126,126,131,131,2,0,51,52,72,73,
  	2,0,6,6,13,17,1,0,19,20,2,0,21,21,152,152,2,0,22,23,149,149,2,0,84,84,
  	135,135,28,0,46,46,48,48,50,50,53,56,60,61,63,65,67,68,71,71,74,74,76,
  	76,81,83,87,87,91,92,94,94,96,96,98,98,100,100,102,105,107,108,118,118,
  	120,124,126,127,129,129,134,134,136,136,139,139,144,144,148,148,2,0,14,
  	14,27,30,2,0,16,16,31,34,2,0,35,45,152,152,3144,0,344,1,0,0,0,2,364,1,
  	0,0,0,4,400,1,0,0,0,6,402,1,0,0,0,8,424,1,0,0,0,10,466,1,0,0,0,12,468,
  	1,0,0,0,14,498,1,0,0,0,16,519,1,0,0,0,18,530,1,0,0,0,20,536,1,0,0,0,22,
  	568,1,0,0,0,24,578,1,0,0,0,26,592,1,0,0,0,28,596,1,0,0,0,30,600,1,0,0,
  	0,32,612,1,0,0,0,34,624,1,0,0,0,36,667,1,0,0,0,38,681,1,0,0,0,40,725,
  	1,0,0,0,42,727,1,0,0,0,44,737,1,0,0,0,46,743,1,0,0,0,48,777,1,0,0,0,50,
  	822,1,0,0,0,52,881,1,0,0,0,54,889,1,0,0,0,56,900,1,0,0,0,58,917,1,0,0,
  	0,60,929,1,0,0,0,62,946,1,0,0,0,64,963,1,0,0,0,66,965,1,0,0,0,68,985,
  	1,0,0,0,70,996,1,0,0,0,72,998,1,0,0,0,74,1011,1,0,0,0,76,1015,1,0,0,0,
  	78,1021,1,0,0,0,80,1033,1,0,0,0,82,1035,1,0,0,0,84,1044,1,0,0,0,86,1048,
  	1,0,0,0,88,1052,1,0,0,0,90,1058,1,0,0,0,92,1066,1,0,0,0,94,1080,1,0,0,
  	0,96,1084,1,0,0,0,98,1098,1,0,0,0,100,1105,1,0,0,0,102,1195,1,0,0,0,104,
  	1204,1,0,0,0,106,1211,1,0,0,0,108,1219,1,0,0,0,110,1221,1,0,0,0,112,1223,
  	1,0,0,0,114,1239,1,0,0,0,116,1243,1,0,0,0,118,1245,1,0,0,0,120,1253,1,
  	0,0,0,122,1261,1,0,0,0,124,1265,1,0,0,0,126,1283,1,0,0,0,128,1318,1,0,
  	0,0,130,1332,1,0,0,0,132,1336,1,0,0,0,134,1383,1,0,0,0,136,1389,1,0,0,
  	0,138,1401,1,0,0,0,140,1419,1,0,0,0,142,1425,1,0,0,0,144,1427,1,0,0,0,
  	146,1467,1,0,0,0,148,1478,1,0,0,0,150,1494,1,0,0,0,152,1508,1,0,0,0,154,
  	1519,1,0,0,0,156,1534,1,0,0,0,158,1550,1,0,0,0,160,1571,1,0,0,0,162,1581,
  	1,0,0,0,164,1587,1,0,0,0,166,1609,1,0,0,0,168,1611,1,0,0,0,170,1629,1,
  	0,0,0,172,1641,1,0,0,0,174,1661,1,0,0,0,176,1669,1,0,0,0,178,1676,1,0,
  	0,0,180,1720,1,0,0,0,182,1729,1,0,0,0,184,1731,1,0,0,0,186,1746,1,0,0,
  	0,188,1750,1,0,0,0,190,1754,1,0,0,0,192,1761,1,0,0,0,194,1765,1,0,0,0,
  	196,1790,1,0,0,0,198,1792,1,0,0,0,200,1808,1,0,0,0,202,1810,1,0,0,0,204,
  	1834,1,0,0,0,206,1884,1,0,0,0,208,1886,1,0,0,0,210,1916,1,0,0,0,212,1957,
  	1,0,0,0,214,1978,1,0,0,0,216,1988,1,0,0,0,218,1994,1,0,0,0,220,2029,1,
  	0,0,0,222,2078,1,0,0,0,224,2090,1,0,0,0,226,2102,1,0,0,0,228,2104,1,0,
  	0,0,230,2106,1,0,0,0,232,2108,1,0,0,0,234,2110,1,0,0,0,236,2112,1,0,0,
  	0,238,2122,1,0,0,0,240,2132,1,0,0,0,242,2148,1,0,0,0,244,2201,1,0,0,0,
  	246,2203,1,0,0,0,248,2205,1,0,0,0,250,2219,1,0,0,0,252,2233,1,0,0,0,254,
  	2248,1,0,0,0,256,2250,1,0,0,0,258,2265,1,0,0,0,260,2267,1,0,0,0,262,2282,
  	1,0,0,0,264,2284,1,0,0,0,266,2304,1,0,0,0,268,2314,1,0,0,0,270,2343,1,
  	0,0,0,272,2356,1,0,0,0,274,2364,1,0,0,0,276,2378,1,0,0,0,278,2380,1,0,
  	0,0,280,2399,1,0,0,0,282,2407,1,0,0,0,284,2409,1,0,0,0,286,2411,1,0,0,
  	0,288,2432,1,0,0,0,290,2439,1,0,0,0,292,2464,1,0,0,0,294,2475,1,0,0,0,
  	296,2562,1,0,0,0,298,2564,1,0,0,0,300,2579,1,0,0,0,302,2581,1,0,0,0,304,
  	2618,1,0,0,0,306,2620,1,0,0,0,308,2629,1,0,0,0,310,2653,1,0,0,0,312,2677,
  	1,0,0,0,314,2707,1,0,0,0,316,2724,1,0,0,0,318,2738,1,0,0,0,320,2742,1,
  	0,0,0,322,2744,1,0,0,0,324,2749,1,0,0,0,326,2755,1,0,0,0,328,2757,1,0,
  	0,0,330,2759,1,0,0,0,332,2761,1,0,0,0,334,2768,1,0,0,0,336,2770,1,0,0,
  	0,338,2772,1,0,0,0,340,2774,1,0,0,0,342,2776,1,0,0,0,344,355,3,2,1,0,
  	345,347,5,169,0,0,346,345,1,0,0,0,346,347,1,0,0,0,347,348,1,0,0,0,348,
  	350,5,1,0,0,349,351,5,169,0,0,350,349,1,0,0,0,350,351,1,0,0,0,351,352,
  	1,0,0,0,352,354,3,2,1,0,353,346,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,
  	0,355,356,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,358,360,5,169,0,0,359,
  	358,1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,362,5,0,0,1,362,1,1,0,
  	0,0,363,365,3,108,54,0,364,363,1,0,0,0,364,365,1,0,0,0,365,367,1,0,0,
  	0,366,368,5,169,0,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,
  	374,3,4,2,0,370,372,5,169,0,0,371,370,1,0,0,0,371,372,1,0,0,0,372,373,
  	1,0,0,0,373,375,5,1,0,0,374,371,1,0,0,0,374,375,1,0,0,0,375,3,1,0,0,0,
  	376,401,3,122,61,0,377,401,3,46,23,0,378,401,3,48,24,0,379,401,3,50,25,
  	0,380,401,3,54,27,0,381,401,3,56,28,0,382,401,3,58,29,0,383,401,3,60,
  	30,0,384,401,3,76,38,0,385,401,3,78,39,0,386,401,3,6,3,0,387,401,3,12,
  	6,0,388,401,3,14,7,0,389,401,3,30,15,0,390,401,3,34,17,0,391,401,3,32,
  	16,0,392,401,3,114,57,0,393,401,3,116,58,0,394,401,3,16,8,0,395,401,3,
  	18,9,0,396,401,3,20,10,0,397,401,3,26,13,0,398,401,3,28,14,0,399,401,
  	3,62,31,0,400,376,1,0,0,0,400,377,1,0,0,0,400,378,1,0,0,0,400,379,1,0,
  	0,0,400,380,1,0,0,0,400,381,1,0,0,0,400,382,1,0,0,0,400,383,1,0,0,0,400,
  	384,1,0,0,0,400,385,1,0,0,0,400,386,1,0,0,0,400,387,1,0,0,0,400,388,1,
  	0,0,0,400,389,1,0,0,0,400,390,1,0,0,0,400,391,1,0,0,0,400,392,1,0,0,0,
  	400,393,1,0,0,0,400,394,1,0,0,0,400,395,1,0,0,0,400,396,1,0,0,0,400,397,
  	1,0,0,0,400,398,1,0,0,0,400,399,1,0,0,0,401,5,1,0,0,0,402,403,5,64,0,
  	0,403,404,5,169,0,0,404,413,3,332,166,0,405,407,5,169,0,0,406,405,1,0,
  	0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,410,3,8,4,0,409,411,5,169,0,0,
  	410,409,1,0,0,0,410,411,1,0,0,0,411,414,1,0,0,0,412,414,5,169,0,0,413,
  	406,1,0,0,0,413,412,1,0,0,0,414,415,1,0,0,0,415,416,5,85,0,0,416,417,
  	5,169,0,0,417,422,3,10,5,0,418,420,5,169,0,0,419,418,1,0,0,0,419,420,
  	1,0,0,0,420,421,1,0,0,0,421,423,3,42,21,0,422,419,1,0,0,0,422,423,1,0,
  	0,0,423,7,1,0,0,0,424,426,5,2,0,0,425,427,5,169,0,0,426,425,1,0,0,0,426,
  	427,1,0,0,0,427,428,1,0,0,0,428,439,3,332,166,0,429,431,5,169,0,0,430,
  	429,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,434,5,3,0,0,433,435,5,
  	169,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,438,3,332,
  	166,0,437,430,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,
  	440,443,1,0,0,0,441,439,1,0,0,0,442,444,5,169,0,0,443,442,1,0,0,0,443,
  	444,1,0,0,0,444,445,1,0,0,0,445,446,5,4,0,0,446,9,1,0,0,0,447,467,3,40,
  	20,0,448,450,5,2,0,0,449,451,5,169,0,0,450,449,1,0,0,0,450,451,1,0,0,
  	0,451,452,1,0,0,0,452,454,3,122,61,0,453,455,5,169,0,0,454,453,1,0,0,
  	0,454,455,1,0,0,0,455,456,1,0,0,0,456,457,5,4,0,0,457,467,1,0,0,0,458,
  	467,3,318,159,0,459,460,3,318,159,0,460,462,5,5,0,0,461,463,5,169,0,0,
  	462,461,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,465,3,332,166,0,465,
  	467,1,0,0,0,466,447,1,0,0,0,466,448,1,0,0,0,466,458,1,0,0,0,466,459,1,
  	0,0,0,467,11,1,0,0,0,468,469,5,64,0,0,469,470,5,169,0,0,470,471,3,332,
  	166,0,471,472,5,169,0,0,472,473,5,85,0,0,473,474,5,169,0,0,474,476,5,
  	2,0,0,475,477,5,169,0,0,476,475,1,0,0,0,476,477,1,0,0,0,477,478,1,0,0,
  	0,478,489,5,155,0,0,479,481,5,169,0,0,480,479,1,0,0,0,480,481,1,0,0,0,
  	481,482,1,0,0,0,482,484,5,3,0,0,483,485,5,169,0,0,484,483,1,0,0,0,484,
  	485,1,0,0,0,485,486,1,0,0,0,486,488,5,155,0,0,487,480,1,0,0,0,488,491,
  	1,0,0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,489,1,0,0,
  	0,492,493,5,4,0,0,493,494,5,169,0,0,494,495,5,55,0,0,495,496,5,169,0,
  	0,496,497,5,59,0,0,497,13,1,0,0,0,498,499,5,64,0,0,499,500,5,169,0,0,
  	500,502,5,2,0,0,501,503,5,169,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,
  	504,1,0,0,0,504,506,3,122,61,0,505,507,5,169,0,0,506,505,1,0,0,0,506,
  	507,1,0,0,0,507,508,1,0,0,0,508,509,5,4,0,0,509,510,5,169,0,0,510,511,
  	5,133,0,0,511,512,5,169,0,0,512,517,5,155,0,0,513,515,5,169,0,0,514,513,
  	1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,518,3,42,21,0,517,514,1,0,
  	0,0,517,518,1,0,0,0,518,15,1,0,0,0,519,520,5,82,0,0,520,521,5,169,0,0,
  	521,522,5,68,0,0,522,523,5,169,0,0,523,528,5,155,0,0,524,526,5,169,0,
  	0,525,524,1,0,0,0,525,526,1,0,0,0,526,527,1,0,0,0,527,529,3,42,21,0,528,
  	525,1,0,0,0,528,529,1,0,0,0,529,17,1,0,0,0,530,531,5,91,0,0,531,532,5,
  	169,0,0,532,533,5,68,0,0,533,534,5,169,0,0,534,535,5,155,0,0,535,19,1,
  	0,0,0,536,537,5,53,0,0,537,538,5,169,0,0,538,543,5,155,0,0,539,540,5,
  	169,0,0,540,541,5,50,0,0,541,542,5,169,0,0,542,544,3,332,166,0,543,539,
  	1,0,0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,546,5,169,0,0,546,548,5,2,
  	0,0,547,549,5,169,0,0,548,547,1,0,0,0,548,549,1,0,0,0,549,550,1,0,0,0,
  	550,551,5,69,0,0,551,552,5,169,0,0,552,561,3,334,167,0,553,555,5,169,
  	0,0,554,553,1,0,0,0,554,555,1,0,0,0,555,556,1,0,0,0,556,558,5,3,0,0,557,
  	559,5,169,0,0,558,557,1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,562,
  	3,24,12,0,561,554,1,0,0,0,561,562,1,0,0,0,562,564,1,0,0,0,563,565,5,169,
  	0,0,564,563,1,0,0,0,564,565,1,0,0,0,565,566,1,0,0,0,566,567,5,4,0,0,567,
  	21,1,0,0,0,568,570,3,334,167,0,569,571,5,169,0,0,570,569,1,0,0,0,570,
  	571,1,0,0,0,571,572,1,0,0,0,572,574,5,6,0,0,573,575,5,169,0,0,574,573,
  	1,0,0,0,574,575,1,0,0,0,575,576,1,0,0,0,576,577,3,282,141,0,577,23,1,
  	0,0,0,578,589,3,22,11,0,579,581,5,169,0,0,580,579,1,0,0,0,580,581,1,0,
  	0,0,581,582,1,0,0,0,582,584,5,3,0,0,583,585,5,169,0,0,584,583,1,0,0,0,
  	584,585,1,0,0,0,585,586,1,0,0,0,586,588,3,22,11,0,587,580,1,0,0,0,588,
  	591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,25,1,0,0,0,591,589,1,
  	0,0,0,592,593,5,74,0,0,593,594,5,169,0,0,594,595,3,332,166,0,595,27,1,
  	0,0,0,596,597,5,139,0,0,597,598,5,169,0,0,598,599,3,332,166,0,599,29,
  	1,0,0,0,600,601,5,56,0,0,601,602,5,169,0,0,602,604,3,334,167,0,603,605,
  	5,169,0,0,604,603,1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,0,606,608,5,6,
  	0,0,607,609,5,169,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,
  	610,611,3,234,117,0,611,31,1,0,0,0,612,613,5,60,0,0,613,614,5,169,0,0,
  	614,615,5,111,0,0,615,616,5,169,0,0,616,617,5,131,0,0,617,618,5,169,0,
  	0,618,619,3,332,166,0,619,620,5,169,0,0,620,621,5,96,0,0,621,622,5,169,
  	0,0,622,623,5,155,0,0,623,33,1,0,0,0,624,625,5,66,0,0,625,626,5,169,0,
  	0,626,627,5,101,0,0,627,628,5,169,0,0,628,630,3,298,149,0,629,631,5,169,
  	0,0,630,629,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,634,5,2,0,0,633,
  	635,5,169,0,0,634,633,1,0,0,0,634,635,1,0,0,0,635,637,1,0,0,0,636,638,
  	3,36,18,0,637,636,1,0,0,0,637,638,1,0,0,0,638,640,1,0,0,0,639,641,5,169,
  	0,0,640,639,1,0,0,0,640,641,1,0,0,0,641,643,1,0,0,0,642,644,3,38,19,0,
  	643,642,1,0,0,0,643,644,1,0,0,0,644,655,1,0,0,0,645,647,5,169,0,0,646,
  	645,1,0,0,0,646,647,1,0,0,0,647,648,1,0,0,0,648,650,5,3,0,0,649,651,5,
  	169,0,0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,654,3,38,
  	19,0,653,646,1,0,0,0,654,657,1,0,0,0,655,653,1,0,0,0,655,656,1,0,0,0,
  	656,659,1,0,0,0,657,655,1,0,0,0,658,660,5,169,0,0,659,658,1,0,0,0,659,
  	660,1,0,0,0,660,661,1,0,0,0,661,662,5,4,0,0,662,663,5,169,0,0,663,664,
  	5,50,0,0,664,665,5,169,0,0,665,666,3,234,117,0,666,35,1,0,0,0,667,678,
  	3,334,167,0,668,670,5,169,0,0,669,668,1,0,0,0,669,670,1,0,0,0,670,671,
  	1,0,0,0,671,673,5,3,0,0,672,674,5,169,0,0,673,672,1,0,0,0,673,674,1,0,
  	0,0,674,675,1,0,0,0,675,677,3,334,167,0,676,669,1,0,0,0,677,680,1,0,0,
  	0,678,676,1,0,0,0,678,679,1,0,0,0,679,37,1,0,0,0,680,678,1,0,0,0,681,
  	683,3,334,167,0,682,684,5,169,0,0,683,682,1,0,0,0,683,684,1,0,0,0,684,
  	685,1,0,0,0,685,686,5,154,0,0,686,688,5,6,0,0,687,689,5,169,0,0,688,687,
  	1,0,0,0,688,689,1,0,0,0,689,690,1,0,0,0,690,691,3,282,141,0,691,39,1,
  	0,0,0,692,694,5,7,0,0,693,695,5,169,0,0,694,693,1,0,0,0,694,695,1,0,0,
  	0,695,696,1,0,0,0,696,707,5,155,0,0,697,699,5,169,0,0,698,697,1,0,0,0,
  	698,699,1,0,0,0,699,700,1,0,0,0,700,702,5,3,0,0,701,703,5,169,0,0,702,
  	701,1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,0,704,706,5,155,0,0,705,698,
  	1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,707,708,1,0,0,0,708,710,1,0,0,
  	0,709,707,1,0,0,0,710,726,5,8,0,0,711,726,5,155,0,0,712,714,5,86,0,0,
  	713,715,5,169,0,0,714,713,1,0,0,0,714,715,1,0,0,0,715,716,1,0,0,0,716,
  	718,5,2,0,0,717,719,5,169,0,0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,
  	1,0,0,0,720,722,5,155,0,0,721,723,5,169,0,0,722,721,1,0,0,0,722,723,1,
  	0,0,0,723,724,1,0,0,0,724,726,5,4,0,0,725,692,1,0,0,0,725,711,1,0,0,0,
  	725,712,1,0,0,0,726,41,1,0,0,0,727,729,5,2,0,0,728,730,5,169,0,0,729,
  	728,1,0,0,0,729,730,1,0,0,0,730,731,1,0,0,0,731,733,3,24,12,0,732,734,
  	5,169,0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,736,5,4,
  	0,0,736,43,1,0,0,0,737,738,5,92,0,0,738,739,5,169,0,0,739,740,5,109,0,
  	0,740,741,5,169,0,0,741,742,5,80,0,0,742,45,1,0,0,0,743,744,5,66,0,0,
  	744,745,5,169,0,0,745,746,5,108,0,0,746,747,5,169,0,0,747,748,5,131,0,
  	0,748,752,5,169,0,0,749,750,3,44,22,0,750,751,5,169,0,0,751,753,1,0,0,
  	0,752,749,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,756,3,332,166,0,
  	755,757,5,169,0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,0,758,
  	760,5,2,0,0,759,761,5,169,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,762,
  	1,0,0,0,762,764,3,96,48,0,763,765,5,169,0,0,764,763,1,0,0,0,764,765,1,
  	0,0,0,765,766,1,0,0,0,766,768,5,3,0,0,767,769,5,169,0,0,768,767,1,0,0,
  	0,768,769,1,0,0,0,769,770,1,0,0,0,770,771,3,100,50,0,771,773,1,0,0,0,
  	772,774,5,169,0,0,773,772,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,
  	776,5,4,0,0,776,47,1,0,0,0,777,778,5,66,0,0,778,779,5,169,0,0,779,780,
  	5,121,0,0,780,781,5,169,0,0,781,782,5,131,0,0,782,786,5,169,0,0,783,784,
  	3,44,22,0,784,785,5,169,0,0,785,787,1,0,0,0,786,783,1,0,0,0,786,787,1,
  	0,0,0,787,788,1,0,0,0,788,790,3,332,166,0,789,791,5,169,0,0,790,789,1,
  	0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,794,5,2,0,0,793,795,5,169,0,
  	0,794,793,1,0,0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,798,3,52,26,0,797,
  	799,5,169,0,0,798,797,1,0,0,0,798,799,1,0,0,0,799,808,1,0,0,0,800,802,
  	5,3,0,0,801,803,5,169,0,0,802,801,1,0,0,0,802,803,1,0,0,0,803,804,1,0,
  	0,0,804,806,3,96,48,0,805,807,5,169,0,0,806,805,1,0,0,0,806,807,1,0,0,
  	0,807,809,1,0,0,0,808,800,1,0,0,0,808,809,1,0,0,0,809,818,1,0,0,0,810,
  	812,5,3,0,0,811,813,5,169,0,0,812,811,1,0,0,0,812,813,1,0,0,0,813,814,
  	1,0,0,0,814,816,3,334,167,0,815,817,5,169,0,0,816,815,1,0,0,0,816,817,
  	1,0,0,0,817,819,1,0,0,0,818,810,1,0,0,0,818,819,1,0,0,0,819,820,1,0,0,
  	0,820,821,5,4,0,0,821,49,1,0,0,0,822,823,5,66,0,0,823,824,5,169,0,0,824,
  	825,5,121,0,0,825,826,5,169,0,0,826,827,5,131,0,0,827,828,5,169,0,0,828,
  	829,5,88,0,0,829,833,5,169,0,0,830,831,3,44,22,0,831,832,5,169,0,0,832,
  	834,1,0,0,0,833,830,1,0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,837,3,
  	332,166,0,836,838,5,169,0,0,837,836,1,0,0,0,837,838,1,0,0,0,838,839,1,
  	0,0,0,839,841,5,2,0,0,840,842,5,169,0,0,841,840,1,0,0,0,841,842,1,0,0,
  	0,842,843,1,0,0,0,843,852,3,52,26,0,844,846,5,169,0,0,845,844,1,0,0,0,
  	845,846,1,0,0,0,846,847,1,0,0,0,847,849,5,3,0,0,848,850,5,169,0,0,849,
  	848,1,0,0,0,849,850,1,0,0,0,850,851,1,0,0,0,851,853,3,52,26,0,852,845,
  	1,0,0,0,853,854,1,0,0,0,854,852,1,0,0,0,854,855,1,0,0,0,855,857,1,0,0,
  	0,856,858,5,169,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,867,1,0,0,0,859,
  	861,5,3,0,0,860,862,5,169,0,0,861,860,1,0,0,0,861,862,1,0,0,0,862,863,
  	1,0,0,0,863,865,3,96,48,0,864,866,5,169,0,0,865,864,1,0,0,0,865,866,1,
  	0,0,0,866,868,1,0,0,0,867,859,1,0,0,0,867,868,1,0,0,0,868,877,1,0,0,0,
  	869,871,5,3,0,0,870,872,5,169,0,0,871,870,1,0,0,0,871,872,1,0,0,0,872,
  	873,1,0,0,0,873,875,3,334,167,0,874,876,5,169,0,0,875,874,1,0,0,0,875,
  	876,1,0,0,0,876,878,1,0,0,0,877,869,1,0,0,0,877,878,1,0,0,0,878,879,1,
  	0,0,0,879,880,5,4,0,0,880,51,1,0,0,0,881,882,5,85,0,0,882,883,5,169,0,
  	0,883,884,3,332,166,0,884,885,5,169,0,0,885,886,5,133,0,0,886,887,5,169,
  	0,0,887,888,3,332,166,0,888,53,1,0,0,0,889,890,5,66,0,0,890,891,5,169,
  	0,0,891,892,5,119,0,0,892,896,5,169,0,0,893,894,3,44,22,0,894,895,5,169,
  	0,0,895,897,1,0,0,0,896,893,1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,
  	899,3,332,166,0,899,55,1,0,0,0,900,901,5,66,0,0,901,902,5,169,0,0,902,
  	903,5,126,0,0,903,907,5,169,0,0,904,905,3,44,22,0,905,906,5,169,0,0,906,
  	908,1,0,0,0,907,904,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,914,3,
  	332,166,0,910,911,5,169,0,0,911,913,3,64,32,0,912,910,1,0,0,0,913,916,
  	1,0,0,0,914,912,1,0,0,0,914,915,1,0,0,0,915,57,1,0,0,0,916,914,1,0,0,
  	0,917,918,5,66,0,0,918,919,5,169,0,0,919,920,5,136,0,0,920,921,5,169,
  	0,0,921,922,3,332,166,0,922,923,5,169,0,0,923,924,5,50,0,0,924,925,5,
  	169,0,0,925,927,3,102,51,0,926,928,5,169,0,0,927,926,1,0,0,0,927,928,
  	1,0,0,0,928,59,1,0,0,0,929,930,5,66,0,0,930,931,5,169,0,0,931,932,5,146,
  	0,0,932,933,5,169,0,0,933,934,5,147,0,0,934,935,5,169,0,0,935,936,5,111,
  	0,0,936,937,5,169,0,0,937,938,3,332,166,0,938,939,5,5,0,0,939,944,3,326,
  	163,0,940,942,5,169,0,0,941,940,1,0,0,0,941,942,1,0,0,0,942,943,1,0,0,
  	0,943,945,3,42,21,0,944,941,1,0,0,0,944,945,1,0,0,0,945,61,1,0,0,0,946,
  	947,5,140,0,0,947,948,5,169,0,0,948,949,5,146,0,0,949,950,5,169,0,0,950,
  	951,5,147,0,0,951,952,5,169,0,0,952,953,5,111,0,0,953,954,5,169,0,0,954,
  	955,3,332,166,0,955,956,5,5,0,0,956,957,3,326,163,0,957,63,1,0,0,0,958,
  	964,3,66,33,0,959,964,3,68,34,0,960,964,3,70,35,0,961,964,3,72,36,0,962,
  	964,3,74,37,0,963,958,1,0,0,0,963,959,1,0,0,0,963,960,1,0,0,0,963,961,
  	1,0,0,0,963,962,1,0,0,0,964,65,1,0,0,0,965,966,5,94,0,0,966,969,5,169,
  	0,0,967,968,5,55,0,0,968,970,5,169,0,0,969,967,1,0,0,0,969,970,1,0,0,
  	0,970,972,1,0,0,0,971,973,5,152,0,0,972,971,1,0,0,0,972,973,1,0,0,0,973,
  	974,1,0,0,0,974,975,3,328,164,0,975,67,1,0,0,0,976,977,5,107,0,0,977,
  	978,5,169,0,0,978,986,5,105,0,0,979,980,5,105,0,0,980,982,5,169,0,0,981,
  	983,5,152,0,0,982,981,1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,986,
  	3,328,164,0,985,976,1,0,0,0,985,979,1,0,0,0,986,69,1,0,0,0,987,988,5,
  	107,0,0,988,989,5,169,0,0,989,997,5,103,0,0,990,991,5,103,0,0,991,993,
  	5,169,0,0,992,994,5,152,0,0,993,992,1,0,0,0,993,994,1,0,0,0,994,995,1,
  	0,0,0,995,997,3,328,164,0,996,987,1,0,0,0,996,990,1,0,0,0,997,71,1,0,
  	0,0,998,999,5,129,0,0,999,1002,5,169,0,0,1000,1001,5,143,0,0,1001,1003,
  	5,169,0,0,1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,1005,1,0,0,0,1004,
  	1006,5,152,0,0,1005,1004,1,0,0,0,1005,1006,1,0,0,0,1006,1007,1,0,0,0,
  	1007,1008,3,328,164,0,1008,73,1,0,0,0,1009,1010,5,107,0,0,1010,1012,5,
  	169,0,0,1011,1009,1,0,0,0,1011,1012,1,0,0,0,1012,1013,1,0,0,0,1013,1014,
  	5,67,0,0,1014,75,1,0,0,0,1015,1016,5,76,0,0,1016,1017,5,169,0,0,1017,
  	1018,7,0,0,0,1018,1019,5,169,0,0,1019,1020,3,332,166,0,1020,77,1,0,0,
  	0,1021,1022,5,48,0,0,1022,1023,5,169,0,0,1023,1024,5,131,0,0,1024,1025,
  	5,169,0,0,1025,1026,3,332,166,0,1026,1027,5,169,0,0,1027,1028,3,80,40,
  	0,1028,79,1,0,0,0,1029,1034,3,82,41,0,1030,1034,3,86,43,0,1031,1034,3,
  	88,44,0,1032,1034,3,90,45,0,1033,1029,1,0,0,0,1033,1030,1,0,0,0,1033,
  	1031,1,0,0,0,1033,1032,1,0,0,0,1034,81,1,0,0,0,1035,1036,5,46,0,0,1036,
  	1037,5,169,0,0,1037,1038,3,326,163,0,1038,1039,5,169,0,0,1039,1042,3,
  	102,51,0,1040,1041,5,169,0,0,1041,1043,3,84,42,0,1042,1040,1,0,0,0,1042,
  	1043,1,0,0,0,1043,83,1,0,0,0,1044,1045,5,70,0,0,1045,1046,5,169,0,0,1046,
  	1047,3,234,117,0,1047,85,1,0,0,0,1048,1049,5,76,0,0,1049,1050,5,169,0,
  	0,1050,1051,3,326,163,0,1051,87,1,0,0,0,1052,1053,5,122,0,0,1053,1054,
  	5,169,0,0,1054,1055,5,133,0,0,1055,1056,5,169,0,0,1056,1057,3,332,166,
  	0,1057,89,1,0,0,0,1058,1059,5,122,0,0,1059,1060,5,169,0,0,1060,1061,3,
  	326,163,0,1061,1062,5,169,0,0,1062,1063,5,133,0,0,1063,1064,5,169,0,0,
  	1064,1065,3,326,163,0,1065,91,1,0,0,0,1066,1077,3,94,47,0,1067,1069,5,
  	169,0,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,1070,1,0,0,0,1070,1072,
  	5,3,0,0,1071,1073,5,169,0,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,
  	1074,1,0,0,0,1074,1076,3,94,47,0,1075,1068,1,0,0,0,1076,1079,1,0,0,0,
  	1077,1075,1,0,0,0,1077,1078,1,0,0,0,1078,93,1,0,0,0,1079,1077,1,0,0,0,
  	1080,1081,3,326,163,0,1081,1082,5,169,0,0,1082,1083,3,102,51,0,1083,95,
  	1,0,0,0,1084,1095,3,98,49,0,1085,1087,5,169,0,0,1086,1085,1,0,0,0,1086,
  	1087,1,0,0,0,1087,1088,1,0,0,0,1088,1090,5,3,0,0,1089,1091,5,169,0,0,
  	1090,1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,1,0,0,0,1092,1094,3,98,
  	49,0,1093,1086,1,0,0,0,1094,1097,1,0,0,0,1095,1093,1,0,0,0,1095,1096,
  	1,0,0,0,1096,97,1,0,0,0,1097,1095,1,0,0,0,1098,1099,3,326,163,0,1099,
  	1100,5,169,0,0,1100,1103,3,102,51,0,1101,1102,5,169,0,0,1102,1104,3,84,
  	42,0,1103,1101,1,0,0,0,1103,1104,1,0,0,0,1104,99,1,0,0,0,1105,1106,5,
  	116,0,0,1106,1107,5,169,0,0,1107,1109,5,98,0,0,1108,1110,5,169,0,0,1109,
  	1108,1,0,0,0,1109,1110,1,0,0,0,1110,1111,1,0,0,0,1111,1113,5,2,0,0,1112,
  	1114,5,169,0,0,1113,1112,1,0,0,0,1113,1114,1,0,0,0,1114,1115,1,0,0,0,
  	1115,1117,3,326,163,0,1116,1118,5,169,0,0,1117,1116,1,0,0,0,1117,1118,
  	1,0,0,0,1118,1119,1,0,0,0,1119,1120,5,4,0,0,1120,101,1,0,0,0,1121,1122,
  	6,51,-1,0,1122,1196,3,334,167,0,1123,1125,5,137,0,0,1124,1126,5,169,0,
  	0,1125,1124,1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,1129,5,2,
  	0,0,1128,1130,5,169,0,0,1129,1128,1,0,0,0,1129,1130,1,0,0,0,1130,1131,
  	1,0,0,0,1131,1133,3,92,46,0,1132,1134,5,169,0,0,1133,1132,1,0,0,0,1133,
  	1134,1,0,0,0,1134,1135,1,0,0,0,1135,1136,5,4,0,0,1136,1196,1,0,0,0,1137,
  	1139,3,334,167,0,1138,1140,5,169,0,0,1139,1138,1,0,0,0,1139,1140,1,0,
  	0,0,1140,1141,1,0,0,0,1141,1143,5,2,0,0,1142,1144,5,169,0,0,1143,1142,
  	1,0,0,0,1143,1144,1,0,0,0,1144,1145,1,0,0,0,1145,1147,3,92,46,0,1146,
  	1148,5,169,0,0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,
  	1149,1150,5,4,0,0,1150,1196,1,0,0,0,1151,1153,3,334,167,0,1152,1154,5,
  	169,0,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1155,1,0,0,0,1155,1157,
  	5,2,0,0,1156,1158,5,169,0,0,1157,1156,1,0,0,0,1157,1158,1,0,0,0,1158,
  	1159,1,0,0,0,1159,1161,3,102,51,0,1160,1162,5,169,0,0,1161,1160,1,0,0,
  	0,1161,1162,1,0,0,0,1162,1163,1,0,0,0,1163,1165,5,3,0,0,1164,1166,5,169,
  	0,0,1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,1167,1,0,0,0,1167,1169,3,
  	102,51,0,1168,1170,5,169,0,0,1169,1168,1,0,0,0,1169,1170,1,0,0,0,1170,
  	1171,1,0,0,0,1171,1172,5,4,0,0,1172,1196,1,0,0,0,1173,1175,5,148,0,0,
  	1174,1176,5,169,0,0,1175,1174,1,0,0,0,1175,1176,1,0,0,0,1176,1177,1,0,
  	0,0,1177,1179,5,2,0,0,1178,1180,5,169,0,0,1179,1178,1,0,0,0,1179,1180,
  	1,0,0,0,1180,1181,1,0,0,0,1181,1183,3,328,164,0,1182,1184,5,169,0,0,1183,
  	1182,1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,0,0,1185,1187,5,3,0,0,1186,
  	1188,5,169,0,0,1187,1186,1,0,0,0,1187,1188,1,0,0,0,1188,1189,1,0,0,0,
  	1189,1191,3,328,164,0,1190,1192,5,169,0,0,1191,1190,1,0,0,0,1191,1192,
  	1,0,0,0,1192,1193,1,0,0,0,1193,1194,5,4,0,0,1194,1196,1,0,0,0,1195,1121,
  	1,0,0,0,1195,1123,1,0,0,0,1195,1137,1,0,0,0,1195,1151,1,0,0,0,1195,1173,
  	1,0,0,0,1196,1201,1,0,0,0,1197,1198,10,5,0,0,1198,1200,3,104,52,0,1199,
  	1197,1,0,0,0,1200,1203,1,0,0,0,1201,1199,1,0,0,0,1201,1202,1,0,0,0,1202,
  	103,1,0,0,0,1203,1201,1,0,0,0,1204,1208,3,106,53,0,1205,1207,3,106,53,
  	0,1206,1205,1,0,0,0,1207,1210,1,0,0,0,1208,1206,1,0,0,0,1208,1209,1,0,
  	0,0,1209,105,1,0,0,0,1210,1208,1,0,0,0,1211,1213,5,7,0,0,1212,1214,3,
  	328,164,0,1213,1212,1,0,0,0,1213,1214,1,0,0,0,1214,1215,1,0,0,0,1215,
  	1216,5,8,0,0,1216,107,1,0,0,0,1217,1220,3,110,55,0,1218,1220,3,112,56,
  	0,1219,1217,1,0,0,0,1219,1218,1,0,0,0,1220,109,1,0,0,0,1221,1222,5,81,
  	0,0,1222,111,1,0,0,0,1223,1224,5,117,0,0,1224,113,1,0,0,0,1225,1226,5,
  	54,0,0,1226,1227,5,169,0,0,1227,1240,5,134,0,0,1228,1229,5,54,0,0,1229,
  	1230,5,169,0,0,1230,1231,5,134,0,0,1231,1232,5,169,0,0,1232,1233,5,120,
  	0,0,1233,1234,5,169,0,0,1234,1240,5,112,0,0,1235,1240,5,61,0,0,1236,1240,
  	5,62,0,0,1237,1240,5,124,0,0,1238,1240,5,125,0,0,1239,1225,1,0,0,0,1239,
  	1228,1,0,0,0,1239,1235,1,0,0,0,1239,1236,1,0,0,0,1239,1237,1,0,0,0,1239,
  	1238,1,0,0,0,1240,115,1,0,0,0,1241,1244,3,118,59,0,1242,1244,3,120,60,
  	0,1243,1241,1,0,0,0,1243,1242,1,0,0,0,1244,117,1,0,0,0,1245,1246,5,100,
  	0,0,1246,1247,5,169,0,0,1247,1248,5,83,0,0,1248,1251,5,169,0,0,1249,1252,
  	5,155,0,0,1250,1252,3,318,159,0,1251,1249,1,0,0,0,1251,1250,1,0,0,0,1252,
  	119,1,0,0,0,1253,1254,5,95,0,0,1254,1255,5,169,0,0,1255,1256,3,318,159,
  	0,1256,121,1,0,0,0,1257,1259,3,124,62,0,1258,1260,5,169,0,0,1259,1258,
  	1,0,0,0,1259,1260,1,0,0,0,1260,1262,1,0,0,0,1261,1257,1,0,0,0,1261,1262,
  	1,0,0,0,1262,1263,1,0,0,0,1263,1264,3,128,64,0,1264,123,1,0,0,0,1265,
  	1266,5,118,0,0,1266,1267,5,169,0,0,1267,1268,5,87,0,0,1268,1269,5,169,
  	0,0,1269,1271,3,332,166,0,1270,1272,5,169,0,0,1271,1270,1,0,0,0,1271,
  	1272,1,0,0,0,1272,1273,1,0,0,0,1273,1275,5,2,0,0,1274,1276,5,169,0,0,
  	1275,1274,1,0,0,0,1275,1276,1,0,0,0,1276,1277,1,0,0,0,1277,1279,3,126,
  	63,0,1278,1280,5,169,0,0,1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,
  	1,0,0,0,1281,1282,5,4,0,0,1282,125,1,0,0,0,1283,1294,3,148,74,0,1284,
  	1286,5,169,0,0,1285,1284,1,0,0,0,1285,1286,1,0,0,0,1286,1287,1,0,0,0,
  	1287,1289,5,3,0,0,1288,1290,5,169,0,0,1289,1288,1,0,0,0,1289,1290,1,0,
  	0,0,1290,1291,1,0,0,0,1291,1293,3,148,74,0,1292,1285,1,0,0,0,1293,1296,
  	1,0,0,0,1294,1292,1,0,0,0,1294,1295,1,0,0,0,1295,127,1,0,0,0,1296,1294,
  	1,0,0,0,1297,1304,3,132,66,0,1298,1300,5,169,0,0,1299,1298,1,0,0,0,1299,
  	1300,1,0,0,0,1300,1301,1,0,0,0,1301,1303,3,130,65,0,1302,1299,1,0,0,0,
  	1303,1306,1,0,0,0,1304,1302,1,0,0,0,1304,1305,1,0,0,0,1305,1319,1,0,0,
  	0,1306,1304,1,0,0,0,1307,1309,3,176,88,0,1308,1310,5,169,0,0,1309,1308,
  	1,0,0,0,1309,1310,1,0,0,0,1310,1312,1,0,0,0,1311,1307,1,0,0,0,1312,1313,
  	1,0,0,0,1313,1311,1,0,0,0,1313,1314,1,0,0,0,1314,1315,1,0,0,0,1315,1316,
  	3,132,66,0,1316,1317,6,64,-1,0,1317,1319,1,0,0,0,1318,1297,1,0,0,0,1318,
  	1311,1,0,0,0,1319,129,1,0,0,0,1320,1321,5,137,0,0,1321,1322,5,169,0,0,
  	1322,1324,5,47,0,0,1323,1325,5,169,0,0,1324,1323,1,0,0,0,1324,1325,1,
  	0,0,0,1325,1326,1,0,0,0,1326,1333,3,132,66,0,1327,1329,5,137,0,0,1328,
  	1330,5,169,0,0,1329,1328,1,0,0,0,1329,1330,1,0,0,0,1330,1331,1,0,0,0,
  	1331,1333,3,132,66,0,1332,1320,1,0,0,0,1332,1327,1,0,0,0,1333,131,1,0,
  	0,0,1334,1337,3,134,67,0,1335,1337,3,136,68,0,1336,1334,1,0,0,0,1336,
  	1335,1,0,0,0,1337,133,1,0,0,0,1338,1340,3,142,71,0,1339,1341,5,169,0,
  	0,1340,1339,1,0,0,0,1340,1341,1,0,0,0,1341,1343,1,0,0,0,1342,1338,1,0,
  	0,0,1343,1346,1,0,0,0,1344,1342,1,0,0,0,1344,1345,1,0,0,0,1345,1347,1,
  	0,0,0,1346,1344,1,0,0,0,1347,1384,3,176,88,0,1348,1350,3,142,71,0,1349,
  	1351,5,169,0,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,1353,1,0,0,0,
  	1352,1348,1,0,0,0,1353,1356,1,0,0,0,1354,1352,1,0,0,0,1354,1355,1,0,0,
  	0,1355,1357,1,0,0,0,1356,1354,1,0,0,0,1357,1364,3,140,70,0,1358,1360,
  	5,169,0,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,1361,1,0,0,0,1361,
  	1363,3,140,70,0,1362,1359,1,0,0,0,1363,1366,1,0,0,0,1364,1362,1,0,0,0,
  	1364,1365,1,0,0,0,1365,1371,1,0,0,0,1366,1364,1,0,0,0,1367,1369,5,169,
  	0,0,1368,1367,1,0,0,0,1368,1369,1,0,0,0,1369,1370,1,0,0,0,1370,1372,3,
  	176,88,0,1371,1368,1,0,0,0,1371,1372,1,0,0,0,1372,1384,1,0,0,0,1373,1375,
  	3,142,71,0,1374,1376,5,169,0,0,1375,1374,1,0,0,0,1375,1376,1,0,0,0,1376,
  	1378,1,0,0,0,1377,1373,1,0,0,0,1378,1379,1,0,0,0,1379,1377,1,0,0,0,1379,
  	1380,1,0,0,0,1380,1381,1,0,0,0,1381,1382,6,67,-1,0,1382,1384,1,0,0,0,
  	1383,1344,1,0,0,0,1383,1354,1,0,0,0,1383,1377,1,0,0,0,1384,135,1,0,0,
  	0,1385,1387,3,138,69,0,1386,1388,5,169,0,0,1387,1386,1,0,0,0,1387,1388,
  	1,0,0,0,1388,1390,1,0,0,0,1389,1385,1,0,0,0,1390,1391,1,0,0,0,1391,1389,
  	1,0,0,0,1391,1392,1,0,0,0,1392,1393,1,0,0,0,1393,1394,3,134,67,0,1394,
  	137,1,0,0,0,1395,1397,3,142,71,0,1396,1398,5,169,0,0,1397,1396,1,0,0,
  	0,1397,1398,1,0,0,0,1398,1400,1,0,0,0,1399,1395,1,0,0,0,1400,1403,1,0,
  	0,0,1401,1399,1,0,0,0,1401,1402,1,0,0,0,1402,1410,1,0,0,0,1403,1401,1,
  	0,0,0,1404,1406,3,140,70,0,1405,1407,5,169,0,0,1406,1405,1,0,0,0,1406,
  	1407,1,0,0,0,1407,1409,1,0,0,0,1408,1404,1,0,0,0,1409,1412,1,0,0,0,1410,
  	1408,1,0,0,0,1410,1411,1,0,0,0,1411,1413,1,0,0,0,1412,1410,1,0,0,0,1413,
  	1414,3,174,87,0,1414,139,1,0,0,0,1415,1420,3,162,81,0,1416,1420,3,164,
  	82,0,1417,1420,3,168,84,0,1418,1420,3,172,86,0,1419,1415,1,0,0,0,1419,
  	1416,1,0,0,0,1419,1417,1,0,0,0,1419,1418,1,0,0,0,1420,141,1,0,0,0,1421,
  	1426,3,154,77,0,1422,1426,3,160,80,0,1423,1426,3,146,73,0,1424,1426,3,
  	144,72,0,1425,1421,1,0,0,0,1425,1422,1,0,0,0,1425,1423,1,0,0,0,1425,1424,
  	1,0,0,0,1426,143,1,0,0,0,1427,1445,5,100,0,0,1428,1429,5,169,0,0,1429,
  	1430,5,143,0,0,1430,1431,5,169,0,0,1431,1433,5,89,0,0,1432,1434,5,169,
  	0,0,1433,1432,1,0,0,0,1433,1434,1,0,0,0,1434,1435,1,0,0,0,1435,1437,5,
  	2,0,0,1436,1438,5,169,0,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1439,
  	1,0,0,0,1439,1441,3,92,46,0,1440,1442,5,169,0,0,1441,1440,1,0,0,0,1441,
  	1442,1,0,0,0,1442,1443,1,0,0,0,1443,1444,5,4,0,0,1444,1446,1,0,0,0,1445,
  	1428,1,0,0,0,1445,1446,1,0,0,0,1446,1447,1,0,0,0,1447,1448,5,169,0,0,
  	1448,1449,5,85,0,0,1449,1450,5,169,0,0,1450,1455,3,10,5,0,1451,1453,5,
  	169,0,0,1452,1451,1,0,0,0,1452,1453,1,0,0,0,1453,1454,1,0,0,0,1454,1456,
  	3,42,21,0,1455,1452,1,0,0,0,1455,1456,1,0,0,0,1456,1461,1,0,0,0,1457,
  	1459,5,169,0,0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,1460,1,0,0,0,
  	1460,1462,3,192,96,0,1461,1458,1,0,0,0,1461,1462,1,0,0,0,1462,145,1,0,
  	0,0,1463,1465,3,124,62,0,1464,1466,5,169,0,0,1465,1464,1,0,0,0,1465,1466,
  	1,0,0,0,1466,1468,1,0,0,0,1467,1463,1,0,0,0,1467,1468,1,0,0,0,1468,1469,
  	1,0,0,0,1469,1470,5,56,0,0,1470,1471,5,169,0,0,1471,1476,3,296,148,0,
  	1472,1474,5,169,0,0,1473,1472,1,0,0,0,1473,1474,1,0,0,0,1474,1475,1,0,
  	0,0,1475,1477,3,192,96,0,1476,1473,1,0,0,0,1476,1477,1,0,0,0,1477,147,
  	1,0,0,0,1478,1492,3,332,166,0,1479,1481,5,169,0,0,1480,1479,1,0,0,0,1480,
  	1481,1,0,0,0,1481,1482,1,0,0,0,1482,1484,5,9,0,0,1483,1485,5,169,0,0,
  	1484,1483,1,0,0,0,1484,1485,1,0,0,0,1485,1486,1,0,0,0,1486,1488,3,150,
  	75,0,1487,1489,5,169,0,0,1488,1487,1,0,0,0,1488,1489,1,0,0,0,1489,1490,
  	1,0,0,0,1490,1491,5,10,0,0,1491,1493,1,0,0,0,1492,1480,1,0,0,0,1492,1493,
  	1,0,0,0,1493,149,1,0,0,0,1494,1505,3,152,76,0,1495,1497,5,169,0,0,1496,
  	1495,1,0,0,0,1496,1497,1,0,0,0,1497,1498,1,0,0,0,1498,1500,5,3,0,0,1499,
  	1501,5,169,0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,1502,1,0,0,0,
  	1502,1504,3,152,76,0,1503,1496,1,0,0,0,1504,1507,1,0,0,0,1505,1503,1,
  	0,0,0,1505,1506,1,0,0,0,1506,151,1,0,0,0,1507,1505,1,0,0,0,1508,1511,
  	3,326,163,0,1509,1510,5,169,0,0,1510,1512,3,84,42,0,1511,1509,1,0,0,0,
  	1511,1512,1,0,0,0,1512,1515,1,0,0,0,1513,1514,5,169,0,0,1514,1516,3,192,
  	96,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,153,1,0,0,0,1517,1518,5,
  	113,0,0,1518,1520,5,169,0,0,1519,1517,1,0,0,0,1519,1520,1,0,0,0,1520,
  	1521,1,0,0,0,1521,1523,5,102,0,0,1522,1524,5,169,0,0,1523,1522,1,0,0,
  	0,1523,1524,1,0,0,0,1524,1525,1,0,0,0,1525,1528,3,194,97,0,1526,1527,
  	5,169,0,0,1527,1529,3,192,96,0,1528,1526,1,0,0,0,1528,1529,1,0,0,0,1529,
  	1532,1,0,0,0,1530,1531,5,169,0,0,1531,1533,3,156,78,0,1532,1530,1,0,0,
  	0,1532,1533,1,0,0,0,1533,155,1,0,0,0,1534,1535,5,90,0,0,1535,1536,5,169,
  	0,0,1536,1537,3,158,79,0,1537,157,1,0,0,0,1538,1539,6,79,-1,0,1539,1541,
  	5,2,0,0,1540,1542,5,169,0,0,1541,1540,1,0,0,0,1541,1542,1,0,0,0,1542,
  	1543,1,0,0,0,1543,1545,3,158,79,0,1544,1546,5,169,0,0,1545,1544,1,0,0,
  	0,1545,1546,1,0,0,0,1546,1547,1,0,0,0,1547,1548,5,4,0,0,1548,1551,1,0,
  	0,0,1549,1551,3,332,166,0,1550,1538,1,0,0,0,1550,1549,1,0,0,0,1551,1568,
  	1,0,0,0,1552,1553,10,4,0,0,1553,1554,5,169,0,0,1554,1555,5,97,0,0,1555,
  	1556,5,169,0,0,1556,1567,3,158,79,5,1557,1562,10,3,0,0,1558,1559,5,169,
  	0,0,1559,1560,5,106,0,0,1560,1561,5,169,0,0,1561,1563,3,332,166,0,1562,
  	1558,1,0,0,0,1563,1564,1,0,0,0,1564,1562,1,0,0,0,1564,1565,1,0,0,0,1565,
  	1567,1,0,0,0,1566,1552,1,0,0,0,1566,1557,1,0,0,0,1567,1570,1,0,0,0,1568,
  	1566,1,0,0,0,1568,1569,1,0,0,0,1569,159,1,0,0,0,1570,1568,1,0,0,0,1571,
  	1573,5,138,0,0,1572,1574,5,169,0,0,1573,1572,1,0,0,0,1573,1574,1,0,0,
  	0,1574,1575,1,0,0,0,1575,1576,3,234,117,0,1576,1577,5,169,0,0,1577,1578,
  	5,50,0,0,1578,1579,5,169,0,0,1579,1580,3,318,159,0,1580,161,1,0,0,0,1581,
  	1583,5,66,0,0,1582,1584,5,169,0,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,
  	1584,1585,1,0,0,0,1585,1586,3,194,97,0,1586,163,1,0,0,0,1587,1589,5,104,
  	0,0,1588,1590,5,169,0,0,1589,1588,1,0,0,0,1589,1590,1,0,0,0,1590,1591,
  	1,0,0,0,1591,1596,3,194,97,0,1592,1593,5,169,0,0,1593,1595,3,166,83,0,
  	1594,1592,1,0,0,0,1595,1598,1,0,0,0,1596,1594,1,0,0,0,1596,1597,1,0,0,
  	0,1597,165,1,0,0,0,1598,1596,1,0,0,0,1599,1600,5,111,0,0,1600,1601,5,
  	169,0,0,1601,1602,5,102,0,0,1602,1603,5,169,0,0,1603,1610,3,168,84,0,
  	1604,1605,5,111,0,0,1605,1606,5,169,0,0,1606,1607,5,66,0,0,1607,1608,
  	5,169,0,0,1608,1610,3,168,84,0,1609,1599,1,0,0,0,1609,1604,1,0,0,0,1610,
  	167,1,0,0,0,1611,1613,5,127,0,0,1612,1614,5,169,0,0,1613,1612,1,0,0,0,
  	1613,1614,1,0,0,0,1614,1615,1,0,0,0,1615,1626,3,170,85,0,1616,1618,5,
  	169,0,0,1617,1616,1,0,0,0,1617,1618,1,0,0,0,1618,1619,1,0,0,0,1619,1621,
  	5,3,0,0,1620,1622,5,169,0,0,1621,1620,1,0,0,0,1621,1622,1,0,0,0,1622,
  	1623,1,0,0,0,1623,1625,3,170,85,0,1624,1617,1,0,0,0,1625,1628,1,0,0,0,
  	1626,1624,1,0,0,0,1626,1627,1,0,0,0,1627,169,1,0,0,0,1628,1626,1,0,0,
  	0,1629,1631,3,324,162,0,1630,1632,5,169,0,0,1631,1630,1,0,0,0,1631,1632,
  	1,0,0,0,1632,1633,1,0,0,0,1633,1635,5,6,0,0,1634,1636,5,169,0,0,1635,
  	1634,1,0,0,0,1635,1636,1,0,0,0,1636,1637,1,0,0,0,1637,1638,3,234,117,
  	0,1638,171,1,0,0,0,1639,1640,5,74,0,0,1640,1642,5,169,0,0,1641,1639,1,
  	0,0,0,1641,1642,1,0,0,0,1642,1643,1,0,0,0,1643,1645,5,71,0,0,1644,1646,
  	5,169,0,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,1647,1,0,0,0,1647,
  	1658,3,234,117,0,1648,1650,5,169,0,0,1649,1648,1,0,0,0,1649,1650,1,0,
  	0,0,1650,1651,1,0,0,0,1651,1653,5,3,0,0,1652,1654,5,169,0,0,1653,1652,
  	1,0,0,0,1653,1654,1,0,0,0,1654,1655,1,0,0,0,1655,1657,3,234,117,0,1656,
  	1649,1,0,0,0,1657,1660,1,0,0,0,1658,1656,1,0,0,0,1658,1659,1,0,0,0,1659,
  	173,1,0,0,0,1660,1658,1,0,0,0,1661,1662,5,143,0,0,1662,1667,3,178,89,
  	0,1663,1665,5,169,0,0,1664,1663,1,0,0,0,1664,1665,1,0,0,0,1665,1666,1,
  	0,0,0,1666,1668,3,192,96,0,1667,1664,1,0,0,0,1667,1668,1,0,0,0,1668,175,
  	1,0,0,0,1669,1670,5,123,0,0,1670,1671,3,178,89,0,1671,177,1,0,0,0,1672,
  	1674,5,169,0,0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,1675,1,0,0,0,
  	1675,1677,5,75,0,0,1676,1673,1,0,0,0,1676,1677,1,0,0,0,1677,1678,1,0,
  	0,0,1678,1679,5,169,0,0,1679,1682,3,180,90,0,1680,1681,5,169,0,0,1681,
  	1683,3,184,92,0,1682,1680,1,0,0,0,1682,1683,1,0,0,0,1683,1686,1,0,0,0,
  	1684,1685,5,169,0,0,1685,1687,3,186,93,0,1686,1684,1,0,0,0,1686,1687,
  	1,0,0,0,1687,1690,1,0,0,0,1688,1689,5,169,0,0,1689,1691,3,188,94,0,1690,
  	1688,1,0,0,0,1690,1691,1,0,0,0,1691,179,1,0,0,0,1692,1703,5,149,0,0,1693,
  	1695,5,169,0,0,1694,1693,1,0,0,0,1694,1695,1,0,0,0,1695,1696,1,0,0,0,
  	1696,1698,5,3,0,0,1697,1699,5,169,0,0,1698,1697,1,0,0,0,1698,1699,1,0,
  	0,0,1699,1700,1,0,0,0,1700,1702,3,182,91,0,1701,1694,1,0,0,0,1702,1705,
  	1,0,0,0,1703,1701,1,0,0,0,1703,1704,1,0,0,0,1704,1721,1,0,0,0,1705,1703,
  	1,0,0,0,1706,1717,3,182,91,0,1707,1709,5,169,0,0,1708,1707,1,0,0,0,1708,
  	1709,1,0,0,0,1709,1710,1,0,0,0,1710,1712,5,3,0,0,1711,1713,5,169,0,0,
  	1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,1714,1,0,0,0,1714,1716,3,182,
  	91,0,1715,1708,1,0,0,0,1716,1719,1,0,0,0,1717,1715,1,0,0,0,1717,1718,
  	1,0,0,0,1718,1721,1,0,0,0,1719,1717,1,0,0,0,1720,1692,1,0,0,0,1720,1706,
  	1,0,0,0,1721,181,1,0,0,0,1722,1723,3,234,117,0,1723,1724,5,169,0,0,1724,
  	1725,5,50,0,0,1725,1726,5,169,0,0,1726,1727,3,318,159,0,1727,1730,1,0,
  	0,0,1728,1730,3,234,117,0,1729,1722,1,0,0,0,1729,1728,1,0,0,0,1730,183,
  	1,0,0,0,1731,1732,5,115,0,0,1732,1733,5,169,0,0,1733,1734,5,55,0,0,1734,
  	1735,5,169,0,0,1735,1743,3,190,95,0,1736,1738,5,3,0,0,1737,1739,5,169,
  	0,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,1740,1,0,0,0,1740,1742,3,
  	190,95,0,1741,1736,1,0,0,0,1742,1745,1,0,0,0,1743,1741,1,0,0,0,1743,1744,
  	1,0,0,0,1744,185,1,0,0,0,1745,1743,1,0,0,0,1746,1747,5,150,0,0,1747,1748,
  	5,169,0,0,1748,1749,3,234,117,0,1749,187,1,0,0,0,1750,1751,5,99,0,0,1751,
  	1752,5,169,0,0,1752,1753,3,234,117,0,1753,189,1,0,0,0,1754,1759,3,234,
  	117,0,1755,1757,5,169,0,0,1756,1755,1,0,0,0,1756,1757,1,0,0,0,1757,1758,
  	1,0,0,0,1758,1760,7,1,0,0,1759,1756,1,0,0,0,1759,1760,1,0,0,0,1760,191,
  	1,0,0,0,1761,1762,5,142,0,0,1762,1763,5,169,0,0,1763,1764,3,234,117,0,
  	1764,193,1,0,0,0,1765,1776,3,196,98,0,1766,1768,5,169,0,0,1767,1766,1,
  	0,0,0,1767,1768,1,0,0,0,1768,1769,1,0,0,0,1769,1771,5,3,0,0,1770,1772,
  	5,169,0,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,
  	1775,3,196,98,0,1774,1767,1,0,0,0,1775,1778,1,0,0,0,1776,1774,1,0,0,0,
  	1776,1777,1,0,0,0,1777,195,1,0,0,0,1778,1776,1,0,0,0,1779,1781,3,318,
  	159,0,1780,1782,5,169,0,0,1781,1780,1,0,0,0,1781,1782,1,0,0,0,1782,1783,
  	1,0,0,0,1783,1785,5,6,0,0,1784,1786,5,169,0,0,1785,1784,1,0,0,0,1785,
  	1786,1,0,0,0,1786,1787,1,0,0,0,1787,1788,3,198,99,0,1788,1791,1,0,0,0,
  	1789,1791,3,198,99,0,1790,1779,1,0,0,0,1790,1789,1,0,0,0,1791,197,1,0,
  	0,0,1792,1793,3,200,100,0,1793,199,1,0,0,0,1794,1801,3,202,101,0,1795,
  	1797,5,169,0,0,1796,1795,1,0,0,0,1796,1797,1,0,0,0,1797,1798,1,0,0,0,
  	1798,1800,3,204,102,0,1799,1796,1,0,0,0,1800,1803,1,0,0,0,1801,1799,1,
  	0,0,0,1801,1802,1,0,0,0,1802,1809,1,0,0,0,1803,1801,1,0,0,0,1804,1805,
  	5,2,0,0,1805,1806,3,200,100,0,1806,1807,5,4,0,0,1807,1809,1,0,0,0,1808,
  	1794,1,0,0,0,1808,1804,1,0,0,0,1809,201,1,0,0,0,1810,1812,5,2,0,0,1811,
  	1813,5,169,0,0,1812,1811,1,0,0,0,1812,1813,1,0,0,0,1813,1818,1,0,0,0,
  	1814,1816,3,318,159,0,1815,1817,5,169,0,0,1816,1815,1,0,0,0,1816,1817,
  	1,0,0,0,1817,1819,1,0,0,0,1818,1814,1,0,0,0,1818,1819,1,0,0,0,1819,1824,
  	1,0,0,0,1820,1822,3,214,107,0,1821,1823,5,169,0,0,1822,1821,1,0,0,0,1822,
  	1823,1,0,0,0,1823,1825,1,0,0,0,1824,1820,1,0,0,0,1824,1825,1,0,0,0,1825,
  	1830,1,0,0,0,1826,1828,3,210,105,0,1827,1829,5,169,0,0,1828,1827,1,0,
  	0,0,1828,1829,1,0,0,0,1829,1831,1,0,0,0,1830,1826,1,0,0,0,1830,1831,1,
  	0,0,0,1831,1832,1,0,0,0,1832,1833,5,4,0,0,1833,203,1,0,0,0,1834,1836,
  	3,206,103,0,1835,1837,5,169,0,0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,
  	1838,1,0,0,0,1838,1839,3,202,101,0,1839,205,1,0,0,0,1840,1842,3,338,169,
  	0,1841,1843,5,169,0,0,1842,1841,1,0,0,0,1842,1843,1,0,0,0,1843,1844,1,
  	0,0,0,1844,1846,3,342,171,0,1845,1847,5,169,0,0,1846,1845,1,0,0,0,1846,
  	1847,1,0,0,0,1847,1849,1,0,0,0,1848,1850,3,208,104,0,1849,1848,1,0,0,
  	0,1849,1850,1,0,0,0,1850,1852,1,0,0,0,1851,1853,5,169,0,0,1852,1851,1,
  	0,0,0,1852,1853,1,0,0,0,1853,1854,1,0,0,0,1854,1855,3,342,171,0,1855,
  	1885,1,0,0,0,1856,1858,3,342,171,0,1857,1859,5,169,0,0,1858,1857,1,0,
  	0,0,1858,1859,1,0,0,0,1859,1861,1,0,0,0,1860,1862,3,208,104,0,1861,1860,
  	1,0,0,0,1861,1862,1,0,0,0,1862,1864,1,0,0,0,1863,1865,5,169,0,0,1864,
  	1863,1,0,0,0,1864,1865,1,0,0,0,1865,1866,1,0,0,0,1866,1868,3,342,171,
  	0,1867,1869,5,169,0,0,1868,1867,1,0,0,0,1868,1869,1,0,0,0,1869,1870,1,
  	0,0,0,1870,1871,3,340,170,0,1871,1885,1,0,0,0,1872,1874,3,342,171,0,1873,
  	1875,5,169,0,0,1874,1873,1,0,0,0,1874,1875,1,0,0,0,1875,1877,1,0,0,0,
  	1876,1878,3,208,104,0,1877,1876,1,0,0,0,1877,1878,1,0,0,0,1878,1880,1,
  	0,0,0,1879,1881,5,169,0,0,1880,1879,1,0,0,0,1880,1881,1,0,0,0,1881,1882,
  	1,0,0,0,1882,1883,3,342,171,0,1883,1885,1,0,0,0,1884,1840,1,0,0,0,1884,
  	1856,1,0,0,0,1884,1872,1,0,0,0,1885,207,1,0,0,0,1886,1888,5,7,0,0,1887,
  	1889,5,169,0,0,1888,1887,1,0,0,0,1888,1889,1,0,0,0,1889,1894,1,0,0,0,
  	1890,1892,3,318,159,0,1891,1893,5,169,0,0,1892,1891,1,0,0,0,1892,1893,
  	1,0,0,0,1893,1895,1,0,0,0,1894,1890,1,0,0,0,1894,1895,1,0,0,0,1895,1900,
  	1,0,0,0,1896,1898,3,212,106,0,1897,1899,5,169,0,0,1898,1897,1,0,0,0,1898,
  	1899,1,0,0,0,1899,1901,1,0,0,0,1900,1896,1,0,0,0,1900,1901,1,0,0,0,1901,
  	1906,1,0,0,0,1902,1904,3,218,109,0,1903,1905,5,169,0,0,1904,1903,1,0,
  	0,0,1904,1905,1,0,0,0,1905,1907,1,0,0,0,1906,1902,1,0,0,0,1906,1907,1,
  	0,0,0,1907,1912,1,0,0,0,1908,1910,3,210,105,0,1909,1911,5,169,0,0,1910,
  	1909,1,0,0,0,1910,1911,1,0,0,0,1911,1913,1,0,0,0,1912,1908,1,0,0,0,1912,
  	1913,1,0,0,0,1913,1914,1,0,0,0,1914,1915,5,8,0,0,1915,209,1,0,0,0,1916,
  	1918,5,9,0,0,1917,1919,5,169,0,0,1918,1917,1,0,0,0,1918,1919,1,0,0,0,
  	1919,1953,1,0,0,0,1920,1922,3,326,163,0,1921,1923,5,169,0,0,1922,1921,
  	1,0,0,0,1922,1923,1,0,0,0,1923,1924,1,0,0,0,1924,1926,5,154,0,0,1925,
  	1927,5,169,0,0,1926,1925,1,0,0,0,1926,1927,1,0,0,0,1927,1928,1,0,0,0,
  	1928,1930,3,234,117,0,1929,1931,5,169,0,0,1930,1929,1,0,0,0,1930,1931,
  	1,0,0,0,1931,1950,1,0,0,0,1932,1934,5,3,0,0,1933,1935,5,169,0,0,1934,
  	1933,1,0,0,0,1934,1935,1,0,0,0,1935,1936,1,0,0,0,1936,1938,3,326,163,
  	0,1937,1939,5,169,0,0,1938,1937,1,0,0,0,1938,1939,1,0,0,0,1939,1940,1,
  	0,0,0,1940,1942,5,154,0,0,1941,1943,5,169,0,0,1942,1941,1,0,0,0,1942,
  	1943,1,0,0,0,1943,1944,1,0,0,0,1944,1946,3,234,117,0,1945,1947,5,169,
  	0,0,1946,1945,1,0,0,0,1946,1947,1,0,0,0,1947,1949,1,0,0,0,1948,1932,1,
  	0,0,0,1949,1952,1,0,0,0,1950,1948,1,0,0,0,1950,1951,1,0,0,0,1951,1954,
  	1,0,0,0,1952,1950,1,0,0,0,1953,1920,1,0,0,0,1953,1954,1,0,0,0,1954,1955,
  	1,0,0,0,1955,1956,5,10,0,0,1956,211,1,0,0,0,1957,1959,5,154,0,0,1958,
  	1960,5,169,0,0,1959,1958,1,0,0,0,1959,1960,1,0,0,0,1960,1961,1,0,0,0,
  	1961,1975,3,232,116,0,1962,1964,5,169,0,0,1963,1962,1,0,0,0,1963,1964,
  	1,0,0,0,1964,1965,1,0,0,0,1965,1967,5,11,0,0,1966,1968,5,154,0,0,1967,
  	1966,1,0,0,0,1967,1968,1,0,0,0,1968,1970,1,0,0,0,1969,1971,5,169,0,0,
  	1970,1969,1,0,0,0,1970,1971,1,0,0,0,1971,1972,1,0,0,0,1972,1974,3,232,
  	116,0,1973,1963,1,0,0,0,1974,1977,1,0,0,0,1975,1973,1,0,0,0,1975,1976,
  	1,0,0,0,1976,213,1,0,0,0,1977,1975,1,0,0,0,1978,1985,3,216,108,0,1979,
  	1981,5,169,0,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,0,0,
  	1982,1984,3,216,108,0,1983,1980,1,0,0,0,1984,1987,1,0,0,0,1985,1983,1,
  	0,0,0,1985,1986,1,0,0,0,1986,215,1,0,0,0,1987,1985,1,0,0,0,1988,1990,
  	5,154,0,0,1989,1991,5,169,0,0,1990,1989,1,0,0,0,1990,1991,1,0,0,0,1991,
  	1992,1,0,0,0,1992,1993,3,230,115,0,1993,217,1,0,0,0,1994,1996,5,149,0,
  	0,1995,1997,5,169,0,0,1996,1995,1,0,0,0,1996,1997,1,0,0,0,1997,2002,1,
  	0,0,0,1998,2003,5,128,0,0,1999,2000,5,47,0,0,2000,2001,5,169,0,0,2001,
  	2003,5,128,0,0,2002,1998,1,0,0,0,2002,1999,1,0,0,0,2002,2003,1,0,0,0,
  	2003,2005,1,0,0,0,2004,2006,5,169,0,0,2005,2004,1,0,0,0,2005,2006,1,0,
  	0,0,2006,2021,1,0,0,0,2007,2009,3,226,113,0,2008,2007,1,0,0,0,2008,2009,
  	1,0,0,0,2009,2011,1,0,0,0,2010,2012,5,169,0,0,2011,2010,1,0,0,0,2011,
  	2012,1,0,0,0,2012,2013,1,0,0,0,2013,2015,5,12,0,0,2014,2016,5,169,0,0,
  	2015,2014,1,0,0,0,2015,2016,1,0,0,0,2016,2018,1,0,0,0,2017,2019,3,228,
  	114,0,2018,2017,1,0,0,0,2018,2019,1,0,0,0,2019,2022,1,0,0,0,2020,2022,
  	3,328,164,0,2021,2008,1,0,0,0,2021,2020,1,0,0,0,2021,2022,1,0,0,0,2022,
  	2027,1,0,0,0,2023,2025,5,169,0,0,2024,2023,1,0,0,0,2024,2025,1,0,0,0,
  	2025,2026,1,0,0,0,2026,2028,3,220,110,0,2027,2024,1,0,0,0,2027,2028,1,
  	0,0,0,2028,219,1,0,0,0,2029,2031,5,2,0,0,2030,2032,5,169,0,0,2031,2030,
  	1,0,0,0,2031,2032,1,0,0,0,2032,2033,1,0,0,0,2033,2035,3,318,159,0,2034,
  	2036,5,169,0,0,2035,2034,1,0,0,0,2035,2036,1,0,0,0,2036,2037,1,0,0,0,
  	2037,2039,5,3,0,0,2038,2040,5,169,0,0,2039,2038,1,0,0,0,2039,2040,1,0,
  	0,0,2040,2041,1,0,0,0,2041,2053,3,318,159,0,2042,2044,5,169,0,0,2043,
  	2042,1,0,0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,2047,5,11,0,0,2046,
  	2048,5,169,0,0,2047,2046,1,0,0,0,2047,2048,1,0,0,0,2048,2049,1,0,0,0,
  	2049,2051,3,192,96,0,2050,2052,5,169,0,0,2051,2050,1,0,0,0,2051,2052,
  	1,0,0,0,2052,2054,1,0,0,0,2053,2043,1,0,0,0,2053,2054,1,0,0,0,2054,2074,
  	1,0,0,0,2055,2057,5,169,0,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,
  	2058,1,0,0,0,2058,2060,5,11,0,0,2059,2061,5,169,0,0,2060,2059,1,0,0,0,
  	2060,2061,1,0,0,0,2061,2062,1,0,0,0,2062,2064,3,224,112,0,2063,2065,5,
  	169,0,0,2064,2063,1,0,0,0,2064,2065,1,0,0,0,2065,2066,1,0,0,0,2066,2068,
  	5,3,0,0,2067,2069,5,169,0,0,2068,2067,1,0,0,0,2068,2069,1,0,0,0,2069,
  	2070,1,0,0,0,2070,2072,3,222,111,0,2071,2073,5,169,0,0,2072,2071,1,0,
  	0,0,2072,2073,1,0,0,0,2073,2075,1,0,0,0,2074,2056,1,0,0,0,2074,2075,1,
  	0,0,0,2075,2076,1,0,0,0,2076,2077,5,4,0,0,2077,221,1,0,0,0,2078,2080,
  	5,9,0,0,2079,2081,5,169,0,0,2080,2079,1,0,0,0,2080,2081,1,0,0,0,2081,
  	2083,1,0,0,0,2082,2084,3,180,90,0,2083,2082,1,0,0,0,2083,2084,1,0,0,0,
  	2084,2086,1,0,0,0,2085,2087,5,169,0,0,2086,2085,1,0,0,0,2086,2087,1,0,
  	0,0,2087,2088,1,0,0,0,2088,2089,5,10,0,0,2089,223,1,0,0,0,2090,2092,5,
  	9,0,0,2091,2093,5,169,0,0,2092,2091,1,0,0,0,2092,2093,1,0,0,0,2093,2095,
  	1,0,0,0,2094,2096,3,180,90,0,2095,2094,1,0,0,0,2095,2096,1,0,0,0,2096,
  	2098,1,0,0,0,2097,2099,5,169,0,0,2098,2097,1,0,0,0,2098,2099,1,0,0,0,
  	2099,2100,1,0,0,0,2100,2101,5,10,0,0,2101,225,1,0,0,0,2102,2103,5,157,
  	0,0,2103,227,1,0,0,0,2104,2105,5,157,0,0,2105,229,1,0,0,0,2106,2107,3,
  	332,166,0,2107,231,1,0,0,0,2108,2109,3,332,166,0,2109,233,1,0,0,0,2110,
  	2111,3,236,118,0,2111,235,1,0,0,0,2112,2119,3,238,119,0,2113,2114,5,169,
  	0,0,2114,2115,5,114,0,0,2115,2116,5,169,0,0,2116,2118,3,238,119,0,2117,
  	2113,1,0,0,0,2118,2121,1,0,0,0,2119,2117,1,0,0,0,2119,2120,1,0,0,0,2120,
  	237,1,0,0,0,2121,2119,1,0,0,0,2122,2129,3,240,120,0,2123,2124,5,169,0,
  	0,2124,2125,5,145,0,0,2125,2126,5,169,0,0,2126,2128,3,240,120,0,2127,
  	2123,1,0,0,0,2128,2131,1,0,0,0,2129,2127,1,0,0,0,2129,2130,1,0,0,0,2130,
  	239,1,0,0,0,2131,2129,1,0,0,0,2132,2139,3,242,121,0,2133,2134,5,169,0,
  	0,2134,2135,5,49,0,0,2135,2136,5,169,0,0,2136,2138,3,242,121,0,2137,2133,
  	1,0,0,0,2138,2141,1,0,0,0,2139,2137,1,0,0,0,2139,2140,1,0,0,0,2140,241,
  	1,0,0,0,2141,2139,1,0,0,0,2142,2144,5,109,0,0,2143,2145,5,169,0,0,2144,
  	2143,1,0,0,0,2144,2145,1,0,0,0,2145,2147,1,0,0,0,2146,2142,1,0,0,0,2147,
  	2150,1,0,0,0,2148,2146,1,0,0,0,2148,2149,1,0,0,0,2149,2151,1,0,0,0,2150,
  	2148,1,0,0,0,2151,2152,3,244,122,0,2152,243,1,0,0,0,2153,2163,3,248,124,
  	0,2154,2156,5,169,0,0,2155,2154,1,0,0,0,2155,2156,1,0,0,0,2156,2157,1,
  	0,0,0,2157,2159,3,246,123,0,2158,2160,5,169,0,0,2159,2158,1,0,0,0,2159,
  	2160,1,0,0,0,2160,2161,1,0,0,0,2161,2162,3,248,124,0,2162,2164,1,0,0,
  	0,2163,2155,1,0,0,0,2163,2164,1,0,0,0,2164,2202,1,0,0,0,2165,2167,3,248,
  	124,0,2166,2168,5,169,0,0,2167,2166,1,0,0,0,2167,2168,1,0,0,0,2168,2169,
  	1,0,0,0,2169,2171,5,151,0,0,2170,2172,5,169,0,0,2171,2170,1,0,0,0,2171,
  	2172,1,0,0,0,2172,2173,1,0,0,0,2173,2174,3,248,124,0,2174,2175,1,0,0,
  	0,2175,2176,6,122,-1,0,2176,2202,1,0,0,0,2177,2179,3,248,124,0,2178,2180,
  	5,169,0,0,2179,2178,1,0,0,0,2179,2180,1,0,0,0,2180,2181,1,0,0,0,2181,
  	2183,3,246,123,0,2182,2184,5,169,0,0,2183,2182,1,0,0,0,2183,2184,1,0,
  	0,0,2184,2185,1,0,0,0,2185,2195,3,248,124,0,2186,2188,5,169,0,0,2187,
  	2186,1,0,0,0,2187,2188,1,0,0,0,2188,2189,1,0,0,0,2189,2191,3,246,123,
  	0,2190,2192,5,169,0,0,2191,2190,1,0,0,0,2191,2192,1,0,0,0,2192,2193,1,
  	0,0,0,2193,2194,3,248,124,0,2194,2196,1,0,0,0,2195,2187,1,0,0,0,2196,
  	2197,1,0,0,0,2197,2195,1,0,0,0,2197,2198,1,0,0,0,2198,2199,1,0,0,0,2199,
  	2200,6,122,-1,0,2200,2202,1,0,0,0,2201,2153,1,0,0,0,2201,2165,1,0,0,0,
  	2201,2177,1,0,0,0,2202,245,1,0,0,0,2203,2204,7,2,0,0,2204,247,1,0,0,0,
  	2205,2216,3,250,125,0,2206,2208,5,169,0,0,2207,2206,1,0,0,0,2207,2208,
  	1,0,0,0,2208,2209,1,0,0,0,2209,2211,5,11,0,0,2210,2212,5,169,0,0,2211,
  	2210,1,0,0,0,2211,2212,1,0,0,0,2212,2213,1,0,0,0,2213,2215,3,250,125,
  	0,2214,2207,1,0,0,0,2215,2218,1,0,0,0,2216,2214,1,0,0,0,2216,2217,1,0,
  	0,0,2217,249,1,0,0,0,2218,2216,1,0,0,0,2219,2230,3,252,126,0,2220,2222,
  	5,169,0,0,2221,2220,1,0,0,0,2221,2222,1,0,0,0,2222,2223,1,0,0,0,2223,
  	2225,5,18,0,0,2224,2226,5,169,0,0,2225,2224,1,0,0,0,2225,2226,1,0,0,0,
  	2226,2227,1,0,0,0,2227,2229,3,252,126,0,2228,2221,1,0,0,0,2229,2232,1,
  	0,0,0,2230,2228,1,0,0,0,2230,2231,1,0,0,0,2231,251,1,0,0,0,2232,2230,
  	1,0,0,0,2233,2245,3,256,128,0,2234,2236,5,169,0,0,2235,2234,1,0,0,0,2235,
  	2236,1,0,0,0,2236,2237,1,0,0,0,2237,2239,3,254,127,0,2238,2240,5,169,
  	0,0,2239,2238,1,0,0,0,2239,2240,1,0,0,0,2240,2241,1,0,0,0,2241,2242,3,
  	256,128,0,2242,2244,1,0,0,0,2243,2235,1,0,0,0,2244,2247,1,0,0,0,2245,
  	2243,1,0,0,0,2245,2246,1,0,0,0,2246,253,1,0,0,0,2247,2245,1,0,0,0,2248,
  	2249,7,3,0,0,2249,255,1,0,0,0,2250,2262,3,260,130,0,2251,2253,5,169,0,
  	0,2252,2251,1,0,0,0,2252,2253,1,0,0,0,2253,2254,1,0,0,0,2254,2256,3,258,
  	129,0,2255,2257,5,169,0,0,2256,2255,1,0,0,0,2256,2257,1,0,0,0,2257,2258,
  	1,0,0,0,2258,2259,3,260,130,0,2259,2261,1,0,0,0,2260,2252,1,0,0,0,2261,
  	2264,1,0,0,0,2262,2260,1,0,0,0,2262,2263,1,0,0,0,2263,257,1,0,0,0,2264,
  	2262,1,0,0,0,2265,2266,7,4,0,0,2266,259,1,0,0,0,2267,2279,3,264,132,0,
  	2268,2270,5,169,0,0,2269,2268,1,0,0,0,2269,2270,1,0,0,0,2270,2271,1,0,
  	0,0,2271,2273,3,262,131,0,2272,2274,5,169,0,0,2273,2272,1,0,0,0,2273,
  	2274,1,0,0,0,2274,2275,1,0,0,0,2275,2276,3,264,132,0,2276,2278,1,0,0,
  	0,2277,2269,1,0,0,0,2278,2281,1,0,0,0,2279,2277,1,0,0,0,2279,2280,1,0,
  	0,0,2280,261,1,0,0,0,2281,2279,1,0,0,0,2282,2283,7,5,0,0,2283,263,1,0,
  	0,0,2284,2295,3,266,133,0,2285,2287,5,169,0,0,2286,2285,1,0,0,0,2286,
  	2287,1,0,0,0,2287,2288,1,0,0,0,2288,2290,5,24,0,0,2289,2291,5,169,0,0,
  	2290,2289,1,0,0,0,2290,2291,1,0,0,0,2291,2292,1,0,0,0,2292,2294,3,266,
  	133,0,2293,2286,1,0,0,0,2294,2297,1,0,0,0,2295,2293,1,0,0,0,2295,2296,
  	1,0,0,0,2296,265,1,0,0,0,2297,2295,1,0,0,0,2298,2300,5,152,0,0,2299,2301,
  	5,169,0,0,2300,2299,1,0,0,0,2300,2301,1,0,0,0,2301,2303,1,0,0,0,2302,
  	2298,1,0,0,0,2303,2306,1,0,0,0,2304,2302,1,0,0,0,2304,2305,1,0,0,0,2305,
  	2307,1,0,0,0,2306,2304,1,0,0,0,2307,2312,3,268,134,0,2308,2310,5,169,
  	0,0,2309,2308,1,0,0,0,2309,2310,1,0,0,0,2310,2311,1,0,0,0,2311,2313,5,
  	153,0,0,2312,2309,1,0,0,0,2312,2313,1,0,0,0,2313,267,1,0,0,0,2314,2322,
  	3,278,139,0,2315,2323,3,272,136,0,2316,2318,3,270,135,0,2317,2316,1,0,
  	0,0,2318,2319,1,0,0,0,2319,2317,1,0,0,0,2319,2320,1,0,0,0,2320,2323,1,
  	0,0,0,2321,2323,3,276,138,0,2322,2315,1,0,0,0,2322,2317,1,0,0,0,2322,
  	2321,1,0,0,0,2322,2323,1,0,0,0,2323,269,1,0,0,0,2324,2325,5,169,0,0,2325,
  	2327,5,93,0,0,2326,2328,5,169,0,0,2327,2326,1,0,0,0,2327,2328,1,0,0,0,
  	2328,2329,1,0,0,0,2329,2344,3,278,139,0,2330,2331,5,7,0,0,2331,2332,3,
  	234,117,0,2332,2333,5,8,0,0,2333,2344,1,0,0,0,2334,2336,5,7,0,0,2335,
  	2337,3,234,117,0,2336,2335,1,0,0,0,2336,2337,1,0,0,0,2337,2338,1,0,0,
  	0,2338,2340,5,154,0,0,2339,2341,3,234,117,0,2340,2339,1,0,0,0,2340,2341,
  	1,0,0,0,2341,2342,1,0,0,0,2342,2344,5,8,0,0,2343,2324,1,0,0,0,2343,2330,
  	1,0,0,0,2343,2334,1,0,0,0,2344,271,1,0,0,0,2345,2357,3,274,137,0,2346,
  	2347,5,169,0,0,2347,2348,5,130,0,0,2348,2349,5,169,0,0,2349,2357,5,143,
  	0,0,2350,2351,5,169,0,0,2351,2352,5,79,0,0,2352,2353,5,169,0,0,2353,2357,
  	5,143,0,0,2354,2355,5,169,0,0,2355,2357,5,63,0,0,2356,2345,1,0,0,0,2356,
  	2346,1,0,0,0,2356,2350,1,0,0,0,2356,2354,1,0,0,0,2357,2359,1,0,0,0,2358,
  	2360,5,169,0,0,2359,2358,1,0,0,0,2359,2360,1,0,0,0,2360,2361,1,0,0,0,
  	2361,2362,3,278,139,0,2362,273,1,0,0,0,2363,2365,5,169,0,0,2364,2363,
  	1,0,0,0,2364,2365,1,0,0,0,2365,2366,1,0,0,0,2366,2367,5,25,0,0,2367,275,
  	1,0,0,0,2368,2369,5,169,0,0,2369,2370,5,96,0,0,2370,2371,5,169,0,0,2371,
  	2379,5,110,0,0,2372,2373,5,169,0,0,2373,2374,5,96,0,0,2374,2375,5,169,
  	0,0,2375,2376,5,109,0,0,2376,2377,5,169,0,0,2377,2379,5,110,0,0,2378,
  	2368,1,0,0,0,2378,2372,1,0,0,0,2379,277,1,0,0,0,2380,2387,3,280,140,0,
  	2381,2383,5,169,0,0,2382,2381,1,0,0,0,2382,2383,1,0,0,0,2383,2384,1,0,
  	0,0,2384,2386,3,312,156,0,2385,2382,1,0,0,0,2386,2389,1,0,0,0,2387,2385,
  	1,0,0,0,2387,2388,1,0,0,0,2388,279,1,0,0,0,2389,2387,1,0,0,0,2390,2400,
  	3,282,141,0,2391,2400,3,322,161,0,2392,2400,3,314,157,0,2393,2400,3,294,
  	147,0,2394,2400,3,296,148,0,2395,2400,3,306,153,0,2396,2400,3,308,154,
  	0,2397,2400,3,310,155,0,2398,2400,3,318,159,0,2399,2390,1,0,0,0,2399,
  	2391,1,0,0,0,2399,2392,1,0,0,0,2399,2393,1,0,0,0,2399,2394,1,0,0,0,2399,
  	2395,1,0,0,0,2399,2396,1,0,0,0,2399,2397,1,0,0,0,2399,2398,1,0,0,0,2400,
  	281,1,0,0,0,2401,2408,3,320,160,0,2402,2408,5,155,0,0,2403,2408,3,284,
  	142,0,2404,2408,5,110,0,0,2405,2408,3,286,143,0,2406,2408,3,290,145,0,
  	2407,2401,1,0,0,0,2407,2402,1,0,0,0,2407,2403,1,0,0,0,2407,2404,1,0,0,
  	0,2407,2405,1,0,0,0,2407,2406,1,0,0,0,2408,283,1,0,0,0,2409,2410,7,6,
  	0,0,2410,285,1,0,0,0,2411,2413,5,7,0,0,2412,2414,5,169,0,0,2413,2412,
  	1,0,0,0,2413,2414,1,0,0,0,2414,2428,1,0,0,0,2415,2417,3,234,117,0,2416,
  	2418,5,169,0,0,2417,2416,1,0,0,0,2417,2418,1,0,0,0,2418,2425,1,0,0,0,
  	2419,2421,3,288,144,0,2420,2422,5,169,0,0,2421,2420,1,0,0,0,2421,2422,
  	1,0,0,0,2422,2424,1,0,0,0,2423,2419,1,0,0,0,2424,2427,1,0,0,0,2425,2423,
  	1,0,0,0,2425,2426,1,0,0,0,2426,2429,1,0,0,0,2427,2425,1,0,0,0,2428,2415,
  	1,0,0,0,2428,2429,1,0,0,0,2429,2430,1,0,0,0,2430,2431,5,8,0,0,2431,287,
  	1,0,0,0,2432,2434,5,3,0,0,2433,2435,5,169,0,0,2434,2433,1,0,0,0,2434,
  	2435,1,0,0,0,2435,2437,1,0,0,0,2436,2438,3,234,117,0,2437,2436,1,0,0,
  	0,2437,2438,1,0,0,0,2438,289,1,0,0,0,2439,2441,5,9,0,0,2440,2442,5,169,
  	0,0,2441,2440,1,0,0,0,2441,2442,1,0,0,0,2442,2443,1,0,0,0,2443,2445,3,
  	292,146,0,2444,2446,5,169,0,0,2445,2444,1,0,0,0,2445,2446,1,0,0,0,2446,
  	2457,1,0,0,0,2447,2449,5,3,0,0,2448,2450,5,169,0,0,2449,2448,1,0,0,0,
  	2449,2450,1,0,0,0,2450,2451,1,0,0,0,2451,2453,3,292,146,0,2452,2454,5,
  	169,0,0,2453,2452,1,0,0,0,2453,2454,1,0,0,0,2454,2456,1,0,0,0,2455,2447,
  	1,0,0,0,2456,2459,1,0,0,0,2457,2455,1,0,0,0,2457,2458,1,0,0,0,2458,2460,
  	1,0,0,0,2459,2457,1,0,0,0,2460,2461,5,10,0,0,2461,291,1,0,0,0,2462,2465,
  	3,334,167,0,2463,2465,5,155,0,0,2464,2462,1,0,0,0,2464,2463,1,0,0,0,2465,
  	2467,1,0,0,0,2466,2468,5,169,0,0,2467,2466,1,0,0,0,2467,2468,1,0,0,0,
  	2468,2469,1,0,0,0,2469,2471,5,154,0,0,2470,2472,5,169,0,0,2471,2470,1,
  	0,0,0,2471,2472,1,0,0,0,2472,2473,1,0,0,0,2473,2474,3,234,117,0,2474,
  	293,1,0,0,0,2475,2477,5,2,0,0,2476,2478,5,169,0,0,2477,2476,1,0,0,0,2477,
  	2478,1,0,0,0,2478,2479,1,0,0,0,2479,2481,3,234,117,0,2480,2482,5,169,
  	0,0,2481,2480,1,0,0,0,2481,2482,1,0,0,0,2482,2483,1,0,0,0,2483,2484,5,
  	4,0,0,2484,295,1,0,0,0,2485,2487,5,65,0,0,2486,2488,5,169,0,0,2487,2486,
  	1,0,0,0,2487,2488,1,0,0,0,2488,2489,1,0,0,0,2489,2491,5,2,0,0,2490,2492,
  	5,169,0,0,2491,2490,1,0,0,0,2491,2492,1,0,0,0,2492,2493,1,0,0,0,2493,
  	2495,5,149,0,0,2494,2496,5,169,0,0,2495,2494,1,0,0,0,2495,2496,1,0,0,
  	0,2496,2497,1,0,0,0,2497,2563,5,4,0,0,2498,2500,5,58,0,0,2499,2501,5,
  	169,0,0,2500,2499,1,0,0,0,2500,2501,1,0,0,0,2501,2502,1,0,0,0,2502,2504,
  	5,2,0,0,2503,2505,5,169,0,0,2504,2503,1,0,0,0,2504,2505,1,0,0,0,2505,
  	2506,1,0,0,0,2506,2508,3,300,150,0,2507,2509,5,169,0,0,2508,2507,1,0,
  	0,0,2508,2509,1,0,0,0,2509,2520,1,0,0,0,2510,2512,5,50,0,0,2511,2513,
  	5,169,0,0,2512,2511,1,0,0,0,2512,2513,1,0,0,0,2513,2514,1,0,0,0,2514,
  	2521,3,102,51,0,2515,2517,5,3,0,0,2516,2518,5,169,0,0,2517,2516,1,0,0,
  	0,2517,2518,1,0,0,0,2518,2519,1,0,0,0,2519,2521,3,300,150,0,2520,2510,
  	1,0,0,0,2520,2515,1,0,0,0,2521,2523,1,0,0,0,2522,2524,5,169,0,0,2523,
  	2522,1,0,0,0,2523,2524,1,0,0,0,2524,2525,1,0,0,0,2525,2526,5,4,0,0,2526,
  	2563,1,0,0,0,2527,2529,3,298,149,0,2528,2530,5,169,0,0,2529,2528,1,0,
  	0,0,2529,2530,1,0,0,0,2530,2531,1,0,0,0,2531,2533,5,2,0,0,2532,2534,5,
  	169,0,0,2533,2532,1,0,0,0,2533,2534,1,0,0,0,2534,2539,1,0,0,0,2535,2537,
  	5,75,0,0,2536,2538,5,169,0,0,2537,2536,1,0,0,0,2537,2538,1,0,0,0,2538,
  	2540,1,0,0,0,2539,2535,1,0,0,0,2539,2540,1,0,0,0,2540,2558,1,0,0,0,2541,
  	2543,3,300,150,0,2542,2544,5,169,0,0,2543,2542,1,0,0,0,2543,2544,1,0,
  	0,0,2544,2555,1,0,0,0,2545,2547,5,3,0,0,2546,2548,5,169,0,0,2547,2546,
  	1,0,0,0,2547,2548,1,0,0,0,2548,2549,1,0,0,0,2549,2551,3,300,150,0,2550,
  	2552,5,169,0,0,2551,2550,1,0,0,0,2551,2552,1,0,0,0,2552,2554,1,0,0,0,
  	2553,2545,1,0,0,0,2554,2557,1,0,0,0,2555,2553,1,0,0,0,2555,2556,1,0,0,
  	0,2556,2559,1,0,0,0,2557,2555,1,0,0,0,2558,2541,1,0,0,0,2558,2559,1,0,
  	0,0,2559,2560,1,0,0,0,2560,2561,5,4,0,0,2561,2563,1,0,0,0,2562,2485,1,
  	0,0,0,2562,2498,1,0,0,0,2562,2527,1,0,0,0,2563,297,1,0,0,0,2564,2565,
  	3,334,167,0,2565,299,1,0,0,0,2566,2568,3,334,167,0,2567,2569,5,169,0,
  	0,2568,2567,1,0,0,0,2568,2569,1,0,0,0,2569,2570,1,0,0,0,2570,2571,5,154,
  	0,0,2571,2573,5,6,0,0,2572,2574,5,169,0,0,2573,2572,1,0,0,0,2573,2574,
  	1,0,0,0,2574,2576,1,0,0,0,2575,2566,1,0,0,0,2575,2576,1,0,0,0,2576,2577,
  	1,0,0,0,2577,2580,3,234,117,0,2578,2580,3,302,151,0,2579,2575,1,0,0,0,
  	2579,2578,1,0,0,0,2580,301,1,0,0,0,2581,2583,3,304,152,0,2582,2584,5,
  	169,0,0,2583,2582,1,0,0,0,2583,2584,1,0,0,0,2584,2585,1,0,0,0,2585,2586,
  	5,152,0,0,2586,2588,5,16,0,0,2587,2589,5,169,0,0,2588,2587,1,0,0,0,2588,
  	2589,1,0,0,0,2589,2590,1,0,0,0,2590,2592,3,234,117,0,2591,2593,5,169,
  	0,0,2592,2591,1,0,0,0,2592,2593,1,0,0,0,2593,303,1,0,0,0,2594,2619,3,
  	334,167,0,2595,2597,5,2,0,0,2596,2598,5,169,0,0,2597,2596,1,0,0,0,2597,
  	2598,1,0,0,0,2598,2599,1,0,0,0,2599,2601,3,334,167,0,2600,2602,5,169,
  	0,0,2601,2600,1,0,0,0,2601,2602,1,0,0,0,2602,2613,1,0,0,0,2603,2605,5,
  	3,0,0,2604,2606,5,169,0,0,2605,2604,1,0,0,0,2605,2606,1,0,0,0,2606,2607,
  	1,0,0,0,2607,2609,3,334,167,0,2608,2610,5,169,0,0,2609,2608,1,0,0,0,2609,
  	2610,1,0,0,0,2610,2612,1,0,0,0,2611,2603,1,0,0,0,2612,2615,1,0,0,0,2613,
  	2611,1,0,0,0,2613,2614,1,0,0,0,2614,2616,1,0,0,0,2615,2613,1,0,0,0,2616,
  	2617,5,4,0,0,2617,2619,1,0,0,0,2618,2594,1,0,0,0,2618,2595,1,0,0,0,2619,
  	305,1,0,0,0,2620,2625,3,202,101,0,2621,2623,5,169,0,0,2622,2621,1,0,0,
  	0,2622,2623,1,0,0,0,2623,2624,1,0,0,0,2624,2626,3,204,102,0,2625,2622,
  	1,0,0,0,2626,2627,1,0,0,0,2627,2625,1,0,0,0,2627,2628,1,0,0,0,2628,307,
  	1,0,0,0,2629,2631,5,80,0,0,2630,2632,5,169,0,0,2631,2630,1,0,0,0,2631,
  	2632,1,0,0,0,2632,2633,1,0,0,0,2633,2635,5,9,0,0,2634,2636,5,169,0,0,
  	2635,2634,1,0,0,0,2635,2636,1,0,0,0,2636,2637,1,0,0,0,2637,2639,5,102,
  	0,0,2638,2640,5,169,0,0,2639,2638,1,0,0,0,2639,2640,1,0,0,0,2640,2641,
  	1,0,0,0,2641,2646,3,194,97,0,2642,2644,5,169,0,0,2643,2642,1,0,0,0,2643,
  	2644,1,0,0,0,2644,2645,1,0,0,0,2645,2647,3,192,96,0,2646,2643,1,0,0,0,
  	2646,2647,1,0,0,0,2647,2649,1,0,0,0,2648,2650,5,169,0,0,2649,2648,1,0,
  	0,0,2649,2650,1,0,0,0,2650,2651,1,0,0,0,2651,2652,5,10,0,0,2652,309,1,
  	0,0,0,2653,2655,5,65,0,0,2654,2656,5,169,0,0,2655,2654,1,0,0,0,2655,2656,
  	1,0,0,0,2656,2657,1,0,0,0,2657,2659,5,9,0,0,2658,2660,5,169,0,0,2659,
  	2658,1,0,0,0,2659,2660,1,0,0,0,2660,2661,1,0,0,0,2661,2663,5,102,0,0,
  	2662,2664,5,169,0,0,2663,2662,1,0,0,0,2663,2664,1,0,0,0,2664,2665,1,0,
  	0,0,2665,2670,3,194,97,0,2666,2668,5,169,0,0,2667,2666,1,0,0,0,2667,2668,
  	1,0,0,0,2668,2669,1,0,0,0,2669,2671,3,192,96,0,2670,2667,1,0,0,0,2670,
  	2671,1,0,0,0,2671,2673,1,0,0,0,2672,2674,5,169,0,0,2673,2672,1,0,0,0,
  	2673,2674,1,0,0,0,2674,2675,1,0,0,0,2675,2676,5,10,0,0,2676,311,1,0,0,
  	0,2677,2679,5,5,0,0,2678,2680,5,169,0,0,2679,2678,1,0,0,0,2679,2680,1,
  	0,0,0,2680,2683,1,0,0,0,2681,2684,3,326,163,0,2682,2684,5,149,0,0,2683,
  	2681,1,0,0,0,2683,2682,1,0,0,0,2684,313,1,0,0,0,2685,2690,5,57,0,0,2686,
  	2688,5,169,0,0,2687,2686,1,0,0,0,2687,2688,1,0,0,0,2688,2689,1,0,0,0,
  	2689,2691,3,316,158,0,2690,2687,1,0,0,0,2691,2692,1,0,0,0,2692,2690,1,
  	0,0,0,2692,2693,1,0,0,0,2693,2708,1,0,0,0,2694,2696,5,57,0,0,2695,2697,
  	5,169,0,0,2696,2695,1,0,0,0,2696,2697,1,0,0,0,2697,2698,1,0,0,0,2698,
  	2703,3,234,117,0,2699,2701,5,169,0,0,2700,2699,1,0,0,0,2700,2701,1,0,
  	0,0,2701,2702,1,0,0,0,2702,2704,3,316,158,0,2703,2700,1,0,0,0,2704,2705,
  	1,0,0,0,2705,2703,1,0,0,0,2705,2706,1,0,0,0,2706,2708,1,0,0,0,2707,2685,
  	1,0,0,0,2707,2694,1,0,0,0,2708,2717,1,0,0,0,2709,2711,5,169,0,0,2710,
  	2709,1,0,0,0,2710,2711,1,0,0,0,2711,2712,1,0,0,0,2712,2714,5,77,0,0,2713,
  	2715,5,169,0,0,2714,2713,1,0,0,0,2714,2715,1,0,0,0,2715,2716,1,0,0,0,
  	2716,2718,3,234,117,0,2717,2710,1,0,0,0,2717,2718,1,0,0,0,2718,2720,1,
  	0,0,0,2719,2721,5,169,0,0,2720,2719,1,0,0,0,2720,2721,1,0,0,0,2721,2722,
  	1,0,0,0,2722,2723,5,78,0,0,2723,315,1,0,0,0,2724,2726,5,141,0,0,2725,
  	2727,5,169,0,0,2726,2725,1,0,0,0,2726,2727,1,0,0,0,2727,2728,1,0,0,0,
  	2728,2730,3,234,117,0,2729,2731,5,169,0,0,2730,2729,1,0,0,0,2730,2731,
  	1,0,0,0,2731,2732,1,0,0,0,2732,2734,5,132,0,0,2733,2735,5,169,0,0,2734,
  	2733,1,0,0,0,2734,2735,1,0,0,0,2735,2736,1,0,0,0,2736,2737,3,234,117,
  	0,2737,317,1,0,0,0,2738,2739,3,334,167,0,2739,319,1,0,0,0,2740,2743,3,
  	330,165,0,2741,2743,3,328,164,0,2742,2740,1,0,0,0,2742,2741,1,0,0,0,2743,
  	321,1,0,0,0,2744,2747,5,26,0,0,2745,2748,3,334,167,0,2746,2748,5,157,
  	0,0,2747,2745,1,0,0,0,2747,2746,1,0,0,0,2748,323,1,0,0,0,2749,2751,3,
  	280,140,0,2750,2752,5,169,0,0,2751,2750,1,0,0,0,2751,2752,1,0,0,0,2752,
  	2753,1,0,0,0,2753,2754,3,312,156,0,2754,325,1,0,0,0,2755,2756,3,332,166,
  	0,2756,327,1,0,0,0,2757,2758,5,157,0,0,2758,329,1,0,0,0,2759,2760,5,164,
  	0,0,2760,331,1,0,0,0,2761,2762,3,334,167,0,2762,333,1,0,0,0,2763,2769,
  	5,165,0,0,2764,2765,5,168,0,0,2765,2769,6,167,-1,0,2766,2769,5,158,0,
  	0,2767,2769,3,336,168,0,2768,2763,1,0,0,0,2768,2764,1,0,0,0,2768,2766,
  	1,0,0,0,2768,2767,1,0,0,0,2769,335,1,0,0,0,2770,2771,7,7,0,0,2771,337,
  	1,0,0,0,2772,2773,7,8,0,0,2773,339,1,0,0,0,2774,2775,7,9,0,0,2775,341,
  	1,0,0,0,2776,2777,7,10,0,0,2777,343,1,0,0,0,473,346,350,355,359,364,367,
  	371,374,400,406,410,413,419,422,426,430,434,439,443,450,454,462,466,476,
  	480,484,489,502,506,514,517,525,528,543,548,554,558,561,564,570,574,580,
  	584,589,604,608,630,634,637,640,643,646,650,655,659,669,673,678,683,688,
  	694,698,702,707,714,718,722,725,729,733,752,756,760,764,768,773,786,790,
  	794,798,802,806,808,812,816,818,833,837,841,845,849,854,857,861,865,867,
  	871,875,877,896,907,914,927,941,944,963,969,972,982,985,993,996,1002,
  	1005,1011,1033,1042,1068,1072,1077,1086,1090,1095,1103,1109,1113,1117,
  	1125,1129,1133,1139,1143,1147,1153,1157,1161,1165,1169,1175,1179,1183,
  	1187,1191,1195,1201,1208,1213,1219,1239,1243,1251,1259,1261,1271,1275,
  	1279,1285,1289,1294,1299,1304,1309,1313,1318,1324,1329,1332,1336,1340,
  	1344,1350,1354,1359,1364,1368,1371,1375,1379,1383,1387,1391,1397,1401,
  	1406,1410,1419,1425,1433,1437,1441,1445,1452,1455,1458,1461,1465,1467,
  	1473,1476,1480,1484,1488,1492,1496,1500,1505,1511,1515,1519,1523,1528,
  	1532,1541,1545,1550,1564,1566,1568,1573,1583,1589,1596,1609,1613,1617,
  	1621,1626,1631,1635,1641,1645,1649,1653,1658,1664,1667,1673,1676,1682,
  	1686,1690,1694,1698,1703,1708,1712,1717,1720,1729,1738,1743,1756,1759,
  	1767,1771,1776,1781,1785,1790,1796,1801,1808,1812,1816,1818,1822,1824,
  	1828,1830,1836,1842,1846,1849,1852,1858,1861,1864,1868,1874,1877,1880,
  	1884,1888,1892,1894,1898,1900,1904,1906,1910,1912,1918,1922,1926,1930,
  	1934,1938,1942,1946,1950,1953,1959,1963,1967,1970,1975,1980,1985,1990,
  	1996,2002,2005,2008,2011,2015,2018,2021,2024,2027,2031,2035,2039,2043,
  	2047,2051,2053,2056,2060,2064,2068,2072,2074,2080,2083,2086,2092,2095,
  	2098,2119,2129,2139,2144,2148,2155,2159,2163,2167,2171,2179,2183,2187,
  	2191,2197,2201,2207,2211,2216,2221,2225,2230,2235,2239,2245,2252,2256,
  	2262,2269,2273,2279,2286,2290,2295,2300,2304,2309,2312,2319,2322,2327,
  	2336,2340,2343,2356,2359,2364,2378,2382,2387,2399,2407,2413,2417,2421,
  	2425,2428,2434,2437,2441,2445,2449,2453,2457,2464,2467,2471,2477,2481,
  	2487,2491,2495,2500,2504,2508,2512,2517,2520,2523,2529,2533,2537,2539,
  	2543,2547,2551,2555,2558,2562,2568,2573,2575,2579,2583,2588,2592,2597,
  	2601,2605,2609,2613,2618,2622,2627,2631,2635,2639,2643,2646,2649,2655,
  	2659,2663,2667,2670,2673,2679,2683,2687,2692,2696,2700,2705,2707,2710,
  	2714,2717,2720,2726,2730,2734,2742,2747,2751,2768
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- Ku_StatementsContext ------------------------------------------------------------------

CypherParser::Ku_StatementsContext::Ku_StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_CypherContext *> CypherParser::Ku_StatementsContext::oC_Cypher() {
  return getRuleContexts<CypherParser::OC_CypherContext>();
}

CypherParser::OC_CypherContext* CypherParser::Ku_StatementsContext::oC_Cypher(size_t i) {
  return getRuleContext<CypherParser::OC_CypherContext>(i);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::Ku_StatementsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::Ku_StatementsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::Ku_StatementsContext::getRuleIndex() const {
  return CypherParser::RuleKu_Statements;
}


CypherParser::Ku_StatementsContext* CypherParser::ku_Statements() {
  Ku_StatementsContext *_localctx = _tracker.createInstance<Ku_StatementsContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleKu_Statements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(344);
    oC_Cypher();
    setState(355);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(346);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(345);
          match(CypherParser::SP);
        }
        setState(348);
        match(CypherParser::T__0);
        setState(350);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
          setState(349);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(352);
        oC_Cypher(); 
      }
      setState(357);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
    setState(359);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(358);
      match(CypherParser::SP);
    }
    setState(361);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

CypherParser::OC_AnyCypherOptionContext* CypherParser::OC_CypherContext::oC_AnyCypherOption() {
  return getRuleContext<CypherParser::OC_AnyCypherOptionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}


CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(364);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::EXPLAIN

    || _la == CypherParser::PROFILE) {
      setState(363);
      oC_AnyCypherOption();
    }
    setState(367);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(366);
      match(CypherParser::SP);
    }

    setState(369);
    oC_Statement();
    setState(374);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(371);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(370);
        match(CypherParser::SP);
      }
      setState(373);
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_CreateNodeTableContext* CypherParser::OC_StatementContext::kU_CreateNodeTable() {
  return getRuleContext<CypherParser::KU_CreateNodeTableContext>(0);
}

CypherParser::KU_CreateRelTableContext* CypherParser::OC_StatementContext::kU_CreateRelTable() {
  return getRuleContext<CypherParser::KU_CreateRelTableContext>(0);
}

CypherParser::KU_CreateRelTableGroupContext* CypherParser::OC_StatementContext::kU_CreateRelTableGroup() {
  return getRuleContext<CypherParser::KU_CreateRelTableGroupContext>(0);
}

CypherParser::KU_CreateRdfGraphContext* CypherParser::OC_StatementContext::kU_CreateRdfGraph() {
  return getRuleContext<CypherParser::KU_CreateRdfGraphContext>(0);
}

CypherParser::KU_CreateSequenceContext* CypherParser::OC_StatementContext::kU_CreateSequence() {
  return getRuleContext<CypherParser::KU_CreateSequenceContext>(0);
}

CypherParser::KU_CreateTypeContext* CypherParser::OC_StatementContext::kU_CreateType() {
  return getRuleContext<CypherParser::KU_CreateTypeContext>(0);
}

CypherParser::KU_CreateVectorIndexContext* CypherParser::OC_StatementContext::kU_CreateVectorIndex() {
  return getRuleContext<CypherParser::KU_CreateVectorIndexContext>(0);
}

CypherParser::KU_DropContext* CypherParser::OC_StatementContext::kU_Drop() {
  return getRuleContext<CypherParser::KU_DropContext>(0);
}

CypherParser::KU_AlterTableContext* CypherParser::OC_StatementContext::kU_AlterTable() {
  return getRuleContext<CypherParser::KU_AlterTableContext>(0);
}

CypherParser::KU_CopyFromContext* CypherParser::OC_StatementContext::kU_CopyFrom() {
  return getRuleContext<CypherParser::KU_CopyFromContext>(0);
}

CypherParser::KU_CopyFromByColumnContext* CypherParser::OC_StatementContext::kU_CopyFromByColumn() {
  return getRuleContext<CypherParser::KU_CopyFromByColumnContext>(0);
}

CypherParser::KU_CopyTOContext* CypherParser::OC_StatementContext::kU_CopyTO() {
  return getRuleContext<CypherParser::KU_CopyTOContext>(0);
}

CypherParser::KU_StandaloneCallContext* CypherParser::OC_StatementContext::kU_StandaloneCall() {
  return getRuleContext<CypherParser::KU_StandaloneCallContext>(0);
}

CypherParser::KU_CreateMacroContext* CypherParser::OC_StatementContext::kU_CreateMacro() {
  return getRuleContext<CypherParser::KU_CreateMacroContext>(0);
}

CypherParser::KU_CommentOnContext* CypherParser::OC_StatementContext::kU_CommentOn() {
  return getRuleContext<CypherParser::KU_CommentOnContext>(0);
}

CypherParser::KU_TransactionContext* CypherParser::OC_StatementContext::kU_Transaction() {
  return getRuleContext<CypherParser::KU_TransactionContext>(0);
}

CypherParser::KU_ExtensionContext* CypherParser::OC_StatementContext::kU_Extension() {
  return getRuleContext<CypherParser::KU_ExtensionContext>(0);
}

CypherParser::KU_ExportDatabaseContext* CypherParser::OC_StatementContext::kU_ExportDatabase() {
  return getRuleContext<CypherParser::KU_ExportDatabaseContext>(0);
}

CypherParser::KU_ImportDatabaseContext* CypherParser::OC_StatementContext::kU_ImportDatabase() {
  return getRuleContext<CypherParser::KU_ImportDatabaseContext>(0);
}

CypherParser::KU_AttachDatabaseContext* CypherParser::OC_StatementContext::kU_AttachDatabase() {
  return getRuleContext<CypherParser::KU_AttachDatabaseContext>(0);
}

CypherParser::KU_DetachDatabaseContext* CypherParser::OC_StatementContext::kU_DetachDatabase() {
  return getRuleContext<CypherParser::KU_DetachDatabaseContext>(0);
}

CypherParser::KU_UseDatabaseContext* CypherParser::OC_StatementContext::kU_UseDatabase() {
  return getRuleContext<CypherParser::KU_UseDatabaseContext>(0);
}

CypherParser::KU_UpdateVectorIndexContext* CypherParser::OC_StatementContext::kU_UpdateVectorIndex() {
  return getRuleContext<CypherParser::KU_UpdateVectorIndexContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}


CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(400);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(376);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(377);
      kU_CreateNodeTable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(378);
      kU_CreateRelTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(379);
      kU_CreateRelTableGroup();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(380);
      kU_CreateRdfGraph();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(381);
      kU_CreateSequence();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(382);
      kU_CreateType();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(383);
      kU_CreateVectorIndex();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(384);
      kU_Drop();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(385);
      kU_AlterTable();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(386);
      kU_CopyFrom();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(387);
      kU_CopyFromByColumn();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(388);
      kU_CopyTO();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(389);
      kU_StandaloneCall();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(390);
      kU_CreateMacro();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(391);
      kU_CommentOn();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(392);
      kU_Transaction();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(393);
      kU_Extension();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(394);
      kU_ExportDatabase();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(395);
      kU_ImportDatabase();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(396);
      kU_AttachDatabase();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(397);
      kU_DetachDatabase();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(398);
      kU_UseDatabase();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(399);
      kU_UpdateVectorIndex();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromContext ------------------------------------------------------------------

CypherParser::KU_CopyFromContext::KU_CopyFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_CopyFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::KU_ColumnNamesContext* CypherParser::KU_CopyFromContext::kU_ColumnNames() {
  return getRuleContext<CypherParser::KU_ColumnNamesContext>(0);
}


size_t CypherParser::KU_CopyFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFrom;
}


CypherParser::KU_CopyFromContext* CypherParser::kU_CopyFrom() {
  KU_CopyFromContext *_localctx = _tracker.createInstance<KU_CopyFromContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleKU_CopyFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(402);
    match(CypherParser::COPY);
    setState(403);
    match(CypherParser::SP);
    setState(404);
    oC_SchemaName();
    setState(413);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(406);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(405);
        match(CypherParser::SP);
      }
      setState(408);
      kU_ColumnNames();
      setState(410);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(409);
        match(CypherParser::SP);
      }
      break;
    }

    case 2: {
      setState(412);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(415);
    match(CypherParser::FROM);
    setState(416);
    match(CypherParser::SP);
    setState(417);
    kU_ScanSource();
    setState(422);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(419);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(418);
        match(CypherParser::SP);
      }
      setState(421);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnNamesContext ------------------------------------------------------------------

CypherParser::KU_ColumnNamesContext::KU_ColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_ColumnNamesContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ColumnNamesContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnNamesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnNamesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnNamesContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnNames;
}


CypherParser::KU_ColumnNamesContext* CypherParser::kU_ColumnNames() {
  KU_ColumnNamesContext *_localctx = _tracker.createInstance<KU_ColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleKU_ColumnNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(424);
    match(CypherParser::T__1);
    setState(426);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(425);
      match(CypherParser::SP);
    }
    setState(428);
    oC_SchemaName();
    setState(439);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(430);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(429);
          match(CypherParser::SP);
        }
        setState(432);
        match(CypherParser::T__2);
        setState(434);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(433);
          match(CypherParser::SP);
        }
        setState(436);
        oC_SchemaName(); 
      }
      setState(441);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    }
    setState(443);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(442);
      match(CypherParser::SP);
    }
    setState(445);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ScanSourceContext ------------------------------------------------------------------

CypherParser::KU_ScanSourceContext::KU_ScanSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_FilePathsContext* CypherParser::KU_ScanSourceContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::OC_QueryContext* CypherParser::KU_ScanSourceContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ScanSourceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ScanSourceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::KU_ScanSourceContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ScanSourceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_ScanSourceContext::getRuleIndex() const {
  return CypherParser::RuleKU_ScanSource;
}


CypherParser::KU_ScanSourceContext* CypherParser::kU_ScanSource() {
  KU_ScanSourceContext *_localctx = _tracker.createInstance<KU_ScanSourceContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleKU_ScanSource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(466);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(447);
      kU_FilePaths();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(448);
      match(CypherParser::T__1);
      setState(450);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(449);
        match(CypherParser::SP);
      }
      setState(452);
      oC_Query();
      setState(454);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(453);
        match(CypherParser::SP);
      }
      setState(456);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(458);
      oC_Variable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(459);
      oC_Variable();
      setState(460);
      match(CypherParser::T__4);
      setState(462);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(461);
        match(CypherParser::SP);
      }
      setState(464);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromByColumnContext ------------------------------------------------------------------

CypherParser::KU_CopyFromByColumnContext::KU_CopyFromByColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromByColumnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COLUMN() {
  return getToken(CypherParser::COLUMN, 0);
}


size_t CypherParser::KU_CopyFromByColumnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFromByColumn;
}


CypherParser::KU_CopyFromByColumnContext* CypherParser::kU_CopyFromByColumn() {
  KU_CopyFromByColumnContext *_localctx = _tracker.createInstance<KU_CopyFromByColumnContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleKU_CopyFromByColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(468);
    match(CypherParser::COPY);
    setState(469);
    match(CypherParser::SP);
    setState(470);
    oC_SchemaName();
    setState(471);
    match(CypherParser::SP);
    setState(472);
    match(CypherParser::FROM);
    setState(473);
    match(CypherParser::SP);
    setState(474);
    match(CypherParser::T__1);
    setState(476);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(475);
      match(CypherParser::SP);
    }
    setState(478);
    match(CypherParser::StringLiteral);
    setState(489);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
      setState(480);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(479);
        match(CypherParser::SP);
      }
      setState(482);
      match(CypherParser::T__2);
      setState(484);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(483);
        match(CypherParser::SP);
      }
      setState(486);
      match(CypherParser::StringLiteral);
      setState(491);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(492);
    match(CypherParser::T__3);
    setState(493);
    match(CypherParser::SP);
    setState(494);
    match(CypherParser::BY);
    setState(495);
    match(CypherParser::SP);
    setState(496);
    match(CypherParser::COLUMN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyTOContext ------------------------------------------------------------------

CypherParser::KU_CopyTOContext::KU_CopyTOContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyTOContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_QueryContext* CypherParser::KU_CopyTOContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyTOContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_CopyTOContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyTO;
}


CypherParser::KU_CopyTOContext* CypherParser::kU_CopyTO() {
  KU_CopyTOContext *_localctx = _tracker.createInstance<KU_CopyTOContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleKU_CopyTO);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(498);
    match(CypherParser::COPY);
    setState(499);
    match(CypherParser::SP);
    setState(500);
    match(CypherParser::T__1);
    setState(502);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(501);
      match(CypherParser::SP);
    }
    setState(504);
    oC_Query();
    setState(506);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(505);
      match(CypherParser::SP);
    }
    setState(508);
    match(CypherParser::T__3);
    setState(509);
    match(CypherParser::SP);
    setState(510);
    match(CypherParser::TO);
    setState(511);
    match(CypherParser::SP);
    setState(512);
    match(CypherParser::StringLiteral);
    setState(517);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      setState(514);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(513);
        match(CypherParser::SP);
      }
      setState(516);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ExportDatabaseContext::KU_ExportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ExportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ExportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_ExportDatabaseContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_ExportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ExportDatabase;
}


CypherParser::KU_ExportDatabaseContext* CypherParser::kU_ExportDatabase() {
  KU_ExportDatabaseContext *_localctx = _tracker.createInstance<KU_ExportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleKU_ExportDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(519);
    match(CypherParser::EXPORT);
    setState(520);
    match(CypherParser::SP);
    setState(521);
    match(CypherParser::DATABASE);
    setState(522);
    match(CypherParser::SP);
    setState(523);
    match(CypherParser::StringLiteral);
    setState(528);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(525);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(524);
        match(CypherParser::SP);
      }
      setState(527);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ImportDatabaseContext ------------------------------------------------------------------

CypherParser::KU_ImportDatabaseContext::KU_ImportDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ImportDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_ImportDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_ImportDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_ImportDatabase;
}


CypherParser::KU_ImportDatabaseContext* CypherParser::kU_ImportDatabase() {
  KU_ImportDatabaseContext *_localctx = _tracker.createInstance<KU_ImportDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleKU_ImportDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(530);
    match(CypherParser::IMPORT);
    setState(531);
    match(CypherParser::SP);
    setState(532);
    match(CypherParser::DATABASE);
    setState(533);
    match(CypherParser::SP);
    setState(534);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AttachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_AttachDatabaseContext::KU_AttachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AttachDatabaseContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::DBTYPE() {
  return getToken(CypherParser::DBTYPE, 0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_AttachDatabaseContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_AttachDatabaseContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AttachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_OptionsContext* CypherParser::KU_AttachDatabaseContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}


size_t CypherParser::KU_AttachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_AttachDatabase;
}


CypherParser::KU_AttachDatabaseContext* CypherParser::kU_AttachDatabase() {
  KU_AttachDatabaseContext *_localctx = _tracker.createInstance<KU_AttachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleKU_AttachDatabase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(536);
    match(CypherParser::ATTACH);
    setState(537);
    match(CypherParser::SP);
    setState(538);
    match(CypherParser::StringLiteral);
    setState(543);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(539);
      match(CypherParser::SP);
      setState(540);
      match(CypherParser::AS);
      setState(541);
      match(CypherParser::SP);
      setState(542);
      oC_SchemaName();
      break;
    }

    default:
      break;
    }
    setState(545);
    match(CypherParser::SP);
    setState(546);
    match(CypherParser::T__1);
    setState(548);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(547);
      match(CypherParser::SP);
    }
    setState(550);
    match(CypherParser::DBTYPE);
    setState(551);
    match(CypherParser::SP);
    setState(552);
    oC_SymbolicName();
    setState(561);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(554);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(553);
        match(CypherParser::SP);
      }
      setState(556);
      match(CypherParser::T__2);
      setState(558);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(557);
        match(CypherParser::SP);
      }
      setState(560);
      kU_Options();
      break;
    }

    default:
      break;
    }
    setState(564);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(563);
      match(CypherParser::SP);
    }
    setState(566);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionContext ------------------------------------------------------------------

CypherParser::KU_OptionContext::KU_OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_OptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_OptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Option;
}


CypherParser::KU_OptionContext* CypherParser::kU_Option() {
  KU_OptionContext *_localctx = _tracker.createInstance<KU_OptionContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleKU_Option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(568);
    oC_SymbolicName();
    setState(570);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(569);
      match(CypherParser::SP);
    }
    setState(572);
    match(CypherParser::T__5);
    setState(574);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(573);
      match(CypherParser::SP);
    }
    setState(576);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_OptionsContext ------------------------------------------------------------------

CypherParser::KU_OptionsContext::KU_OptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_OptionContext *> CypherParser::KU_OptionsContext::kU_Option() {
  return getRuleContexts<CypherParser::KU_OptionContext>();
}

CypherParser::KU_OptionContext* CypherParser::KU_OptionsContext::kU_Option(size_t i) {
  return getRuleContext<CypherParser::KU_OptionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_OptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_OptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_OptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_Options;
}


CypherParser::KU_OptionsContext* CypherParser::kU_Options() {
  KU_OptionsContext *_localctx = _tracker.createInstance<KU_OptionsContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleKU_Options);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(578);
    kU_Option();
    setState(589);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(580);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(579);
          match(CypherParser::SP);
        }
        setState(582);
        match(CypherParser::T__2);
        setState(584);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(583);
          match(CypherParser::SP);
        }
        setState(586);
        kU_Option(); 
      }
      setState(591);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DetachDatabaseContext ------------------------------------------------------------------

CypherParser::KU_DetachDatabaseContext::KU_DetachDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_DetachDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DetachDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_DetachDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_DetachDatabase;
}


CypherParser::KU_DetachDatabaseContext* CypherParser::kU_DetachDatabase() {
  KU_DetachDatabaseContext *_localctx = _tracker.createInstance<KU_DetachDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleKU_DetachDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(592);
    match(CypherParser::DETACH);
    setState(593);
    match(CypherParser::SP);
    setState(594);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_UseDatabaseContext ------------------------------------------------------------------

CypherParser::KU_UseDatabaseContext::KU_UseDatabaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_UseDatabaseContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_UseDatabaseContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_UseDatabaseContext::getRuleIndex() const {
  return CypherParser::RuleKU_UseDatabase;
}


CypherParser::KU_UseDatabaseContext* CypherParser::kU_UseDatabase() {
  KU_UseDatabaseContext *_localctx = _tracker.createInstance<KU_UseDatabaseContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleKU_UseDatabase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(596);
    match(CypherParser::USE);
    setState(597);
    match(CypherParser::SP);
    setState(598);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StandaloneCallContext ------------------------------------------------------------------

CypherParser::KU_StandaloneCallContext::KU_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StandaloneCallContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StandaloneCallContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_StandaloneCall;
}


CypherParser::KU_StandaloneCallContext* CypherParser::kU_StandaloneCall() {
  KU_StandaloneCallContext *_localctx = _tracker.createInstance<KU_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleKU_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(600);
    match(CypherParser::CALL);
    setState(601);
    match(CypherParser::SP);
    setState(602);
    oC_SymbolicName();
    setState(604);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(603);
      match(CypherParser::SP);
    }
    setState(606);
    match(CypherParser::T__5);
    setState(608);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(607);
      match(CypherParser::SP);
    }
    setState(610);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CommentOnContext ------------------------------------------------------------------

CypherParser::KU_CommentOnContext::KU_CommentOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CommentOnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CommentOnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CommentOnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CommentOn;
}


CypherParser::KU_CommentOnContext* CypherParser::kU_CommentOn() {
  KU_CommentOnContext *_localctx = _tracker.createInstance<KU_CommentOnContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleKU_CommentOn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(612);
    match(CypherParser::COMMENT);
    setState(613);
    match(CypherParser::SP);
    setState(614);
    match(CypherParser::ON);
    setState(615);
    match(CypherParser::SP);
    setState(616);
    match(CypherParser::TABLE);
    setState(617);
    match(CypherParser::SP);
    setState(618);
    oC_SchemaName();
    setState(619);
    match(CypherParser::SP);
    setState(620);
    match(CypherParser::IS);
    setState(621);
    match(CypherParser::SP);
    setState(622);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateMacroContext ------------------------------------------------------------------

CypherParser::KU_CreateMacroContext::KU_CreateMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateMacroContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::MACRO() {
  return getToken(CypherParser::MACRO, 0);
}

CypherParser::OC_FunctionNameContext* CypherParser::KU_CreateMacroContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_CreateMacroContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::KU_PositionalArgsContext* CypherParser::KU_CreateMacroContext::kU_PositionalArgs() {
  return getRuleContext<CypherParser::KU_PositionalArgsContext>(0);
}

std::vector<CypherParser::KU_DefaultArgContext *> CypherParser::KU_CreateMacroContext::kU_DefaultArg() {
  return getRuleContexts<CypherParser::KU_DefaultArgContext>();
}

CypherParser::KU_DefaultArgContext* CypherParser::KU_CreateMacroContext::kU_DefaultArg(size_t i) {
  return getRuleContext<CypherParser::KU_DefaultArgContext>(i);
}


size_t CypherParser::KU_CreateMacroContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateMacro;
}


CypherParser::KU_CreateMacroContext* CypherParser::kU_CreateMacro() {
  KU_CreateMacroContext *_localctx = _tracker.createInstance<KU_CreateMacroContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleKU_CreateMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(624);
    match(CypherParser::CREATE);
    setState(625);
    match(CypherParser::SP);
    setState(626);
    match(CypherParser::MACRO);
    setState(627);
    match(CypherParser::SP);
    setState(628);
    oC_FunctionName();
    setState(630);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(629);
      match(CypherParser::SP);
    }
    setState(632);
    match(CypherParser::T__1);
    setState(634);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      setState(633);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(637);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      setState(636);
      kU_PositionalArgs();
      break;
    }

    default:
      break;
    }
    setState(640);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      setState(639);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(643);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 46) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 46)) & 8022426305271089045) != 0) || ((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 1267738050104189) != 0)) {
      setState(642);
      kU_DefaultArg();
    }
    setState(655);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(646);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(645);
          match(CypherParser::SP);
        }
        setState(648);
        match(CypherParser::T__2);
        setState(650);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(649);
          match(CypherParser::SP);
        }
        setState(652);
        kU_DefaultArg(); 
      }
      setState(657);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
    setState(659);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(658);
      match(CypherParser::SP);
    }
    setState(661);
    match(CypherParser::T__3);
    setState(662);
    match(CypherParser::SP);
    setState(663);
    match(CypherParser::AS);
    setState(664);
    match(CypherParser::SP);
    setState(665);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PositionalArgsContext ------------------------------------------------------------------

CypherParser::KU_PositionalArgsContext::KU_PositionalArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_PositionalArgsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_PositionalArgsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PositionalArgsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PositionalArgsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PositionalArgsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PositionalArgs;
}


CypherParser::KU_PositionalArgsContext* CypherParser::kU_PositionalArgs() {
  KU_PositionalArgsContext *_localctx = _tracker.createInstance<KU_PositionalArgsContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleKU_PositionalArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(667);
    oC_SymbolicName();
    setState(678);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(669);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(668);
          match(CypherParser::SP);
        }
        setState(671);
        match(CypherParser::T__2);
        setState(673);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(672);
          match(CypherParser::SP);
        }
        setState(675);
        oC_SymbolicName(); 
      }
      setState(680);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultArgContext ------------------------------------------------------------------

CypherParser::KU_DefaultArgContext::KU_DefaultArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DefaultArgContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_DefaultArgContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DefaultArgContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_DefaultArgContext::getRuleIndex() const {
  return CypherParser::RuleKU_DefaultArg;
}


CypherParser::KU_DefaultArgContext* CypherParser::kU_DefaultArg() {
  KU_DefaultArgContext *_localctx = _tracker.createInstance<KU_DefaultArgContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleKU_DefaultArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(681);
    oC_SymbolicName();
    setState(683);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(682);
      match(CypherParser::SP);
    }
    setState(685);
    match(CypherParser::COLON);
    setState(686);
    match(CypherParser::T__5);
    setState(688);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(687);
      match(CypherParser::SP);
    }
    setState(690);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FilePathsContext ------------------------------------------------------------------

CypherParser::KU_FilePathsContext::KU_FilePathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::GLOB() {
  return getToken(CypherParser::GLOB, 0);
}


size_t CypherParser::KU_FilePathsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FilePaths;
}


CypherParser::KU_FilePathsContext* CypherParser::kU_FilePaths() {
  KU_FilePathsContext *_localctx = _tracker.createInstance<KU_FilePathsContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_FilePaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(725);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(692);
        match(CypherParser::T__6);
        setState(694);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(693);
          match(CypherParser::SP);
        }
        setState(696);
        match(CypherParser::StringLiteral);
        setState(707);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2 || _la == CypherParser::SP) {
          setState(698);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(697);
            match(CypherParser::SP);
          }
          setState(700);
          match(CypherParser::T__2);
          setState(702);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(701);
            match(CypherParser::SP);
          }
          setState(704);
          match(CypherParser::StringLiteral);
          setState(709);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(710);
        match(CypherParser::T__7);
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(711);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::GLOB: {
        enterOuterAlt(_localctx, 3);
        setState(712);
        match(CypherParser::GLOB);
        setState(714);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(713);
          match(CypherParser::SP);
        }
        setState(716);
        match(CypherParser::T__1);
        setState(718);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(717);
          match(CypherParser::SP);
        }
        setState(720);
        match(CypherParser::StringLiteral);
        setState(722);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(721);
          match(CypherParser::SP);
        }
        setState(724);
        match(CypherParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionsContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionsContext::KU_ParsingOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_OptionsContext* CypherParser::KU_ParsingOptionsContext::kU_Options() {
  return getRuleContext<CypherParser::KU_OptionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOptions;
}


CypherParser::KU_ParsingOptionsContext* CypherParser::kU_ParsingOptions() {
  KU_ParsingOptionsContext *_localctx = _tracker.createInstance<KU_ParsingOptionsContext>(_ctx, getState());
  enterRule(_localctx, 42, CypherParser::RuleKU_ParsingOptions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(727);
    match(CypherParser::T__1);
    setState(729);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(728);
      match(CypherParser::SP);
    }
    setState(731);
    kU_Options();
    setState(733);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(732);
      match(CypherParser::SP);
    }
    setState(735);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IfNotExistsContext ------------------------------------------------------------------

CypherParser::KU_IfNotExistsContext::KU_IfNotExistsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IfNotExistsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}

tree::TerminalNode* CypherParser::KU_IfNotExistsContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}


size_t CypherParser::KU_IfNotExistsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IfNotExists;
}


CypherParser::KU_IfNotExistsContext* CypherParser::kU_IfNotExists() {
  KU_IfNotExistsContext *_localctx = _tracker.createInstance<KU_IfNotExistsContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleKU_IfNotExists);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(737);
    match(CypherParser::IF);
    setState(738);
    match(CypherParser::SP);
    setState(739);
    match(CypherParser::NOT);
    setState(740);
    match(CypherParser::SP);
    setState(741);
    match(CypherParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeTableContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeTableContext::KU_CreateNodeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateNodeTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitionsDDL() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsDDLContext>(0);
}

CypherParser::KU_CreateNodeConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_CreateNodeConstraint() {
  return getRuleContext<CypherParser::KU_CreateNodeConstraintContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateNodeTableContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}


size_t CypherParser::KU_CreateNodeTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeTable;
}


CypherParser::KU_CreateNodeTableContext* CypherParser::kU_CreateNodeTable() {
  KU_CreateNodeTableContext *_localctx = _tracker.createInstance<KU_CreateNodeTableContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleKU_CreateNodeTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(743);
    match(CypherParser::CREATE);
    setState(744);
    match(CypherParser::SP);
    setState(745);
    match(CypherParser::NODE);
    setState(746);
    match(CypherParser::SP);
    setState(747);
    match(CypherParser::TABLE);
    setState(748);
    match(CypherParser::SP);
    setState(752);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      setState(749);
      kU_IfNotExists();
      setState(750);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(754);
    oC_SchemaName();
    setState(756);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(755);
      match(CypherParser::SP);
    }
    setState(758);
    match(CypherParser::T__1);
    setState(760);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(759);
      match(CypherParser::SP);
    }
    setState(762);
    kU_PropertyDefinitionsDDL();
    setState(764);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(763);
      match(CypherParser::SP);
    }

    setState(766);
    match(CypherParser::T__2);
    setState(768);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(767);
      match(CypherParser::SP);
    }
    setState(770);
    kU_CreateNodeConstraint();
    setState(773);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(772);
      match(CypherParser::SP);
    }
    setState(775);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableContext::KU_CreateRelTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableContext::kU_RelTableConnection() {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateRelTableContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::KU_CreateRelTableContext::kU_PropertyDefinitionsDDL() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsDDLContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTable;
}


CypherParser::KU_CreateRelTableContext* CypherParser::kU_CreateRelTable() {
  KU_CreateRelTableContext *_localctx = _tracker.createInstance<KU_CreateRelTableContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleKU_CreateRelTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(777);
    match(CypherParser::CREATE);
    setState(778);
    match(CypherParser::SP);
    setState(779);
    match(CypherParser::REL);
    setState(780);
    match(CypherParser::SP);
    setState(781);
    match(CypherParser::TABLE);
    setState(782);
    match(CypherParser::SP);
    setState(786);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      setState(783);
      kU_IfNotExists();
      setState(784);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(788);
    oC_SchemaName();
    setState(790);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(789);
      match(CypherParser::SP);
    }
    setState(792);
    match(CypherParser::T__1);
    setState(794);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(793);
      match(CypherParser::SP);
    }
    setState(796);
    kU_RelTableConnection();
    setState(798);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(797);
      match(CypherParser::SP);
    }
    setState(808);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      setState(800);
      match(CypherParser::T__2);
      setState(802);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(801);
        match(CypherParser::SP);
      }
      setState(804);
      kU_PropertyDefinitionsDDL();
      setState(806);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(805);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(818);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(810);
      match(CypherParser::T__2);
      setState(812);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(811);
        match(CypherParser::SP);
      }
      setState(814);
      oC_SymbolicName();
      setState(816);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(815);
        match(CypherParser::SP);
      }
    }
    setState(820);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableGroupContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableGroupContext::KU_CreateRelTableGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableGroupContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::GROUP() {
  return getToken(CypherParser::GROUP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_RelTableConnectionContext *> CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection() {
  return getRuleContexts<CypherParser::KU_RelTableConnectionContext>();
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection(size_t i) {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(i);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateRelTableGroupContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::KU_CreateRelTableGroupContext::kU_PropertyDefinitionsDDL() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsDDLContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableGroupContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTableGroup;
}


CypherParser::KU_CreateRelTableGroupContext* CypherParser::kU_CreateRelTableGroup() {
  KU_CreateRelTableGroupContext *_localctx = _tracker.createInstance<KU_CreateRelTableGroupContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleKU_CreateRelTableGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(822);
    match(CypherParser::CREATE);
    setState(823);
    match(CypherParser::SP);
    setState(824);
    match(CypherParser::REL);
    setState(825);
    match(CypherParser::SP);
    setState(826);
    match(CypherParser::TABLE);
    setState(827);
    match(CypherParser::SP);
    setState(828);
    match(CypherParser::GROUP);
    setState(829);
    match(CypherParser::SP);
    setState(833);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      setState(830);
      kU_IfNotExists();
      setState(831);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(835);
    oC_SchemaName();
    setState(837);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(836);
      match(CypherParser::SP);
    }
    setState(839);
    match(CypherParser::T__1);
    setState(841);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(840);
      match(CypherParser::SP);
    }
    setState(843);
    kU_RelTableConnection();
    setState(852); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(845);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(844);
                match(CypherParser::SP);
              }
              setState(847);
              match(CypherParser::T__2);
              setState(849);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(848);
                match(CypherParser::SP);
              }
              setState(851);
              kU_RelTableConnection();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(854); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(857);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(856);
      match(CypherParser::SP);
    }
    setState(867);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      setState(859);
      match(CypherParser::T__2);
      setState(861);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(860);
        match(CypherParser::SP);
      }
      setState(863);
      kU_PropertyDefinitionsDDL();
      setState(865);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(864);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(877);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__2) {
      setState(869);
      match(CypherParser::T__2);
      setState(871);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(870);
        match(CypherParser::SP);
      }
      setState(873);
      oC_SymbolicName();
      setState(875);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(874);
        match(CypherParser::SP);
      }
    }
    setState(879);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RelTableConnectionContext ------------------------------------------------------------------

CypherParser::KU_RelTableConnectionContext::KU_RelTableConnectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RelTableConnectionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_RelTableConnectionContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RelTableConnectionContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RelTableConnectionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RelTableConnection;
}


CypherParser::KU_RelTableConnectionContext* CypherParser::kU_RelTableConnection() {
  KU_RelTableConnectionContext *_localctx = _tracker.createInstance<KU_RelTableConnectionContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_RelTableConnection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(881);
    match(CypherParser::FROM);
    setState(882);
    match(CypherParser::SP);
    setState(883);
    oC_SchemaName();
    setState(884);
    match(CypherParser::SP);
    setState(885);
    match(CypherParser::TO);
    setState(886);
    match(CypherParser::SP);
    setState(887);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRdfGraphContext ------------------------------------------------------------------

CypherParser::KU_CreateRdfGraphContext::KU_CreateRdfGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRdfGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRdfGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateRdfGraphContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}


size_t CypherParser::KU_CreateRdfGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRdfGraph;
}


CypherParser::KU_CreateRdfGraphContext* CypherParser::kU_CreateRdfGraph() {
  KU_CreateRdfGraphContext *_localctx = _tracker.createInstance<KU_CreateRdfGraphContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleKU_CreateRdfGraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(889);
    match(CypherParser::CREATE);
    setState(890);
    match(CypherParser::SP);
    setState(891);
    match(CypherParser::RDFGRAPH);
    setState(892);
    match(CypherParser::SP);
    setState(896);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      setState(893);
      kU_IfNotExists();
      setState(894);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(898);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateSequenceContext ------------------------------------------------------------------

CypherParser::KU_CreateSequenceContext::KU_CreateSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateSequenceContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateSequenceContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateSequenceContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_IfNotExistsContext* CypherParser::KU_CreateSequenceContext::kU_IfNotExists() {
  return getRuleContext<CypherParser::KU_IfNotExistsContext>(0);
}

std::vector<CypherParser::KU_SequenceOptionsContext *> CypherParser::KU_CreateSequenceContext::kU_SequenceOptions() {
  return getRuleContexts<CypherParser::KU_SequenceOptionsContext>();
}

CypherParser::KU_SequenceOptionsContext* CypherParser::KU_CreateSequenceContext::kU_SequenceOptions(size_t i) {
  return getRuleContext<CypherParser::KU_SequenceOptionsContext>(i);
}


size_t CypherParser::KU_CreateSequenceContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateSequence;
}


CypherParser::KU_CreateSequenceContext* CypherParser::kU_CreateSequence() {
  KU_CreateSequenceContext *_localctx = _tracker.createInstance<KU_CreateSequenceContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleKU_CreateSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(900);
    match(CypherParser::CREATE);
    setState(901);
    match(CypherParser::SP);
    setState(902);
    match(CypherParser::SEQUENCE);
    setState(903);
    match(CypherParser::SP);
    setState(907);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
    case 1: {
      setState(904);
      kU_IfNotExists();
      setState(905);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(909);
    oC_SchemaName();
    setState(914);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(910);
        match(CypherParser::SP);
        setState(911);
        kU_SequenceOptions(); 
      }
      setState(916);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateTypeContext ------------------------------------------------------------------

CypherParser::KU_CreateTypeContext::KU_CreateTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::TYPE() {
  return getToken(CypherParser::TYPE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateTypeContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateTypeContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_CreateTypeContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_CreateTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateType;
}


CypherParser::KU_CreateTypeContext* CypherParser::kU_CreateType() {
  KU_CreateTypeContext *_localctx = _tracker.createInstance<KU_CreateTypeContext>(_ctx, getState());
  enterRule(_localctx, 58, CypherParser::RuleKU_CreateType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(917);
    match(CypherParser::CREATE);
    setState(918);
    match(CypherParser::SP);
    setState(919);
    match(CypherParser::TYPE);
    setState(920);
    match(CypherParser::SP);
    setState(921);
    oC_SchemaName();
    setState(922);
    match(CypherParser::SP);
    setState(923);
    match(CypherParser::AS);
    setState(924);
    match(CypherParser::SP);
    setState(925);
    kU_DataType(0);
    setState(927);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      setState(926);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateVectorIndexContext ------------------------------------------------------------------

CypherParser::KU_CreateVectorIndexContext::KU_CreateVectorIndexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateVectorIndexContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateVectorIndexContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateVectorIndexContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateVectorIndexContext::VECTOR() {
  return getToken(CypherParser::VECTOR, 0);
}

tree::TerminalNode* CypherParser::KU_CreateVectorIndexContext::INDEX() {
  return getToken(CypherParser::INDEX, 0);
}

tree::TerminalNode* CypherParser::KU_CreateVectorIndexContext::ON() {
  return getToken(CypherParser::ON, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateVectorIndexContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateVectorIndexContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CreateVectorIndexContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_CreateVectorIndexContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateVectorIndex;
}


CypherParser::KU_CreateVectorIndexContext* CypherParser::kU_CreateVectorIndex() {
  KU_CreateVectorIndexContext *_localctx = _tracker.createInstance<KU_CreateVectorIndexContext>(_ctx, getState());
  enterRule(_localctx, 60, CypherParser::RuleKU_CreateVectorIndex);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(929);
    match(CypherParser::CREATE);
    setState(930);
    match(CypherParser::SP);
    setState(931);
    match(CypherParser::VECTOR);
    setState(932);
    match(CypherParser::SP);
    setState(933);
    match(CypherParser::INDEX);
    setState(934);
    match(CypherParser::SP);
    setState(935);
    match(CypherParser::ON);
    setState(936);
    match(CypherParser::SP);
    setState(937);
    oC_SchemaName();
    setState(938);
    match(CypherParser::T__4);
    setState(939);
    oC_PropertyKeyName();
    setState(944);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
    case 1: {
      setState(941);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(940);
        match(CypherParser::SP);
      }
      setState(943);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_UpdateVectorIndexContext ------------------------------------------------------------------

CypherParser::KU_UpdateVectorIndexContext::KU_UpdateVectorIndexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_UpdateVectorIndexContext::UPDATE() {
  return getToken(CypherParser::UPDATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_UpdateVectorIndexContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_UpdateVectorIndexContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_UpdateVectorIndexContext::VECTOR() {
  return getToken(CypherParser::VECTOR, 0);
}

tree::TerminalNode* CypherParser::KU_UpdateVectorIndexContext::INDEX() {
  return getToken(CypherParser::INDEX, 0);
}

tree::TerminalNode* CypherParser::KU_UpdateVectorIndexContext::ON() {
  return getToken(CypherParser::ON, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_UpdateVectorIndexContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_UpdateVectorIndexContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_UpdateVectorIndexContext::getRuleIndex() const {
  return CypherParser::RuleKU_UpdateVectorIndex;
}


CypherParser::KU_UpdateVectorIndexContext* CypherParser::kU_UpdateVectorIndex() {
  KU_UpdateVectorIndexContext *_localctx = _tracker.createInstance<KU_UpdateVectorIndexContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleKU_UpdateVectorIndex);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(946);
    match(CypherParser::UPDATE);
    setState(947);
    match(CypherParser::SP);
    setState(948);
    match(CypherParser::VECTOR);
    setState(949);
    match(CypherParser::SP);
    setState(950);
    match(CypherParser::INDEX);
    setState(951);
    match(CypherParser::SP);
    setState(952);
    match(CypherParser::ON);
    setState(953);
    match(CypherParser::SP);
    setState(954);
    oC_SchemaName();
    setState(955);
    match(CypherParser::T__4);
    setState(956);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_SequenceOptionsContext ------------------------------------------------------------------

CypherParser::KU_SequenceOptionsContext::KU_SequenceOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_IncrementByContext* CypherParser::KU_SequenceOptionsContext::kU_IncrementBy() {
  return getRuleContext<CypherParser::KU_IncrementByContext>(0);
}

CypherParser::KU_MinValueContext* CypherParser::KU_SequenceOptionsContext::kU_MinValue() {
  return getRuleContext<CypherParser::KU_MinValueContext>(0);
}

CypherParser::KU_MaxValueContext* CypherParser::KU_SequenceOptionsContext::kU_MaxValue() {
  return getRuleContext<CypherParser::KU_MaxValueContext>(0);
}

CypherParser::KU_StartWithContext* CypherParser::KU_SequenceOptionsContext::kU_StartWith() {
  return getRuleContext<CypherParser::KU_StartWithContext>(0);
}

CypherParser::KU_CycleContext* CypherParser::KU_SequenceOptionsContext::kU_Cycle() {
  return getRuleContext<CypherParser::KU_CycleContext>(0);
}


size_t CypherParser::KU_SequenceOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_SequenceOptions;
}


CypherParser::KU_SequenceOptionsContext* CypherParser::kU_SequenceOptions() {
  KU_SequenceOptionsContext *_localctx = _tracker.createInstance<KU_SequenceOptionsContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleKU_SequenceOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(963);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(958);
      kU_IncrementBy();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(959);
      kU_MinValue();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(960);
      kU_MaxValue();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(961);
      kU_StartWith();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(962);
      kU_Cycle();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IncrementByContext ------------------------------------------------------------------

CypherParser::KU_IncrementByContext::KU_IncrementByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_IncrementByContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_IncrementByContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_IncrementByContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_IncrementByContext::getRuleIndex() const {
  return CypherParser::RuleKU_IncrementBy;
}


CypherParser::KU_IncrementByContext* CypherParser::kU_IncrementBy() {
  KU_IncrementByContext *_localctx = _tracker.createInstance<KU_IncrementByContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleKU_IncrementBy);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(965);
    match(CypherParser::INCREMENT);
    setState(966);
    match(CypherParser::SP);
    setState(969);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::BY) {
      setState(967);
      match(CypherParser::BY);
      setState(968);
      match(CypherParser::SP);
    }
    setState(972);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(971);
      match(CypherParser::MINUS);
    }
    setState(974);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MinValueContext ------------------------------------------------------------------

CypherParser::KU_MinValueContext::KU_MinValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MinValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MinValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MinValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MinValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MinValue;
}


CypherParser::KU_MinValueContext* CypherParser::kU_MinValue() {
  KU_MinValueContext *_localctx = _tracker.createInstance<KU_MinValueContext>(_ctx, getState());
  enterRule(_localctx, 68, CypherParser::RuleKU_MinValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(985);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(976);
        match(CypherParser::NO);
        setState(977);
        match(CypherParser::SP);
        setState(978);
        match(CypherParser::MINVALUE);
        break;
      }

      case CypherParser::MINVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(979);
        match(CypherParser::MINVALUE);
        setState(980);
        match(CypherParser::SP);
        setState(982);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(981);
          match(CypherParser::MINUS);
        }
        setState(984);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MaxValueContext ------------------------------------------------------------------

CypherParser::KU_MaxValueContext::KU_MaxValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::SP() {
  return getToken(CypherParser::SP, 0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_MaxValueContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_MaxValueContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_MaxValueContext::getRuleIndex() const {
  return CypherParser::RuleKU_MaxValue;
}


CypherParser::KU_MaxValueContext* CypherParser::kU_MaxValue() {
  KU_MaxValueContext *_localctx = _tracker.createInstance<KU_MaxValueContext>(_ctx, getState());
  enterRule(_localctx, 70, CypherParser::RuleKU_MaxValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(996);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::NO: {
        enterOuterAlt(_localctx, 1);
        setState(987);
        match(CypherParser::NO);
        setState(988);
        match(CypherParser::SP);
        setState(989);
        match(CypherParser::MAXVALUE);
        break;
      }

      case CypherParser::MAXVALUE: {
        enterOuterAlt(_localctx, 2);
        setState(990);
        match(CypherParser::MAXVALUE);
        setState(991);
        match(CypherParser::SP);
        setState(993);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::MINUS) {
          setState(992);
          match(CypherParser::MINUS);
        }
        setState(995);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StartWithContext ------------------------------------------------------------------

CypherParser::KU_StartWithContext::KU_StartWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StartWithContext::START() {
  return getToken(CypherParser::START, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StartWithContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_StartWithContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_StartWithContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_StartWithContext::getRuleIndex() const {
  return CypherParser::RuleKU_StartWith;
}


CypherParser::KU_StartWithContext* CypherParser::kU_StartWith() {
  KU_StartWithContext *_localctx = _tracker.createInstance<KU_StartWithContext>(_ctx, getState());
  enterRule(_localctx, 72, CypherParser::RuleKU_StartWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(998);
    match(CypherParser::START);
    setState(999);
    match(CypherParser::SP);
    setState(1002);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::WITH) {
      setState(1000);
      match(CypherParser::WITH);
      setState(1001);
      match(CypherParser::SP);
    }
    setState(1005);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::MINUS) {
      setState(1004);
      match(CypherParser::MINUS);
    }
    setState(1007);
    oC_IntegerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CycleContext ------------------------------------------------------------------

CypherParser::KU_CycleContext::KU_CycleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CycleContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_CycleContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::KU_CycleContext::getRuleIndex() const {
  return CypherParser::RuleKU_Cycle;
}


CypherParser::KU_CycleContext* CypherParser::kU_Cycle() {
  KU_CycleContext *_localctx = _tracker.createInstance<KU_CycleContext>(_ctx, getState());
  enterRule(_localctx, 74, CypherParser::RuleKU_Cycle);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1011);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::NO) {
      setState(1009);
      match(CypherParser::NO);
      setState(1010);
      match(CypherParser::SP);
    }
    setState(1013);
    match(CypherParser::CYCLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropContext ------------------------------------------------------------------

CypherParser::KU_DropContext::KU_DropContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DropContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DropContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::RDFGRAPH() {
  return getToken(CypherParser::RDFGRAPH, 0);
}

tree::TerminalNode* CypherParser::KU_DropContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}


size_t CypherParser::KU_DropContext::getRuleIndex() const {
  return CypherParser::RuleKU_Drop;
}


CypherParser::KU_DropContext* CypherParser::kU_Drop() {
  KU_DropContext *_localctx = _tracker.createInstance<KU_DropContext>(_ctx, getState());
  enterRule(_localctx, 76, CypherParser::RuleKU_Drop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1015);
    match(CypherParser::DROP);
    setState(1016);
    match(CypherParser::SP);
    setState(1017);
    _la = _input->LA(1);
    if (!(((((_la - 119) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 119)) & 4225) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1018);
    match(CypherParser::SP);
    setState(1019);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterTableContext ------------------------------------------------------------------

CypherParser::KU_AlterTableContext::KU_AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AlterTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AlterTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_AlterOptionsContext* CypherParser::KU_AlterTableContext::kU_AlterOptions() {
  return getRuleContext<CypherParser::KU_AlterOptionsContext>(0);
}


size_t CypherParser::KU_AlterTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterTable;
}


CypherParser::KU_AlterTableContext* CypherParser::kU_AlterTable() {
  KU_AlterTableContext *_localctx = _tracker.createInstance<KU_AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 78, CypherParser::RuleKU_AlterTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1021);
    match(CypherParser::ALTER);
    setState(1022);
    match(CypherParser::SP);
    setState(1023);
    match(CypherParser::TABLE);
    setState(1024);
    match(CypherParser::SP);
    setState(1025);
    oC_SchemaName();
    setState(1026);
    match(CypherParser::SP);
    setState(1027);
    kU_AlterOptions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterOptionsContext ------------------------------------------------------------------

CypherParser::KU_AlterOptionsContext::KU_AlterOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_AddPropertyContext* CypherParser::KU_AlterOptionsContext::kU_AddProperty() {
  return getRuleContext<CypherParser::KU_AddPropertyContext>(0);
}

CypherParser::KU_DropPropertyContext* CypherParser::KU_AlterOptionsContext::kU_DropProperty() {
  return getRuleContext<CypherParser::KU_DropPropertyContext>(0);
}

CypherParser::KU_RenameTableContext* CypherParser::KU_AlterOptionsContext::kU_RenameTable() {
  return getRuleContext<CypherParser::KU_RenameTableContext>(0);
}

CypherParser::KU_RenamePropertyContext* CypherParser::KU_AlterOptionsContext::kU_RenameProperty() {
  return getRuleContext<CypherParser::KU_RenamePropertyContext>(0);
}


size_t CypherParser::KU_AlterOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterOptions;
}


CypherParser::KU_AlterOptionsContext* CypherParser::kU_AlterOptions() {
  KU_AlterOptionsContext *_localctx = _tracker.createInstance<KU_AlterOptionsContext>(_ctx, getState());
  enterRule(_localctx, 80, CypherParser::RuleKU_AlterOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1033);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1029);
      kU_AddProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1030);
      kU_DropProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1031);
      kU_RenameTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1032);
      kU_RenameProperty();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddPropertyContext ------------------------------------------------------------------

CypherParser::KU_AddPropertyContext::KU_AddPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AddPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_AddPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_AddPropertyContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::KU_DefaultContext* CypherParser::KU_AddPropertyContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}


size_t CypherParser::KU_AddPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddProperty;
}


CypherParser::KU_AddPropertyContext* CypherParser::kU_AddProperty() {
  KU_AddPropertyContext *_localctx = _tracker.createInstance<KU_AddPropertyContext>(_ctx, getState());
  enterRule(_localctx, 82, CypherParser::RuleKU_AddProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1035);
    match(CypherParser::ADD);
    setState(1036);
    match(CypherParser::SP);
    setState(1037);
    oC_PropertyKeyName();
    setState(1038);
    match(CypherParser::SP);
    setState(1039);
    kU_DataType(0);
    setState(1042);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
    case 1: {
      setState(1040);
      match(CypherParser::SP);
      setState(1041);
      kU_Default();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultContext ------------------------------------------------------------------

CypherParser::KU_DefaultContext::KU_DefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DefaultContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

tree::TerminalNode* CypherParser::KU_DefaultContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_DefaultContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_DefaultContext::getRuleIndex() const {
  return CypherParser::RuleKU_Default;
}


CypherParser::KU_DefaultContext* CypherParser::kU_Default() {
  KU_DefaultContext *_localctx = _tracker.createInstance<KU_DefaultContext>(_ctx, getState());
  enterRule(_localctx, 84, CypherParser::RuleKU_Default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1044);
    match(CypherParser::DEFAULT);
    setState(1045);
    match(CypherParser::SP);
    setState(1046);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropPropertyContext ------------------------------------------------------------------

CypherParser::KU_DropPropertyContext::KU_DropPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_DropPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_DropPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropProperty;
}


CypherParser::KU_DropPropertyContext* CypherParser::kU_DropProperty() {
  KU_DropPropertyContext *_localctx = _tracker.createInstance<KU_DropPropertyContext>(_ctx, getState());
  enterRule(_localctx, 86, CypherParser::RuleKU_DropProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1048);
    match(CypherParser::DROP);
    setState(1049);
    match(CypherParser::SP);
    setState(1050);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenameTableContext ------------------------------------------------------------------

CypherParser::KU_RenameTableContext::KU_RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenameTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::TO() {
  return getToken(CypherParser::TO, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RenameTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_RenameTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameTable;
}


CypherParser::KU_RenameTableContext* CypherParser::kU_RenameTable() {
  KU_RenameTableContext *_localctx = _tracker.createInstance<KU_RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 88, CypherParser::RuleKU_RenameTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1052);
    match(CypherParser::RENAME);
    setState(1053);
    match(CypherParser::SP);
    setState(1054);
    match(CypherParser::TO);
    setState(1055);
    match(CypherParser::SP);
    setState(1056);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenamePropertyContext ------------------------------------------------------------------

CypherParser::KU_RenamePropertyContext::KU_RenamePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenamePropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RenamePropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameProperty;
}


CypherParser::KU_RenamePropertyContext* CypherParser::kU_RenameProperty() {
  KU_RenamePropertyContext *_localctx = _tracker.createInstance<KU_RenamePropertyContext>(_ctx, getState());
  enterRule(_localctx, 90, CypherParser::RuleKU_RenameProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1058);
    match(CypherParser::RENAME);
    setState(1059);
    match(CypherParser::SP);
    setState(1060);
    oC_PropertyKeyName();
    setState(1061);
    match(CypherParser::SP);
    setState(1062);
    match(CypherParser::TO);
    setState(1063);
    match(CypherParser::SP);
    setState(1064);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsContext::KU_PropertyDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionContext *> CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionContext>();
}

CypherParser::KU_PropertyDefinitionContext* CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitions;
}


CypherParser::KU_PropertyDefinitionsContext* CypherParser::kU_PropertyDefinitions() {
  KU_PropertyDefinitionsContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 92, CypherParser::RuleKU_PropertyDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1066);
    kU_PropertyDefinition();
    setState(1077);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1068);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1067);
          match(CypherParser::SP);
        }
        setState(1070);
        match(CypherParser::T__2);
        setState(1072);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1071);
          match(CypherParser::SP);
        }
        setState(1074);
        kU_PropertyDefinition(); 
      }
      setState(1079);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionContext::KU_PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinition;
}


CypherParser::KU_PropertyDefinitionContext* CypherParser::kU_PropertyDefinition() {
  KU_PropertyDefinitionContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 94, CypherParser::RuleKU_PropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1080);
    oC_PropertyKeyName();
    setState(1081);
    match(CypherParser::SP);
    setState(1082);
    kU_DataType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsDDLContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsDDLContext::KU_PropertyDefinitionsDDLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionDDLContext *> CypherParser::KU_PropertyDefinitionsDDLContext::kU_PropertyDefinitionDDL() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionDDLContext>();
}

CypherParser::KU_PropertyDefinitionDDLContext* CypherParser::KU_PropertyDefinitionsDDLContext::kU_PropertyDefinitionDDL(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionDDLContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsDDLContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsDDLContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsDDLContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitionsDDL;
}


CypherParser::KU_PropertyDefinitionsDDLContext* CypherParser::kU_PropertyDefinitionsDDL() {
  KU_PropertyDefinitionsDDLContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsDDLContext>(_ctx, getState());
  enterRule(_localctx, 96, CypherParser::RuleKU_PropertyDefinitionsDDL);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1084);
    kU_PropertyDefinitionDDL();
    setState(1095);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1086);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1085);
          match(CypherParser::SP);
        }
        setState(1088);
        match(CypherParser::T__2);
        setState(1090);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1089);
          match(CypherParser::SP);
        }
        setState(1092);
        kU_PropertyDefinitionDDL(); 
      }
      setState(1097);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionDDLContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionDDLContext::KU_PropertyDefinitionDDLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionDDLContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionDDLContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionDDLContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionDDLContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::KU_DefaultContext* CypherParser::KU_PropertyDefinitionDDLContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionDDLContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitionDDL;
}


CypherParser::KU_PropertyDefinitionDDLContext* CypherParser::kU_PropertyDefinitionDDL() {
  KU_PropertyDefinitionDDLContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionDDLContext>(_ctx, getState());
  enterRule(_localctx, 98, CypherParser::RuleKU_PropertyDefinitionDDL);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1098);
    oC_PropertyKeyName();
    setState(1099);
    match(CypherParser::SP);
    setState(1100);
    kU_DataType(0);
    setState(1103);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      setState(1101);
      match(CypherParser::SP);
      setState(1102);
      kU_Default();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeConstraintContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeConstraintContext::KU_CreateNodeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateNodeConstraintContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_CreateNodeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeConstraint;
}


CypherParser::KU_CreateNodeConstraintContext* CypherParser::kU_CreateNodeConstraint() {
  KU_CreateNodeConstraintContext *_localctx = _tracker.createInstance<KU_CreateNodeConstraintContext>(_ctx, getState());
  enterRule(_localctx, 100, CypherParser::RuleKU_CreateNodeConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1105);
    match(CypherParser::PRIMARY);
    setState(1106);
    match(CypherParser::SP);
    setState(1107);
    match(CypherParser::KEY);
    setState(1109);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1108);
      match(CypherParser::SP);
    }
    setState(1111);
    match(CypherParser::T__1);
    setState(1113);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1112);
      match(CypherParser::SP);
    }
    setState(1115);
    oC_PropertyKeyName();
    setState(1117);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1116);
      match(CypherParser::SP);
    }
    setState(1119);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DataTypeContext ------------------------------------------------------------------

CypherParser::KU_DataTypeContext::KU_DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DataTypeContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_DataTypeContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DataTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::KU_DataTypeContext *> CypherParser::KU_DataTypeContext::kU_DataType() {
  return getRuleContexts<CypherParser::KU_DataTypeContext>();
}

CypherParser::KU_DataTypeContext* CypherParser::KU_DataTypeContext::kU_DataType(size_t i) {
  return getRuleContext<CypherParser::KU_DataTypeContext>(i);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

std::vector<CypherParser::OC_IntegerLiteralContext *> CypherParser::KU_DataTypeContext::oC_IntegerLiteral() {
  return getRuleContexts<CypherParser::OC_IntegerLiteralContext>();
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_DataTypeContext::oC_IntegerLiteral(size_t i) {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(i);
}

CypherParser::KU_ListIdentifiersContext* CypherParser::KU_DataTypeContext::kU_ListIdentifiers() {
  return getRuleContext<CypherParser::KU_ListIdentifiersContext>(0);
}


size_t CypherParser::KU_DataTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_DataType;
}



CypherParser::KU_DataTypeContext* CypherParser::kU_DataType() {
   return kU_DataType(0);
}

CypherParser::KU_DataTypeContext* CypherParser::kU_DataType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_DataTypeContext *_localctx = _tracker.createInstance<KU_DataTypeContext>(_ctx, parentState);
  CypherParser::KU_DataTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 102;
  enterRecursionRule(_localctx, 102, CypherParser::RuleKU_DataType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1195);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      setState(1122);
      oC_SymbolicName();
      break;
    }

    case 2: {
      setState(1123);
      match(CypherParser::UNION);
      setState(1125);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1124);
        match(CypherParser::SP);
      }
      setState(1127);
      match(CypherParser::T__1);
      setState(1129);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1128);
        match(CypherParser::SP);
      }
      setState(1131);
      kU_PropertyDefinitions();
      setState(1133);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1132);
        match(CypherParser::SP);
      }
      setState(1135);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      setState(1137);
      oC_SymbolicName();
      setState(1139);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1138);
        match(CypherParser::SP);
      }
      setState(1141);
      match(CypherParser::T__1);
      setState(1143);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1142);
        match(CypherParser::SP);
      }
      setState(1145);
      kU_PropertyDefinitions();
      setState(1147);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1146);
        match(CypherParser::SP);
      }
      setState(1149);
      match(CypherParser::T__3);
      break;
    }

    case 4: {
      setState(1151);
      oC_SymbolicName();
      setState(1153);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1152);
        match(CypherParser::SP);
      }
      setState(1155);
      match(CypherParser::T__1);
      setState(1157);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1156);
        match(CypherParser::SP);
      }
      setState(1159);
      kU_DataType(0);
      setState(1161);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1160);
        match(CypherParser::SP);
      }
      setState(1163);
      match(CypherParser::T__2);
      setState(1165);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1164);
        match(CypherParser::SP);
      }
      setState(1167);
      kU_DataType(0);
      setState(1169);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1168);
        match(CypherParser::SP);
      }
      setState(1171);
      match(CypherParser::T__3);
      break;
    }

    case 5: {
      setState(1173);
      match(CypherParser::DECIMAL);
      setState(1175);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1174);
        match(CypherParser::SP);
      }
      setState(1177);
      match(CypherParser::T__1);
      setState(1179);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1178);
        match(CypherParser::SP);
      }
      setState(1181);
      oC_IntegerLiteral();
      setState(1183);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1182);
        match(CypherParser::SP);
      }
      setState(1185);
      match(CypherParser::T__2);
      setState(1187);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1186);
        match(CypherParser::SP);
      }
      setState(1189);
      oC_IntegerLiteral();
      setState(1191);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1190);
        match(CypherParser::SP);
      }
      setState(1193);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1201);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<KU_DataTypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleKU_DataType);
        setState(1197);

        if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
        setState(1198);
        kU_ListIdentifiers(); 
      }
      setState(1203);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- KU_ListIdentifiersContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifiersContext::KU_ListIdentifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ListIdentifierContext *> CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier() {
  return getRuleContexts<CypherParser::KU_ListIdentifierContext>();
}

CypherParser::KU_ListIdentifierContext* CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier(size_t i) {
  return getRuleContext<CypherParser::KU_ListIdentifierContext>(i);
}


size_t CypherParser::KU_ListIdentifiersContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifiers;
}


CypherParser::KU_ListIdentifiersContext* CypherParser::kU_ListIdentifiers() {
  KU_ListIdentifiersContext *_localctx = _tracker.createInstance<KU_ListIdentifiersContext>(_ctx, getState());
  enterRule(_localctx, 104, CypherParser::RuleKU_ListIdentifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1204);
    kU_ListIdentifier();
    setState(1208);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1205);
        kU_ListIdentifier(); 
      }
      setState(1210);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListIdentifierContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifierContext::KU_ListIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_ListIdentifierContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::KU_ListIdentifierContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifier;
}


CypherParser::KU_ListIdentifierContext* CypherParser::kU_ListIdentifier() {
  KU_ListIdentifierContext *_localctx = _tracker.createInstance<KU_ListIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 106, CypherParser::RuleKU_ListIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1211);
    match(CypherParser::T__6);
    setState(1213);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DecimalInteger) {
      setState(1212);
      oC_IntegerLiteral();
    }
    setState(1215);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnyCypherOptionContext ------------------------------------------------------------------

CypherParser::OC_AnyCypherOptionContext::OC_AnyCypherOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExplainContext* CypherParser::OC_AnyCypherOptionContext::oC_Explain() {
  return getRuleContext<CypherParser::OC_ExplainContext>(0);
}

CypherParser::OC_ProfileContext* CypherParser::OC_AnyCypherOptionContext::oC_Profile() {
  return getRuleContext<CypherParser::OC_ProfileContext>(0);
}


size_t CypherParser::OC_AnyCypherOptionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnyCypherOption;
}


CypherParser::OC_AnyCypherOptionContext* CypherParser::oC_AnyCypherOption() {
  OC_AnyCypherOptionContext *_localctx = _tracker.createInstance<OC_AnyCypherOptionContext>(_ctx, getState());
  enterRule(_localctx, 108, CypherParser::RuleOC_AnyCypherOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1219);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::EXPLAIN: {
        enterOuterAlt(_localctx, 1);
        setState(1217);
        oC_Explain();
        break;
      }

      case CypherParser::PROFILE: {
        enterOuterAlt(_localctx, 2);
        setState(1218);
        oC_Profile();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplainContext ------------------------------------------------------------------

CypherParser::OC_ExplainContext::OC_ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExplainContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}


size_t CypherParser::OC_ExplainContext::getRuleIndex() const {
  return CypherParser::RuleOC_Explain;
}


CypherParser::OC_ExplainContext* CypherParser::oC_Explain() {
  OC_ExplainContext *_localctx = _tracker.createInstance<OC_ExplainContext>(_ctx, getState());
  enterRule(_localctx, 110, CypherParser::RuleOC_Explain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1221);
    match(CypherParser::EXPLAIN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProfileContext ------------------------------------------------------------------

CypherParser::OC_ProfileContext::OC_ProfileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProfileContext::PROFILE() {
  return getToken(CypherParser::PROFILE, 0);
}


size_t CypherParser::OC_ProfileContext::getRuleIndex() const {
  return CypherParser::RuleOC_Profile;
}


CypherParser::OC_ProfileContext* CypherParser::oC_Profile() {
  OC_ProfileContext *_localctx = _tracker.createInstance<OC_ProfileContext>(_ctx, getState());
  enterRule(_localctx, 112, CypherParser::RuleOC_Profile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1223);
    match(CypherParser::PROFILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_TransactionContext ------------------------------------------------------------------

CypherParser::KU_TransactionContext::KU_TransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_TransactionContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_TransactionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ONLY() {
  return getToken(CypherParser::ONLY, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT_SKIP_CHECKPOINT() {
  return getToken(CypherParser::COMMIT_SKIP_CHECKPOINT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK_SKIP_CHECKPOINT() {
  return getToken(CypherParser::ROLLBACK_SKIP_CHECKPOINT, 0);
}


size_t CypherParser::KU_TransactionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Transaction;
}


CypherParser::KU_TransactionContext* CypherParser::kU_Transaction() {
  KU_TransactionContext *_localctx = _tracker.createInstance<KU_TransactionContext>(_ctx, getState());
  enterRule(_localctx, 114, CypherParser::RuleKU_Transaction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1239);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1225);
      match(CypherParser::BEGIN);
      setState(1226);
      match(CypherParser::SP);
      setState(1227);
      match(CypherParser::TRANSACTION);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1228);
      match(CypherParser::BEGIN);
      setState(1229);
      match(CypherParser::SP);
      setState(1230);
      match(CypherParser::TRANSACTION);
      setState(1231);
      match(CypherParser::SP);
      setState(1232);
      match(CypherParser::READ);
      setState(1233);
      match(CypherParser::SP);
      setState(1234);
      match(CypherParser::ONLY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1235);
      match(CypherParser::COMMIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1236);
      match(CypherParser::COMMIT_SKIP_CHECKPOINT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1237);
      match(CypherParser::ROLLBACK);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1238);
      match(CypherParser::ROLLBACK_SKIP_CHECKPOINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExtensionContext ------------------------------------------------------------------

CypherParser::KU_ExtensionContext::KU_ExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LoadExtensionContext* CypherParser::KU_ExtensionContext::kU_LoadExtension() {
  return getRuleContext<CypherParser::KU_LoadExtensionContext>(0);
}

CypherParser::KU_InstallExtensionContext* CypherParser::KU_ExtensionContext::kU_InstallExtension() {
  return getRuleContext<CypherParser::KU_InstallExtensionContext>(0);
}


size_t CypherParser::KU_ExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Extension;
}


CypherParser::KU_ExtensionContext* CypherParser::kU_Extension() {
  KU_ExtensionContext *_localctx = _tracker.createInstance<KU_ExtensionContext>(_ctx, getState());
  enterRule(_localctx, 116, CypherParser::RuleKU_Extension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1243);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 1);
        setState(1241);
        kU_LoadExtension();
        break;
      }

      case CypherParser::INSTALL: {
        enterOuterAlt(_localctx, 2);
        setState(1242);
        kU_InstallExtension();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadExtensionContext ------------------------------------------------------------------

CypherParser::KU_LoadExtensionContext::KU_LoadExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadExtensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_LoadExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_LoadExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadExtension;
}


CypherParser::KU_LoadExtensionContext* CypherParser::kU_LoadExtension() {
  KU_LoadExtensionContext *_localctx = _tracker.createInstance<KU_LoadExtensionContext>(_ctx, getState());
  enterRule(_localctx, 118, CypherParser::RuleKU_LoadExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1245);
    match(CypherParser::LOAD);
    setState(1246);
    match(CypherParser::SP);
    setState(1247);
    match(CypherParser::EXTENSION);
    setState(1248);
    match(CypherParser::SP);
    setState(1251);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
        setState(1249);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1250);
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InstallExtensionContext ------------------------------------------------------------------

CypherParser::KU_InstallExtensionContext::KU_InstallExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::INSTALL() {
  return getToken(CypherParser::INSTALL, 0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_InstallExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_InstallExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_InstallExtension;
}


CypherParser::KU_InstallExtensionContext* CypherParser::kU_InstallExtension() {
  KU_InstallExtensionContext *_localctx = _tracker.createInstance<KU_InstallExtensionContext>(_ctx, getState());
  enterRule(_localctx, 120, CypherParser::RuleKU_InstallExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1253);
    match(CypherParser::INSTALL);
    setState(1254);
    match(CypherParser::SP);
    setState(1255);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}

CypherParser::KU_ProjectGraphContext* CypherParser::OC_QueryContext::kU_ProjectGraph() {
  return getRuleContext<CypherParser::KU_ProjectGraphContext>(0);
}

tree::TerminalNode* CypherParser::OC_QueryContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}


CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 122, CypherParser::RuleOC_Query);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1261);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      setState(1257);
      kU_ProjectGraph();
      setState(1259);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1258);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(1263);
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ProjectGraphContext ------------------------------------------------------------------

CypherParser::KU_ProjectGraphContext::KU_ProjectGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ProjectGraphContext::PROJECT() {
  return getToken(CypherParser::PROJECT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ProjectGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ProjectGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_ProjectGraphContext::GRAPH() {
  return getToken(CypherParser::GRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ProjectGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_GraphProjectionTableItemsContext* CypherParser::KU_ProjectGraphContext::kU_GraphProjectionTableItems() {
  return getRuleContext<CypherParser::KU_GraphProjectionTableItemsContext>(0);
}


size_t CypherParser::KU_ProjectGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_ProjectGraph;
}


CypherParser::KU_ProjectGraphContext* CypherParser::kU_ProjectGraph() {
  KU_ProjectGraphContext *_localctx = _tracker.createInstance<KU_ProjectGraphContext>(_ctx, getState());
  enterRule(_localctx, 124, CypherParser::RuleKU_ProjectGraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1265);
    match(CypherParser::PROJECT);
    setState(1266);
    match(CypherParser::SP);
    setState(1267);
    match(CypherParser::GRAPH);
    setState(1268);
    match(CypherParser::SP);
    setState(1269);
    oC_SchemaName();
    setState(1271);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1270);
      match(CypherParser::SP);
    }
    setState(1273);
    match(CypherParser::T__1);
    setState(1275);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1274);
      match(CypherParser::SP);
    }
    setState(1277);
    kU_GraphProjectionTableItems();
    setState(1279);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1278);
      match(CypherParser::SP);
    }
    setState(1281);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionTableItemsContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionTableItemsContext::KU_GraphProjectionTableItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_GraphProjectionTableItemContext *> CypherParser::KU_GraphProjectionTableItemsContext::kU_GraphProjectionTableItem() {
  return getRuleContexts<CypherParser::KU_GraphProjectionTableItemContext>();
}

CypherParser::KU_GraphProjectionTableItemContext* CypherParser::KU_GraphProjectionTableItemsContext::kU_GraphProjectionTableItem(size_t i) {
  return getRuleContext<CypherParser::KU_GraphProjectionTableItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionTableItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionTableItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_GraphProjectionTableItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionTableItems;
}


CypherParser::KU_GraphProjectionTableItemsContext* CypherParser::kU_GraphProjectionTableItems() {
  KU_GraphProjectionTableItemsContext *_localctx = _tracker.createInstance<KU_GraphProjectionTableItemsContext>(_ctx, getState());
  enterRule(_localctx, 126, CypherParser::RuleKU_GraphProjectionTableItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1283);
    kU_GraphProjectionTableItem();
    setState(1294);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1285);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1284);
          match(CypherParser::SP);
        }
        setState(1287);
        match(CypherParser::T__2);
        setState(1289);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1288);
          match(CypherParser::SP);
        }
        setState(1291);
        kU_GraphProjectionTableItem(); 
      }
      setState(1296);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ReturnContext *> CypherParser::OC_RegularQueryContext::oC_Return() {
  return getRuleContexts<CypherParser::OC_ReturnContext>();
}

CypherParser::OC_ReturnContext* CypherParser::OC_RegularQueryContext::oC_Return(size_t i) {
  return getRuleContext<CypherParser::OC_ReturnContext>(i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}


CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 128, CypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1318);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1297);
      oC_SingleQuery();
      setState(1304);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1299);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1298);
            match(CypherParser::SP);
          }
          setState(1301);
          oC_Union(); 
        }
        setState(1306);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1311); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1307);
                oC_Return();
                setState(1309);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1308);
                  match(CypherParser::SP);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1313); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1315);
      oC_SingleQuery();
       notifyReturnNotAtEnd(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}


CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 130, CypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1332);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1320);
      match(CypherParser::UNION);
      setState(1321);
      match(CypherParser::SP);
      setState(1322);
      match(CypherParser::ALL);
      setState(1324);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1323);
        match(CypherParser::SP);
      }
      setState(1326);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1327);
      match(CypherParser::UNION);
      setState(1329);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1328);
        match(CypherParser::SP);
      }
      setState(1331);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}


CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 132, CypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1336);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1334);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1335);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}


CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 134, CypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1383);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1344);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::CALL || ((((_la - 100) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 100)) & 274878177285) != 0)) {
        setState(1338);
        oC_ReadingClause();
        setState(1340);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1339);
          match(CypherParser::SP);
        }
        setState(1346);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1347);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1354);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::CALL || ((((_la - 100) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 100)) & 274878177285) != 0)) {
        setState(1348);
        oC_ReadingClause();
        setState(1350);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1349);
          match(CypherParser::SP);
        }
        setState(1356);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1357);
      oC_UpdatingClause();
      setState(1364);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1359);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1358);
            match(CypherParser::SP);
          }
          setState(1361);
          oC_UpdatingClause(); 
        }
        setState(1366);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
      }
      setState(1371);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
      case 1: {
        setState(1368);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1367);
          match(CypherParser::SP);
        }
        setState(1370);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1377); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1373);
        oC_ReadingClause();
        setState(1375);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
        case 1: {
          setState(1374);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(1379); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == CypherParser::CALL || ((((_la - 100) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 100)) & 274878177285) != 0));
       notifyQueryNotConcludeWithReturn(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::KU_QueryPartContext *> CypherParser::OC_MultiPartQueryContext::kU_QueryPart() {
  return getRuleContexts<CypherParser::KU_QueryPartContext>();
}

CypherParser::KU_QueryPartContext* CypherParser::OC_MultiPartQueryContext::kU_QueryPart(size_t i) {
  return getRuleContext<CypherParser::KU_QueryPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}


CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 136, CypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1389); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1385);
              kU_QueryPart();
              setState(1387);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(1386);
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1391); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1393);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_QueryPartContext ------------------------------------------------------------------

CypherParser::KU_QueryPartContext::KU_QueryPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_WithContext* CypherParser::KU_QueryPartContext::oC_With() {
  return getRuleContext<CypherParser::OC_WithContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::KU_QueryPartContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::KU_QueryPartContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::KU_QueryPartContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::KU_QueryPartContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_QueryPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_QueryPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_QueryPartContext::getRuleIndex() const {
  return CypherParser::RuleKU_QueryPart;
}


CypherParser::KU_QueryPartContext* CypherParser::kU_QueryPart() {
  KU_QueryPartContext *_localctx = _tracker.createInstance<KU_QueryPartContext>(_ctx, getState());
  enterRule(_localctx, 138, CypherParser::RuleKU_QueryPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1401);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::CALL || ((((_la - 100) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 100)) & 274878177285) != 0)) {
      setState(1395);
      oC_ReadingClause();
      setState(1397);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1396);
        match(CypherParser::SP);
      }
      setState(1403);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1410);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 2305843284091601185) != 0)) {
      setState(1404);
      oC_UpdatingClause();
      setState(1406);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1405);
        match(CypherParser::SP);
      }
      setState(1412);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1413);
    oC_With();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}


CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 140, CypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1419);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(1415);
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(1416);
        oC_Merge();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(1417);
        oC_Set();
        break;
      }

      case CypherParser::DELETE:
      case CypherParser::DETACH: {
        enterOuterAlt(_localctx, 4);
        setState(1418);
        oC_Delete();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::KU_InQueryCallContext* CypherParser::OC_ReadingClauseContext::kU_InQueryCall() {
  return getRuleContext<CypherParser::KU_InQueryCallContext>(0);
}

CypherParser::KU_LoadFromContext* CypherParser::OC_ReadingClauseContext::kU_LoadFrom() {
  return getRuleContext<CypherParser::KU_LoadFromContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}


CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 142, CypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1425);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::MATCH:
      case CypherParser::OPTIONAL: {
        enterOuterAlt(_localctx, 1);
        setState(1421);
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(1422);
        oC_Unwind();
        break;
      }

      case CypherParser::CALL:
      case CypherParser::PROJECT: {
        enterOuterAlt(_localctx, 3);
        setState(1423);
        kU_InQueryCall();
        break;
      }

      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 4);
        setState(1424);
        kU_LoadFrom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadFromContext ------------------------------------------------------------------

CypherParser::KU_LoadFromContext::KU_LoadFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_ScanSourceContext* CypherParser::KU_LoadFromContext::kU_ScanSource() {
  return getRuleContext<CypherParser::KU_ScanSourceContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::HEADERS() {
  return getToken(CypherParser::HEADERS, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_LoadFromContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_LoadFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_LoadFromContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_LoadFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadFrom;
}


CypherParser::KU_LoadFromContext* CypherParser::kU_LoadFrom() {
  KU_LoadFromContext *_localctx = _tracker.createInstance<KU_LoadFromContext>(_ctx, getState());
  enterRule(_localctx, 144, CypherParser::RuleKU_LoadFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1427);
    match(CypherParser::LOAD);
    setState(1445);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      setState(1428);
      match(CypherParser::SP);
      setState(1429);
      match(CypherParser::WITH);
      setState(1430);
      match(CypherParser::SP);
      setState(1431);
      match(CypherParser::HEADERS);
      setState(1433);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1432);
        match(CypherParser::SP);
      }
      setState(1435);
      match(CypherParser::T__1);
      setState(1437);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1436);
        match(CypherParser::SP);
      }
      setState(1439);
      kU_PropertyDefinitions();
      setState(1441);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1440);
        match(CypherParser::SP);
      }
      setState(1443);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
    setState(1447);
    match(CypherParser::SP);
    setState(1448);
    match(CypherParser::FROM);
    setState(1449);
    match(CypherParser::SP);
    setState(1450);
    kU_ScanSource();
    setState(1455);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
      setState(1452);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1451);
        match(CypherParser::SP);
      }
      setState(1454);
      kU_ParsingOptions();
      break;
    }

    default:
      break;
    }
    setState(1461);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      setState(1458);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1457);
        match(CypherParser::SP);
      }
      setState(1460);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InQueryCallContext ------------------------------------------------------------------

CypherParser::KU_InQueryCallContext::KU_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_InQueryCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_InQueryCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::KU_ProjectGraphContext* CypherParser::KU_InQueryCallContext::kU_ProjectGraph() {
  return getRuleContext<CypherParser::KU_ProjectGraphContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_InQueryCallContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_InQueryCall;
}


CypherParser::KU_InQueryCallContext* CypherParser::kU_InQueryCall() {
  KU_InQueryCallContext *_localctx = _tracker.createInstance<KU_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 146, CypherParser::RuleKU_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1467);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::PROJECT) {
      setState(1463);
      kU_ProjectGraph();
      setState(1465);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1464);
        match(CypherParser::SP);
      }
    }
    setState(1469);
    match(CypherParser::CALL);
    setState(1470);
    match(CypherParser::SP);
    setState(1471);
    oC_FunctionInvocation();
    setState(1476);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
    case 1: {
      setState(1473);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1472);
        match(CypherParser::SP);
      }
      setState(1475);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionTableItemContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionTableItemContext::KU_GraphProjectionTableItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_GraphProjectionTableItemContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_GraphProjectionColumnItemsContext* CypherParser::KU_GraphProjectionTableItemContext::kU_GraphProjectionColumnItems() {
  return getRuleContext<CypherParser::KU_GraphProjectionColumnItemsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionTableItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionTableItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_GraphProjectionTableItemContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionTableItem;
}


CypherParser::KU_GraphProjectionTableItemContext* CypherParser::kU_GraphProjectionTableItem() {
  KU_GraphProjectionTableItemContext *_localctx = _tracker.createInstance<KU_GraphProjectionTableItemContext>(_ctx, getState());
  enterRule(_localctx, 148, CypherParser::RuleKU_GraphProjectionTableItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1478);
    oC_SchemaName();
    setState(1492);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      setState(1480);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1479);
        match(CypherParser::SP);
      }
      setState(1482);
      match(CypherParser::T__8);
      setState(1484);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1483);
        match(CypherParser::SP);
      }
      setState(1486);
      kU_GraphProjectionColumnItems();
      setState(1488);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1487);
        match(CypherParser::SP);
      }
      setState(1490);
      match(CypherParser::T__9);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionColumnItemsContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionColumnItemsContext::KU_GraphProjectionColumnItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_GraphProjectionColumnItemContext *> CypherParser::KU_GraphProjectionColumnItemsContext::kU_GraphProjectionColumnItem() {
  return getRuleContexts<CypherParser::KU_GraphProjectionColumnItemContext>();
}

CypherParser::KU_GraphProjectionColumnItemContext* CypherParser::KU_GraphProjectionColumnItemsContext::kU_GraphProjectionColumnItem(size_t i) {
  return getRuleContext<CypherParser::KU_GraphProjectionColumnItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionColumnItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionColumnItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_GraphProjectionColumnItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionColumnItems;
}


CypherParser::KU_GraphProjectionColumnItemsContext* CypherParser::kU_GraphProjectionColumnItems() {
  KU_GraphProjectionColumnItemsContext *_localctx = _tracker.createInstance<KU_GraphProjectionColumnItemsContext>(_ctx, getState());
  enterRule(_localctx, 150, CypherParser::RuleKU_GraphProjectionColumnItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1494);
    kU_GraphProjectionColumnItem();
    setState(1505);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1496);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1495);
          match(CypherParser::SP);
        }
        setState(1498);
        match(CypherParser::T__2);
        setState(1500);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1499);
          match(CypherParser::SP);
        }
        setState(1502);
        kU_GraphProjectionColumnItem(); 
      }
      setState(1507);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_GraphProjectionColumnItemContext ------------------------------------------------------------------

CypherParser::KU_GraphProjectionColumnItemContext::KU_GraphProjectionColumnItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_GraphProjectionColumnItemContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_GraphProjectionColumnItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_GraphProjectionColumnItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_DefaultContext* CypherParser::KU_GraphProjectionColumnItemContext::kU_Default() {
  return getRuleContext<CypherParser::KU_DefaultContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_GraphProjectionColumnItemContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_GraphProjectionColumnItemContext::getRuleIndex() const {
  return CypherParser::RuleKU_GraphProjectionColumnItem;
}


CypherParser::KU_GraphProjectionColumnItemContext* CypherParser::kU_GraphProjectionColumnItem() {
  KU_GraphProjectionColumnItemContext *_localctx = _tracker.createInstance<KU_GraphProjectionColumnItemContext>(_ctx, getState());
  enterRule(_localctx, 152, CypherParser::RuleKU_GraphProjectionColumnItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1508);
    oC_PropertyKeyName();
    setState(1511);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
    case 1: {
      setState(1509);
      match(CypherParser::SP);
      setState(1510);
      kU_Default();
      break;
    }

    default:
      break;
    }
    setState(1515);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
    case 1: {
      setState(1513);
      match(CypherParser::SP);
      setState(1514);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_HintContext* CypherParser::OC_MatchContext::kU_Hint() {
  return getRuleContext<CypherParser::KU_HintContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}


CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 154, CypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1519);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
      setState(1517);
      match(CypherParser::OPTIONAL);
      setState(1518);
      match(CypherParser::SP);
    }
    setState(1521);
    match(CypherParser::MATCH);
    setState(1523);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1522);
      match(CypherParser::SP);
    }
    setState(1525);
    oC_Pattern();
    setState(1528);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
    case 1: {
      setState(1526);
      match(CypherParser::SP);
      setState(1527);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(1532);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
    case 1: {
      setState(1530);
      match(CypherParser::SP);
      setState(1531);
      kU_Hint();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_HintContext ------------------------------------------------------------------

CypherParser::KU_HintContext::KU_HintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_HintContext::HINT() {
  return getToken(CypherParser::HINT, 0);
}

tree::TerminalNode* CypherParser::KU_HintContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_JoinNodeContext* CypherParser::KU_HintContext::kU_JoinNode() {
  return getRuleContext<CypherParser::KU_JoinNodeContext>(0);
}


size_t CypherParser::KU_HintContext::getRuleIndex() const {
  return CypherParser::RuleKU_Hint;
}


CypherParser::KU_HintContext* CypherParser::kU_Hint() {
  KU_HintContext *_localctx = _tracker.createInstance<KU_HintContext>(_ctx, getState());
  enterRule(_localctx, 156, CypherParser::RuleKU_Hint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1534);
    match(CypherParser::HINT);
    setState(1535);
    match(CypherParser::SP);
    setState(1536);
    kU_JoinNode(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_JoinNodeContext ------------------------------------------------------------------

CypherParser::KU_JoinNodeContext::KU_JoinNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_JoinNodeContext *> CypherParser::KU_JoinNodeContext::kU_JoinNode() {
  return getRuleContexts<CypherParser::KU_JoinNodeContext>();
}

CypherParser::KU_JoinNodeContext* CypherParser::KU_JoinNodeContext::kU_JoinNode(size_t i) {
  return getRuleContext<CypherParser::KU_JoinNodeContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_JoinNodeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_JoinNodeContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_JoinNodeContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::JOIN() {
  return getToken(CypherParser::JOIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_JoinNodeContext::MULTI_JOIN() {
  return getTokens(CypherParser::MULTI_JOIN);
}

tree::TerminalNode* CypherParser::KU_JoinNodeContext::MULTI_JOIN(size_t i) {
  return getToken(CypherParser::MULTI_JOIN, i);
}


size_t CypherParser::KU_JoinNodeContext::getRuleIndex() const {
  return CypherParser::RuleKU_JoinNode;
}



CypherParser::KU_JoinNodeContext* CypherParser::kU_JoinNode() {
   return kU_JoinNode(0);
}

CypherParser::KU_JoinNodeContext* CypherParser::kU_JoinNode(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_JoinNodeContext *_localctx = _tracker.createInstance<KU_JoinNodeContext>(_ctx, parentState);
  CypherParser::KU_JoinNodeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 158;
  enterRecursionRule(_localctx, 158, CypherParser::RuleKU_JoinNode, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1550);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__1: {
        setState(1539);
        match(CypherParser::T__1);
        setState(1541);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1540);
          match(CypherParser::SP);
        }
        setState(1543);
        kU_JoinNode(0);
        setState(1545);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1544);
          match(CypherParser::SP);
        }
        setState(1547);
        match(CypherParser::T__3);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1549);
        oC_SchemaName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1568);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1566);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<KU_JoinNodeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleKU_JoinNode);
          setState(1552);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(1553);
          match(CypherParser::SP);
          setState(1554);
          match(CypherParser::JOIN);
          setState(1555);
          match(CypherParser::SP);
          setState(1556);
          kU_JoinNode(5);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<KU_JoinNodeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleKU_JoinNode);
          setState(1557);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1562); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(1558);
                    match(CypherParser::SP);
                    setState(1559);
                    match(CypherParser::MULTI_JOIN);
                    setState(1560);
                    match(CypherParser::SP);
                    setState(1561);
                    oC_SchemaName();
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(1564); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        default:
          break;
        } 
      }
      setState(1570);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}


CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 160, CypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1571);
    match(CypherParser::UNWIND);
    setState(1573);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1572);
      match(CypherParser::SP);
    }
    setState(1575);
    oC_Expression();
    setState(1576);
    match(CypherParser::SP);
    setState(1577);
    match(CypherParser::AS);
    setState(1578);
    match(CypherParser::SP);
    setState(1579);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}


CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 162, CypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1581);
    match(CypherParser::CREATE);
    setState(1583);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1582);
      match(CypherParser::SP);
    }
    setState(1585);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MergeContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}


CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 164, CypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1587);
    match(CypherParser::MERGE);
    setState(1589);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1588);
      match(CypherParser::SP);
    }
    setState(1591);
    oC_Pattern();
    setState(1596);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1592);
        match(CypherParser::SP);
        setState(1593);
        oC_MergeAction(); 
      }
      setState(1598);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}


CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 166, CypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1609);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1599);
      match(CypherParser::ON);
      setState(1600);
      match(CypherParser::SP);
      setState(1601);
      match(CypherParser::MATCH);
      setState(1602);
      match(CypherParser::SP);
      setState(1603);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1604);
      match(CypherParser::ON);
      setState(1605);
      match(CypherParser::SP);
      setState(1606);
      match(CypherParser::CREATE);
      setState(1607);
      match(CypherParser::SP);
      setState(1608);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}


CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 168, CypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1611);
    match(CypherParser::SET);
    setState(1613);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1612);
      match(CypherParser::SP);
    }
    setState(1615);
    oC_SetItem();
    setState(1626);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1617);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1616);
          match(CypherParser::SP);
        }
        setState(1619);
        match(CypherParser::T__2);
        setState(1621);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1620);
          match(CypherParser::SP);
        }
        setState(1623);
        oC_SetItem(); 
      }
      setState(1628);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}


CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 170, CypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1629);
    oC_PropertyExpression();
    setState(1631);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1630);
      match(CypherParser::SP);
    }
    setState(1633);
    match(CypherParser::T__5);
    setState(1635);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1634);
      match(CypherParser::SP);
    }
    setState(1637);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}


CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 172, CypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1641);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DETACH) {
      setState(1639);
      match(CypherParser::DETACH);
      setState(1640);
      match(CypherParser::SP);
    }
    setState(1643);
    match(CypherParser::DELETE);
    setState(1645);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1644);
      match(CypherParser::SP);
    }
    setState(1647);
    oC_Expression();
    setState(1658);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1649);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1648);
          match(CypherParser::SP);
        }
        setState(1651);
        match(CypherParser::T__2);
        setState(1653);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1652);
          match(CypherParser::SP);
        }
        setState(1655);
        oC_Expression(); 
      }
      setState(1660);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}


CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 174, CypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1661);
    match(CypherParser::WITH);
    setState(1662);
    oC_ProjectionBody();
    setState(1667);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx)) {
    case 1: {
      setState(1664);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1663);
        match(CypherParser::SP);
      }
      setState(1666);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}


CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 176, CypherParser::RuleOC_Return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1669);
    match(CypherParser::RETURN);
    setState(1670);
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}


CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
  enterRule(_localctx, 178, CypherParser::RuleOC_ProjectionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1676);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
    case 1: {
      setState(1673);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1672);
        match(CypherParser::SP);
      }
      setState(1675);
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(1678);
    match(CypherParser::SP);
    setState(1679);
    oC_ProjectionItems();
    setState(1682);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
    case 1: {
      setState(1680);
      match(CypherParser::SP);
      setState(1681);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(1686);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx)) {
    case 1: {
      setState(1684);
      match(CypherParser::SP);
      setState(1685);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(1690);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
    case 1: {
      setState(1688);
      match(CypherParser::SP);
      setState(1689);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}


CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 180, CypherParser::RuleOC_ProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1720);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1692);
        match(CypherParser::STAR);
        setState(1703);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1694);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1693);
              match(CypherParser::SP);
            }
            setState(1696);
            match(CypherParser::T__2);
            setState(1698);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1697);
              match(CypherParser::SP);
            }
            setState(1700);
            oC_ProjectionItem(); 
          }
          setState(1705);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx);
        }
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__6:
      case CypherParser::T__8:
      case CypherParser::T__25:
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::CASE:
      case CypherParser::CAST:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXISTS:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::FALSE:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::NOT:
      case CypherParser::NULL_:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TRUE:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::MINUS:
      case CypherParser::StringLiteral:
      case CypherParser::DecimalInteger:
      case CypherParser::HexLetter:
      case CypherParser::RegularDecimalReal:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(1706);
        oC_ProjectionItem();
        setState(1717);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1708);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1707);
              match(CypherParser::SP);
            }
            setState(1710);
            match(CypherParser::T__2);
            setState(1712);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1711);
              match(CypherParser::SP);
            }
            setState(1714);
            oC_ProjectionItem(); 
          }
          setState(1719);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}


CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
  enterRule(_localctx, 182, CypherParser::RuleOC_ProjectionItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1729);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1722);
      oC_Expression();
      setState(1723);
      match(CypherParser::SP);
      setState(1724);
      match(CypherParser::AS);
      setState(1725);
      match(CypherParser::SP);
      setState(1726);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1728);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}


CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 184, CypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1731);
    match(CypherParser::ORDER);
    setState(1732);
    match(CypherParser::SP);
    setState(1733);
    match(CypherParser::BY);
    setState(1734);
    match(CypherParser::SP);
    setState(1735);
    oC_SortItem();
    setState(1743);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(1736);
      match(CypherParser::T__2);
      setState(1738);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1737);
        match(CypherParser::SP);
      }
      setState(1740);
      oC_SortItem();
      setState(1745);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}


CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 186, CypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1746);
    match(CypherParser::L_SKIP);
    setState(1747);
    match(CypherParser::SP);
    setState(1748);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}


CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 188, CypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1750);
    match(CypherParser::LIMIT);
    setState(1751);
    match(CypherParser::SP);
    setState(1752);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}


CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 190, CypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1754);
    oC_Expression();
    setState(1759);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
    case 1: {
      setState(1756);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1755);
        match(CypherParser::SP);
      }
      setState(1758);
      _la = _input->LA(1);
      if (!(((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 6291459) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}


CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 192, CypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1761);
    match(CypherParser::WHERE);
    setState(1762);
    match(CypherParser::SP);
    setState(1763);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}


CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 194, CypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1765);
    oC_PatternPart();
    setState(1776);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1767);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1766);
          match(CypherParser::SP);
        }
        setState(1769);
        match(CypherParser::T__2);
        setState(1771);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1770);
          match(CypherParser::SP);
        }
        setState(1773);
        oC_PatternPart(); 
      }
      setState(1778);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}


CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 196, CypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1790);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1779);
        oC_Variable();
        setState(1781);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1780);
          match(CypherParser::SP);
        }
        setState(1783);
        match(CypherParser::T__5);
        setState(1785);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1784);
          match(CypherParser::SP);
        }
        setState(1787);
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(1789);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}


CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 198, CypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1792);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}


CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 200, CypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1808);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1794);
      oC_NodePattern();
      setState(1801);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1796);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1795);
            match(CypherParser::SP);
          }
          setState(1798);
          oC_PatternElementChain(); 
        }
        setState(1803);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1804);
      match(CypherParser::T__1);
      setState(1805);
      oC_PatternElement();
      setState(1806);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_NodePatternContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}


CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 202, CypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1810);
    match(CypherParser::T__1);
    setState(1812);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1811);
      match(CypherParser::SP);
    }
    setState(1818);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 46) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 46)) & 8022426305271089045) != 0) || ((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 1267738050104189) != 0)) {
      setState(1814);
      oC_Variable();
      setState(1816);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1815);
        match(CypherParser::SP);
      }
    }
    setState(1824);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1820);
      oC_NodeLabels();
      setState(1822);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1821);
        match(CypherParser::SP);
      }
    }
    setState(1830);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1826);
      kU_Properties();
      setState(1828);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1827);
        match(CypherParser::SP);
      }
    }
    setState(1832);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}


CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 204, CypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1834);
    oC_RelationshipPattern();
    setState(1836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1835);
      match(CypherParser::SP);
    }
    setState(1838);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}


CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 206, CypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1884);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1840);
      oC_LeftArrowHead();
      setState(1842);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1841);
        match(CypherParser::SP);
      }
      setState(1844);
      oC_Dash();
      setState(1846);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 271, _ctx)) {
      case 1: {
        setState(1845);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1849);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1848);
        oC_RelationshipDetail();
      }
      setState(1852);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1851);
        match(CypherParser::SP);
      }
      setState(1854);
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1856);
      oC_Dash();
      setState(1858);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
      case 1: {
        setState(1857);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1861);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1860);
        oC_RelationshipDetail();
      }
      setState(1864);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1863);
        match(CypherParser::SP);
      }
      setState(1866);
      oC_Dash();
      setState(1868);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1867);
        match(CypherParser::SP);
      }
      setState(1870);
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1872);
      oC_Dash();
      setState(1874);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx)) {
      case 1: {
        setState(1873);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1877);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1876);
        oC_RelationshipDetail();
      }
      setState(1880);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1879);
        match(CypherParser::SP);
      }
      setState(1882);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_RelationshipDetailContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}


CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 208, CypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1886);
    match(CypherParser::T__6);
    setState(1888);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1887);
      match(CypherParser::SP);
    }
    setState(1894);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 46) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 46)) & 8022426305271089045) != 0) || ((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 1267738050104189) != 0)) {
      setState(1890);
      oC_Variable();
      setState(1892);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1891);
        match(CypherParser::SP);
      }
    }
    setState(1900);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::COLON) {
      setState(1896);
      oC_RelationshipTypes();
      setState(1898);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1897);
        match(CypherParser::SP);
      }
    }
    setState(1906);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1902);
      oC_RangeLiteral();
      setState(1904);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1903);
        match(CypherParser::SP);
      }
    }
    setState(1912);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1908);
      kU_Properties();
      setState(1910);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1909);
        match(CypherParser::SP);
      }
    }
    setState(1914);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertiesContext ------------------------------------------------------------------

CypherParser::KU_PropertiesContext::KU_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_PropertiesContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertiesContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_PropertiesContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertiesContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleKU_Properties;
}


CypherParser::KU_PropertiesContext* CypherParser::kU_Properties() {
  KU_PropertiesContext *_localctx = _tracker.createInstance<KU_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 210, CypherParser::RuleKU_Properties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1916);
    match(CypherParser::T__8);
    setState(1918);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1917);
      match(CypherParser::SP);
    }
    setState(1953);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 46) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 46)) & 8022426305271089045) != 0) || ((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 1267738050104189) != 0)) {
      setState(1920);
      oC_PropertyKeyName();
      setState(1922);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1921);
        match(CypherParser::SP);
      }
      setState(1924);
      match(CypherParser::COLON);
      setState(1926);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1925);
        match(CypherParser::SP);
      }
      setState(1928);
      oC_Expression();
      setState(1930);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1929);
        match(CypherParser::SP);
      }
      setState(1950);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(1932);
        match(CypherParser::T__2);
        setState(1934);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1933);
          match(CypherParser::SP);
        }
        setState(1936);
        oC_PropertyKeyName();
        setState(1938);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1937);
          match(CypherParser::SP);
        }
        setState(1940);
        match(CypherParser::COLON);
        setState(1942);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1941);
          match(CypherParser::SP);
        }
        setState(1944);
        oC_Expression();
        setState(1946);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1945);
          match(CypherParser::SP);
        }
        setState(1952);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1955);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::COLON() {
  return getTokens(CypherParser::COLON);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::COLON(size_t i) {
  return getToken(CypherParser::COLON, i);
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}


CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 212, CypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1957);
    match(CypherParser::COLON);
    setState(1959);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1958);
      match(CypherParser::SP);
    }
    setState(1961);
    oC_RelTypeName();
    setState(1975);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1963);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1962);
          match(CypherParser::SP);
        }
        setState(1965);
        match(CypherParser::T__10);
        setState(1967);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::COLON) {
          setState(1966);
          match(CypherParser::COLON);
        }
        setState(1970);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1969);
          match(CypherParser::SP);
        }
        setState(1972);
        oC_RelTypeName(); 
      }
      setState(1977);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NodeLabelContext *> CypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<CypherParser::OC_NodeLabelContext>();
}

CypherParser::OC_NodeLabelContext* CypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<CypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}


CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 214, CypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1978);
    oC_NodeLabel();
    setState(1985);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1980);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1979);
          match(CypherParser::SP);
        }
        setState(1982);
        oC_NodeLabel(); 
      }
      setState(1987);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<CypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabel;
}


CypherParser::OC_NodeLabelContext* CypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
  enterRule(_localctx, 216, CypherParser::RuleOC_NodeLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1988);
    match(CypherParser::COLON);
    setState(1990);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1989);
      match(CypherParser::SP);
    }
    setState(1992);
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SHORTEST() {
  return getToken(CypherParser::SHORTEST, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::OC_RangeLiteralContext::kU_RecursiveRelationshipComprehension() {
  return getRuleContext<CypherParser::KU_RecursiveRelationshipComprehensionContext>(0);
}

CypherParser::OC_LowerBoundContext* CypherParser::OC_RangeLiteralContext::oC_LowerBound() {
  return getRuleContext<CypherParser::OC_LowerBoundContext>(0);
}

CypherParser::OC_UpperBoundContext* CypherParser::OC_RangeLiteralContext::oC_UpperBound() {
  return getRuleContext<CypherParser::OC_UpperBoundContext>(0);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}


CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 218, CypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1994);
    match(CypherParser::STAR);
    setState(1996);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx)) {
    case 1: {
      setState(1995);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2002);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1998);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::ALL: {
        setState(1999);
        match(CypherParser::ALL);
        setState(2000);
        match(CypherParser::SP);
        setState(2001);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__7:
      case CypherParser::T__8:
      case CypherParser::T__11:
      case CypherParser::DecimalInteger:
      case CypherParser::SP: {
        break;
      }

    default:
      break;
    }
    setState(2005);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx)) {
    case 1: {
      setState(2004);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2021);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 316, _ctx)) {
    case 1: {
      setState(2008);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(2007);
        oC_LowerBound();
      }
      setState(2011);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2010);
        match(CypherParser::SP);
      }
      setState(2013);
      match(CypherParser::T__11);
      setState(2015);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
      case 1: {
        setState(2014);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(2018);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(2017);
        oC_UpperBound();
      }
      break;
    }

    case 2: {
      setState(2020);
      oC_IntegerLiteral();
      break;
    }

    default:
      break;
    }
    setState(2027);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx)) {
    case 1: {
      setState(2024);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2023);
        match(CypherParser::SP);
      }
      setState(2026);
      kU_RecursiveRelationshipComprehension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveRelationshipComprehensionContext ------------------------------------------------------------------

CypherParser::KU_RecursiveRelationshipComprehensionContext::KU_RecursiveRelationshipComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveRelationshipComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveRelationshipComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateRelProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateRelProjectionItemsContext>(0);
}

CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateNodeProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateNodeProjectionItemsContext>(0);
}


size_t CypherParser::KU_RecursiveRelationshipComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveRelationshipComprehension;
}


CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::kU_RecursiveRelationshipComprehension() {
  KU_RecursiveRelationshipComprehensionContext *_localctx = _tracker.createInstance<KU_RecursiveRelationshipComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 220, CypherParser::RuleKU_RecursiveRelationshipComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2029);
    match(CypherParser::T__1);
    setState(2031);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2030);
      match(CypherParser::SP);
    }
    setState(2033);
    oC_Variable();
    setState(2035);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2034);
      match(CypherParser::SP);
    }
    setState(2037);
    match(CypherParser::T__2);
    setState(2039);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2038);
      match(CypherParser::SP);
    }
    setState(2041);
    oC_Variable();
    setState(2053);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx)) {
    case 1: {
      setState(2043);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2042);
        match(CypherParser::SP);
      }
      setState(2045);
      match(CypherParser::T__10);
      setState(2047);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2046);
        match(CypherParser::SP);
      }
      setState(2049);
      oC_Where();
      setState(2051);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx)) {
      case 1: {
        setState(2050);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(2074);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__10 || _la == CypherParser::SP) {
      setState(2056);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2055);
        match(CypherParser::SP);
      }
      setState(2058);
      match(CypherParser::T__10);
      setState(2060);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2059);
        match(CypherParser::SP);
      }
      setState(2062);
      kU_IntermediateRelProjectionItems();
      setState(2064);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2063);
        match(CypherParser::SP);
      }
      setState(2066);
      match(CypherParser::T__2);
      setState(2068);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2067);
        match(CypherParser::SP);
      }
      setState(2070);
      kU_IntermediateNodeProjectionItems();
      setState(2072);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2071);
        match(CypherParser::SP);
      }
    }
    setState(2076);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateNodeProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateNodeProjectionItemsContext::KU_IntermediateNodeProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateNodeProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateNodeProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateNodeProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateNodeProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateNodeProjectionItems;
}


CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::kU_IntermediateNodeProjectionItems() {
  KU_IntermediateNodeProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateNodeProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 222, CypherParser::RuleKU_IntermediateNodeProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2078);
    match(CypherParser::T__8);
    setState(2080);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 332, _ctx)) {
    case 1: {
      setState(2079);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2083);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5195676226290711932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -2359750048497068901) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 653717439713) != 0)) {
      setState(2082);
      oC_ProjectionItems();
    }
    setState(2086);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2085);
      match(CypherParser::SP);
    }
    setState(2088);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateRelProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateRelProjectionItemsContext::KU_IntermediateRelProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateRelProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateRelProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateRelProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateRelProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateRelProjectionItems;
}


CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::kU_IntermediateRelProjectionItems() {
  KU_IntermediateRelProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateRelProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 224, CypherParser::RuleKU_IntermediateRelProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2090);
    match(CypherParser::T__8);
    setState(2092);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx)) {
    case 1: {
      setState(2091);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2095);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5195676226290711932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -2359750048497068901) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 653717439713) != 0)) {
      setState(2094);
      oC_ProjectionItems();
    }
    setState(2098);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2097);
      match(CypherParser::SP);
    }
    setState(2100);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LowerBoundContext ------------------------------------------------------------------

CypherParser::OC_LowerBoundContext::OC_LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LowerBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_LowerBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_LowerBound;
}


CypherParser::OC_LowerBoundContext* CypherParser::oC_LowerBound() {
  OC_LowerBoundContext *_localctx = _tracker.createInstance<OC_LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 226, CypherParser::RuleOC_LowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2102);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpperBoundContext ------------------------------------------------------------------

CypherParser::OC_UpperBoundContext::OC_UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UpperBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_UpperBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpperBound;
}


CypherParser::OC_UpperBoundContext* CypherParser::oC_UpperBound() {
  OC_UpperBoundContext *_localctx = _tracker.createInstance<OC_UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 228, CypherParser::RuleOC_UpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2104);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}


CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 230, CypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2106);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}


CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 232, CypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2108);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}


CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 234, CypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2110);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}


CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 236, CypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2112);
    oC_XorExpression();
    setState(2119);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2113);
        match(CypherParser::SP);
        setState(2114);
        match(CypherParser::OR);
        setState(2115);
        match(CypherParser::SP);
        setState(2116);
        oC_XorExpression(); 
      }
      setState(2121);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}


CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 238, CypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2122);
    oC_AndExpression();
    setState(2129);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2123);
        match(CypherParser::SP);
        setState(2124);
        match(CypherParser::XOR);
        setState(2125);
        match(CypherParser::SP);
        setState(2126);
        oC_AndExpression(); 
      }
      setState(2131);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}


CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 240, CypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2132);
    oC_NotExpression();
    setState(2139);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 340, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2133);
        match(CypherParser::SP);
        setState(2134);
        match(CypherParser::AND);
        setState(2135);
        match(CypherParser::SP);
        setState(2136);
        oC_NotExpression(); 
      }
      setState(2141);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 340, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(CypherParser::NOT);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(CypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}


CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 242, CypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2148);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(2142);
      match(CypherParser::NOT);
      setState(2144);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2143);
        match(CypherParser::SP);
      }
      setState(2150);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2151);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseOrOperatorExpressionContext *> CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseOrOperatorExpressionContext>();
}

CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseOrOperatorExpressionContext>(i);
}

std::vector<CypherParser::KU_ComparisonOperatorContext *> CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator() {
  return getRuleContexts<CypherParser::KU_ComparisonOperatorContext>();
}

CypherParser::KU_ComparisonOperatorContext* CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator(size_t i) {
  return getRuleContext<CypherParser::KU_ComparisonOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::INVALID_NOT_EQUAL() {
  return getToken(CypherParser::INVALID_NOT_EQUAL, 0);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}


CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 244, CypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2201);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 353, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2153);
      kU_BitwiseOrOperatorExpression();
      setState(2163);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx)) {
      case 1: {
        setState(2155);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2154);
          match(CypherParser::SP);
        }
        setState(2157);
        kU_ComparisonOperator();
        setState(2159);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2158);
          match(CypherParser::SP);
        }
        setState(2161);
        kU_BitwiseOrOperatorExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2165);
      kU_BitwiseOrOperatorExpression();

      setState(2167);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2166);
        match(CypherParser::SP);
      }
      setState(2169);
      antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken = match(CypherParser::INVALID_NOT_EQUAL);
      setState(2171);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2170);
        match(CypherParser::SP);
      }
      setState(2173);
      kU_BitwiseOrOperatorExpression();
       notifyInvalidNotEqualOperator(antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2177);
      kU_BitwiseOrOperatorExpression();
      setState(2179);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2178);
        match(CypherParser::SP);
      }
      setState(2181);
      kU_ComparisonOperator();
      setState(2183);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2182);
        match(CypherParser::SP);
      }
      setState(2185);
      kU_BitwiseOrOperatorExpression();
      setState(2195); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2187);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2186);
                  match(CypherParser::SP);
                }
                setState(2189);
                kU_ComparisonOperator();
                setState(2191);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2190);
                  match(CypherParser::SP);
                }
                setState(2193);
                kU_BitwiseOrOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2197); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 352, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
       notifyNonBinaryComparison(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ComparisonOperatorContext ------------------------------------------------------------------

CypherParser::KU_ComparisonOperatorContext::KU_ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_ComparisonOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_ComparisonOperator;
}


CypherParser::KU_ComparisonOperatorContext* CypherParser::kU_ComparisonOperator() {
  KU_ComparisonOperatorContext *_localctx = _tracker.createInstance<KU_ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 246, CypherParser::RuleKU_ComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2203);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 254016) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseOrOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseOrOperatorExpressionContext::KU_BitwiseOrOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseAndOperatorExpressionContext *> CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseAndOperatorExpressionContext>();
}

CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseAndOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseOrOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseOrOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseOrOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseOrOperatorExpression;
}


CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::kU_BitwiseOrOperatorExpression() {
  KU_BitwiseOrOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseOrOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 248, CypherParser::RuleKU_BitwiseOrOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2205);
    kU_BitwiseAndOperatorExpression();
    setState(2216);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 356, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2207);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2206);
          match(CypherParser::SP);
        }
        setState(2209);
        match(CypherParser::T__10);
        setState(2211);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2210);
          match(CypherParser::SP);
        }
        setState(2213);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(2218);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 356, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseAndOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseAndOperatorExpressionContext::KU_BitwiseAndOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitShiftOperatorExpressionContext *> CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorExpressionContext>();
}

CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseAndOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseAndOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseAndOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseAndOperatorExpression;
}


CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::kU_BitwiseAndOperatorExpression() {
  KU_BitwiseAndOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseAndOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 250, CypherParser::RuleKU_BitwiseAndOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2219);
    kU_BitShiftOperatorExpression();
    setState(2230);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2221);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2220);
          match(CypherParser::SP);
        }
        setState(2223);
        match(CypherParser::T__17);
        setState(2225);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2224);
          match(CypherParser::SP);
        }
        setState(2227);
        kU_BitShiftOperatorExpression(); 
      }
      setState(2232);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorExpressionContext::KU_BitShiftOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AddOrSubtractExpressionContext *> CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_AddOrSubtractExpressionContext>();
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(i);
}

std::vector<CypherParser::KU_BitShiftOperatorContext *> CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorContext>();
}

CypherParser::KU_BitShiftOperatorContext* CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitShiftOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitShiftOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitShiftOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperatorExpression;
}


CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::kU_BitShiftOperatorExpression() {
  KU_BitShiftOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 252, CypherParser::RuleKU_BitShiftOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2233);
    oC_AddOrSubtractExpression();
    setState(2245);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 362, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2235);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2234);
          match(CypherParser::SP);
        }
        setState(2237);
        kU_BitShiftOperator();
        setState(2239);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2238);
          match(CypherParser::SP);
        }
        setState(2241);
        oC_AddOrSubtractExpression(); 
      }
      setState(2247);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 362, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorContext::KU_BitShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_BitShiftOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperator;
}


CypherParser::KU_BitShiftOperatorContext* CypherParser::kU_BitShiftOperator() {
  KU_BitShiftOperatorContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 254, CypherParser::RuleKU_BitShiftOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2248);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__18

    || _la == CypherParser::T__19)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<CypherParser::KU_AddOrSubtractOperatorContext *> CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator() {
  return getRuleContexts<CypherParser::KU_AddOrSubtractOperatorContext>();
}

CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator(size_t i) {
  return getRuleContext<CypherParser::KU_AddOrSubtractOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}


CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 256, CypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2250);
    oC_MultiplyDivideModuloExpression();
    setState(2262);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2252);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2251);
          match(CypherParser::SP);
        }
        setState(2254);
        kU_AddOrSubtractOperator();
        setState(2256);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2255);
          match(CypherParser::SP);
        }
        setState(2258);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(2264);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddOrSubtractOperatorContext ------------------------------------------------------------------

CypherParser::KU_AddOrSubtractOperatorContext::KU_AddOrSubtractOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddOrSubtractOperatorContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_AddOrSubtractOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddOrSubtractOperator;
}


CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::kU_AddOrSubtractOperator() {
  KU_AddOrSubtractOperatorContext *_localctx = _tracker.createInstance<KU_AddOrSubtractOperatorContext>(_ctx, getState());
  enterRule(_localctx, 258, CypherParser::RuleKU_AddOrSubtractOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2265);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__20 || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<CypherParser::KU_MultiplyDivideModuloOperatorContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator() {
  return getRuleContexts<CypherParser::KU_MultiplyDivideModuloOperatorContext>();
}

CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator(size_t i) {
  return getRuleContext<CypherParser::KU_MultiplyDivideModuloOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}


CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 260, CypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2267);
    oC_PowerOfExpression();
    setState(2279);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2269);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2268);
          match(CypherParser::SP);
        }
        setState(2271);
        kU_MultiplyDivideModuloOperator();
        setState(2273);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2272);
          match(CypherParser::SP);
        }
        setState(2275);
        oC_PowerOfExpression(); 
      }
      setState(2281);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MultiplyDivideModuloOperatorContext ------------------------------------------------------------------

CypherParser::KU_MultiplyDivideModuloOperatorContext::KU_MultiplyDivideModuloOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MultiplyDivideModuloOperatorContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}


size_t CypherParser::KU_MultiplyDivideModuloOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_MultiplyDivideModuloOperator;
}


CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::kU_MultiplyDivideModuloOperator() {
  KU_MultiplyDivideModuloOperatorContext *_localctx = _tracker.createInstance<KU_MultiplyDivideModuloOperatorContext>(_ctx, getState());
  enterRule(_localctx, 262, CypherParser::RuleKU_MultiplyDivideModuloOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2282);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__21

    || _la == CypherParser::T__22 || _la == CypherParser::STAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>();
}

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}


CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 264, CypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2284);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(2295);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2286);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2285);
          match(CypherParser::SP);
        }
        setState(2288);
        match(CypherParser::T__23);
        setState(2290);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2289);
          match(CypherParser::SP);
        }
        setState(2292);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(2297);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddSubtractOrFactorialExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::OC_UnaryAddSubtractOrFactorialExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS() {
  return getTokens(CypherParser::MINUS);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS(size_t i) {
  return getToken(CypherParser::MINUS, i);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::FACTORIAL() {
  return getToken(CypherParser::FACTORIAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression;
}


CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::oC_UnaryAddSubtractOrFactorialExpression() {
  OC_UnaryAddSubtractOrFactorialExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddSubtractOrFactorialExpressionContext>(_ctx, getState());
  enterRule(_localctx, 266, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2304);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(2298);
      match(CypherParser::MINUS);
      setState(2300);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2299);
        match(CypherParser::SP);
      }
      setState(2306);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2307);
    oC_StringListNullOperatorExpression();
    setState(2312);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx)) {
    case 1: {
      setState(2309);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2308);
        match(CypherParser::SP);
      }
      setState(2311);
      match(CypherParser::FACTORIAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_StringOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringOperatorExpressionContext>(0);
}

CypherParser::OC_NullOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContext<CypherParser::OC_NullOperatorExpressionContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullOperatorExpression;
}


CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 268, CypherParser::RuleOC_StringListNullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2314);
    oC_PropertyOrLabelsExpression();
    setState(2322);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 377, _ctx)) {
    case 1: {
      setState(2315);
      oC_StringOperatorExpression();
      break;
    }

    case 2: {
      setState(2317); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2316);
                oC_ListOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2319); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 376, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 3: {
      setState(2321);
      oC_NullOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(CypherParser::IN, 0);
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_ListOperatorExpressionContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}


CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 270, CypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2343);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2324);
      match(CypherParser::SP);
      setState(2325);
      match(CypherParser::IN);
      setState(2327);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2326);
        match(CypherParser::SP);
      }
      setState(2329);
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2330);
      match(CypherParser::T__6);
      setState(2331);
      oC_Expression();
      setState(2332);
      match(CypherParser::T__7);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2334);
      match(CypherParser::T__6);
      setState(2336);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5195676226290711932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -2359750048497068901) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 653716391137) != 0)) {
        setState(2335);
        oC_Expression();
      }
      setState(2338);
      match(CypherParser::COLON);
      setState(2340);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5195676226290711932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -2359750048497068901) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 653716391137) != 0)) {
        setState(2339);
        oC_Expression();
      }
      setState(2342);
      match(CypherParser::T__7);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_RegularExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_RegularExpression() {
  return getRuleContext<CypherParser::OC_RegularExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringOperatorExpression;
}


CypherParser::OC_StringOperatorExpressionContext* CypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 272, CypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2356);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 382, _ctx)) {
    case 1: {
      setState(2345);
      oC_RegularExpression();
      break;
    }

    case 2: {
      setState(2346);
      match(CypherParser::SP);
      setState(2347);
      match(CypherParser::STARTS);
      setState(2348);
      match(CypherParser::SP);
      setState(2349);
      match(CypherParser::WITH);
      break;
    }

    case 3: {
      setState(2350);
      match(CypherParser::SP);
      setState(2351);
      match(CypherParser::ENDS);
      setState(2352);
      match(CypherParser::SP);
      setState(2353);
      match(CypherParser::WITH);
      break;
    }

    case 4: {
      setState(2354);
      match(CypherParser::SP);
      setState(2355);
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
    setState(2359);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2358);
      match(CypherParser::SP);
    }
    setState(2361);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularExpressionContext ------------------------------------------------------------------

CypherParser::OC_RegularExpressionContext::OC_RegularExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RegularExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_RegularExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularExpression;
}


CypherParser::OC_RegularExpressionContext* CypherParser::oC_RegularExpression() {
  OC_RegularExpressionContext *_localctx = _tracker.createInstance<OC_RegularExpressionContext>(_ctx, getState());
  enterRule(_localctx, 274, CypherParser::RuleOC_RegularExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2364);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2363);
      match(CypherParser::SP);
    }
    setState(2366);
    match(CypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullOperatorExpression;
}


CypherParser::OC_NullOperatorExpressionContext* CypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 276, CypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2378);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 385, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2368);
      match(CypherParser::SP);
      setState(2369);
      match(CypherParser::IS);
      setState(2370);
      match(CypherParser::SP);
      setState(2371);
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2372);
      match(CypherParser::SP);
      setState(2373);
      match(CypherParser::IS);
      setState(2374);
      match(CypherParser::SP);
      setState(2375);
      match(CypherParser::NOT);
      setState(2376);
      match(CypherParser::SP);
      setState(2377);
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyOrLabelsExpression;
}


CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 278, CypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2380);
    oC_Atom();
    setState(2387);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2382);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2381);
          match(CypherParser::SP);
        }
        setState(2384);
        oC_PropertyLookup(); 
      }
      setState(2389);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_PathPatternsContext* CypherParser::OC_AtomContext::oC_PathPatterns() {
  return getRuleContext<CypherParser::OC_PathPatternsContext>(0);
}

CypherParser::OC_ExistSubqueryContext* CypherParser::OC_AtomContext::oC_ExistSubquery() {
  return getRuleContext<CypherParser::OC_ExistSubqueryContext>(0);
}

CypherParser::KU_CountSubqueryContext* CypherParser::OC_AtomContext::kU_CountSubquery() {
  return getRuleContext<CypherParser::KU_CountSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}


CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 280, CypherParser::RuleOC_Atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2399);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 388, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2390);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2391);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2392);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2393);
      oC_ParenthesizedExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2394);
      oC_FunctionInvocation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2395);
      oC_PathPatterns();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2396);
      oC_ExistSubquery();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2397);
      kU_CountSubquery();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2398);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::KU_StructLiteralContext* CypherParser::OC_LiteralContext::kU_StructLiteral() {
  return getRuleContext<CypherParser::KU_StructLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}


CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 282, CypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2407);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::DecimalInteger:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2401);
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(2402);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::FALSE:
      case CypherParser::TRUE: {
        enterOuterAlt(_localctx, 3);
        setState(2403);
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(2404);
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 5);
        setState(2405);
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__8: {
        enterOuterAlt(_localctx, 6);
        setState(2406);
        kU_StructLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}


CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 284, CypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2409);
    _la = _input->LA(1);
    if (!(_la == CypherParser::FALSE

    || _la == CypherParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<CypherParser::KU_ListEntryContext *> CypherParser::OC_ListLiteralContext::kU_ListEntry() {
  return getRuleContexts<CypherParser::KU_ListEntryContext>();
}

CypherParser::KU_ListEntryContext* CypherParser::OC_ListLiteralContext::kU_ListEntry(size_t i) {
  return getRuleContext<CypherParser::KU_ListEntryContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}


CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 286, CypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2411);
    match(CypherParser::T__6);
    setState(2413);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2412);
      match(CypherParser::SP);
    }
    setState(2428);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5195676226290711932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -2359750048497068901) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 653716391137) != 0)) {
      setState(2415);
      oC_Expression();
      setState(2417);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2416);
        match(CypherParser::SP);
      }
      setState(2425);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__2) {
        setState(2419);
        kU_ListEntry();
        setState(2421);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2420);
          match(CypherParser::SP);
        }
        setState(2427);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2430);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListEntryContext ------------------------------------------------------------------

CypherParser::KU_ListEntryContext::KU_ListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ListEntryContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListEntryContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListEntryContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListEntry;
}


CypherParser::KU_ListEntryContext* CypherParser::kU_ListEntry() {
  KU_ListEntryContext *_localctx = _tracker.createInstance<KU_ListEntryContext>(_ctx, getState());
  enterRule(_localctx, 288, CypherParser::RuleKU_ListEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2432);
    match(CypherParser::T__2);
    setState(2434);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 395, _ctx)) {
    case 1: {
      setState(2433);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(2437);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5195676226290711932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -2359750048497068901) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 653716391137) != 0)) {
      setState(2436);
      oC_Expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructLiteralContext ------------------------------------------------------------------

CypherParser::KU_StructLiteralContext::KU_StructLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_StructFieldContext *> CypherParser::KU_StructLiteralContext::kU_StructField() {
  return getRuleContexts<CypherParser::KU_StructFieldContext>();
}

CypherParser::KU_StructFieldContext* CypherParser::KU_StructLiteralContext::kU_StructField(size_t i) {
  return getRuleContext<CypherParser::KU_StructFieldContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructLiteralContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructLiteral;
}


CypherParser::KU_StructLiteralContext* CypherParser::kU_StructLiteral() {
  KU_StructLiteralContext *_localctx = _tracker.createInstance<KU_StructLiteralContext>(_ctx, getState());
  enterRule(_localctx, 290, CypherParser::RuleKU_StructLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2439);
    match(CypherParser::T__8);
    setState(2441);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2440);
      match(CypherParser::SP);
    }
    setState(2443);
    kU_StructField();
    setState(2445);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2444);
      match(CypherParser::SP);
    }
    setState(2457);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__2) {
      setState(2447);
      match(CypherParser::T__2);
      setState(2449);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2448);
        match(CypherParser::SP);
      }
      setState(2451);
      kU_StructField();
      setState(2453);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2452);
        match(CypherParser::SP);
      }
      setState(2459);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2460);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructFieldContext ------------------------------------------------------------------

CypherParser::KU_StructFieldContext::KU_StructFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StructFieldContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StructFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructFieldContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructFieldContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructField;
}


CypherParser::KU_StructFieldContext* CypherParser::kU_StructField() {
  KU_StructFieldContext *_localctx = _tracker.createInstance<KU_StructFieldContext>(_ctx, getState());
  enterRule(_localctx, 292, CypherParser::RuleKU_StructField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2464);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2462);
        oC_SymbolicName();
        break;
      }

      case CypherParser::StringLiteral: {
        setState(2463);
        match(CypherParser::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2467);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2466);
      match(CypherParser::SP);
    }
    setState(2469);
    match(CypherParser::COLON);
    setState(2471);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2470);
      match(CypherParser::SP);
    }
    setState(2473);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}


CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 294, CypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2475);
    match(CypherParser::T__1);
    setState(2477);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2476);
      match(CypherParser::SP);
    }
    setState(2479);
    oC_Expression();
    setState(2481);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2480);
      match(CypherParser::SP);
    }
    setState(2483);
    match(CypherParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::CAST() {
  return getToken(CypherParser::CAST, 0);
}

std::vector<CypherParser::KU_FunctionParameterContext *> CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter() {
  return getRuleContexts<CypherParser::KU_FunctionParameterContext>();
}

CypherParser::KU_FunctionParameterContext* CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter(size_t i) {
  return getRuleContext<CypherParser::KU_FunctionParameterContext>(i);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::OC_FunctionInvocationContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}


CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 296, CypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2562);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 426, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2485);
      match(CypherParser::COUNT);
      setState(2487);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2486);
        match(CypherParser::SP);
      }
      setState(2489);
      match(CypherParser::T__1);
      setState(2491);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2490);
        match(CypherParser::SP);
      }
      setState(2493);
      match(CypherParser::STAR);
      setState(2495);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2494);
        match(CypherParser::SP);
      }
      setState(2497);
      match(CypherParser::T__3);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2498);
      match(CypherParser::CAST);
      setState(2500);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2499);
        match(CypherParser::SP);
      }
      setState(2502);
      match(CypherParser::T__1);
      setState(2504);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2503);
        match(CypherParser::SP);
      }
      setState(2506);
      kU_FunctionParameter();
      setState(2508);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2507);
        match(CypherParser::SP);
      }
      setState(2520);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CypherParser::AS: {
          setState(2510);
          match(CypherParser::AS);
          setState(2512);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2511);
            match(CypherParser::SP);
          }
          setState(2514);
          kU_DataType(0);
          break;
        }

        case CypherParser::T__2: {
          setState(2515);
          match(CypherParser::T__2);
          setState(2517);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2516);
            match(CypherParser::SP);
          }
          setState(2519);
          kU_FunctionParameter();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2523);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2522);
        match(CypherParser::SP);
      }
      setState(2525);
      match(CypherParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2527);
      oC_FunctionName();
      setState(2529);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2528);
        match(CypherParser::SP);
      }
      setState(2531);
      match(CypherParser::T__1);
      setState(2533);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2532);
        match(CypherParser::SP);
      }
      setState(2539);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DISTINCT) {
        setState(2535);
        match(CypherParser::DISTINCT);
        setState(2537);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2536);
          match(CypherParser::SP);
        }
      }
      setState(2558);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5195676226290711932) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -2359750048497068901) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 653716391137) != 0)) {
        setState(2541);
        kU_FunctionParameter();
        setState(2543);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2542);
          match(CypherParser::SP);
        }
        setState(2555);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
          setState(2545);
          match(CypherParser::T__2);
          setState(2547);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2546);
            match(CypherParser::SP);
          }
          setState(2549);
          kU_FunctionParameter();
          setState(2551);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2550);
            match(CypherParser::SP);
          }
          setState(2557);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(2560);
      match(CypherParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}


CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 298, CypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2564);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FunctionParameterContext ------------------------------------------------------------------

CypherParser::KU_FunctionParameterContext::KU_FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_FunctionParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_FunctionParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::COLON() {
  return getToken(CypherParser::COLON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FunctionParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::KU_LambdaParameterContext* CypherParser::KU_FunctionParameterContext::kU_LambdaParameter() {
  return getRuleContext<CypherParser::KU_LambdaParameterContext>(0);
}


size_t CypherParser::KU_FunctionParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_FunctionParameter;
}


CypherParser::KU_FunctionParameterContext* CypherParser::kU_FunctionParameter() {
  KU_FunctionParameterContext *_localctx = _tracker.createInstance<KU_FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 300, CypherParser::RuleKU_FunctionParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2579);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 430, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2575);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 429, _ctx)) {
      case 1: {
        setState(2566);
        oC_SymbolicName();
        setState(2568);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2567);
          match(CypherParser::SP);
        }
        setState(2570);
        match(CypherParser::COLON);
        setState(2571);
        match(CypherParser::T__5);
        setState(2573);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2572);
          match(CypherParser::SP);
        }
        break;
      }

      default:
        break;
      }
      setState(2577);
      oC_Expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2578);
      kU_LambdaParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LambdaParameterContext ------------------------------------------------------------------

CypherParser::KU_LambdaParameterContext::KU_LambdaParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LambdaVarsContext* CypherParser::KU_LambdaParameterContext::kU_LambdaVars() {
  return getRuleContext<CypherParser::KU_LambdaVarsContext>(0);
}

tree::TerminalNode* CypherParser::KU_LambdaParameterContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_LambdaParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LambdaParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LambdaParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_LambdaParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_LambdaParameter;
}


CypherParser::KU_LambdaParameterContext* CypherParser::kU_LambdaParameter() {
  KU_LambdaParameterContext *_localctx = _tracker.createInstance<KU_LambdaParameterContext>(_ctx, getState());
  enterRule(_localctx, 302, CypherParser::RuleKU_LambdaParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2581);
    kU_LambdaVars();
    setState(2583);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2582);
      match(CypherParser::SP);
    }
    setState(2585);
    match(CypherParser::MINUS);
    setState(2586);
    match(CypherParser::T__15);
    setState(2588);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2587);
      match(CypherParser::SP);
    }
    setState(2590);
    oC_Expression();
    setState(2592);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 433, _ctx)) {
    case 1: {
      setState(2591);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LambdaVarsContext ------------------------------------------------------------------

CypherParser::KU_LambdaVarsContext::KU_LambdaVarsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_LambdaVarsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_LambdaVarsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LambdaVarsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LambdaVarsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_LambdaVarsContext::getRuleIndex() const {
  return CypherParser::RuleKU_LambdaVars;
}


CypherParser::KU_LambdaVarsContext* CypherParser::kU_LambdaVars() {
  KU_LambdaVarsContext *_localctx = _tracker.createInstance<KU_LambdaVarsContext>(_ctx, getState());
  enterRule(_localctx, 304, CypherParser::RuleKU_LambdaVars);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2618);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2594);
        oC_SymbolicName();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(2595);
        match(CypherParser::T__1);
        setState(2597);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2596);
          match(CypherParser::SP);
        }
        setState(2599);
        oC_SymbolicName();
        setState(2601);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2600);
          match(CypherParser::SP);
        }
        setState(2613);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__2) {
          setState(2603);
          match(CypherParser::T__2);
          setState(2605);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2604);
            match(CypherParser::SP);
          }
          setState(2607);
          oC_SymbolicName();
          setState(2609);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2608);
            match(CypherParser::SP);
          }
          setState(2615);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2616);
        match(CypherParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PathPatternsContext ------------------------------------------------------------------

CypherParser::OC_PathPatternsContext::OC_PathPatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PathPatternsContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PathPatternsContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PathPatternsContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PathPatternsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PathPatternsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PathPatternsContext::getRuleIndex() const {
  return CypherParser::RuleOC_PathPatterns;
}


CypherParser::OC_PathPatternsContext* CypherParser::oC_PathPatterns() {
  OC_PathPatternsContext *_localctx = _tracker.createInstance<OC_PathPatternsContext>(_ctx, getState());
  enterRule(_localctx, 306, CypherParser::RuleOC_PathPatterns);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2620);
    oC_NodePattern();
    setState(2625); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2622);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(2621);
                match(CypherParser::SP);
              }
              setState(2624);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2627); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 441, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistSubqueryContext::OC_ExistSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_ExistSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistSubquery;
}


CypherParser::OC_ExistSubqueryContext* CypherParser::oC_ExistSubquery() {
  OC_ExistSubqueryContext *_localctx = _tracker.createInstance<OC_ExistSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 308, CypherParser::RuleOC_ExistSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2629);
    match(CypherParser::EXISTS);
    setState(2631);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2630);
      match(CypherParser::SP);
    }
    setState(2633);
    match(CypherParser::T__8);
    setState(2635);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2634);
      match(CypherParser::SP);
    }
    setState(2637);
    match(CypherParser::MATCH);
    setState(2639);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2638);
      match(CypherParser::SP);
    }
    setState(2641);
    oC_Pattern();
    setState(2646);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 446, _ctx)) {
    case 1: {
      setState(2643);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2642);
        match(CypherParser::SP);
      }
      setState(2645);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2649);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2648);
      match(CypherParser::SP);
    }
    setState(2651);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CountSubqueryContext ------------------------------------------------------------------

CypherParser::KU_CountSubqueryContext::KU_CountSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::KU_CountSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CountSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_CountSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_CountSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleKU_CountSubquery;
}


CypherParser::KU_CountSubqueryContext* CypherParser::kU_CountSubquery() {
  KU_CountSubqueryContext *_localctx = _tracker.createInstance<KU_CountSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 310, CypherParser::RuleKU_CountSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2653);
    match(CypherParser::COUNT);
    setState(2655);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2654);
      match(CypherParser::SP);
    }
    setState(2657);
    match(CypherParser::T__8);
    setState(2659);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2658);
      match(CypherParser::SP);
    }
    setState(2661);
    match(CypherParser::MATCH);
    setState(2663);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2662);
      match(CypherParser::SP);
    }
    setState(2665);
    oC_Pattern();
    setState(2670);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 452, _ctx)) {
    case 1: {
      setState(2667);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2666);
        match(CypherParser::SP);
      }
      setState(2669);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2673);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2672);
      match(CypherParser::SP);
    }
    setState(2675);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}


CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 312, CypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2677);
    match(CypherParser::T__4);
    setState(2679);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2678);
      match(CypherParser::SP);
    }
    setState(2683);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2681);
        oC_PropertyKeyName();
        break;
      }

      case CypherParser::STAR: {
        setState(2682);
        match(CypherParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}


CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 314, CypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2707);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 461, _ctx)) {
    case 1: {
      setState(2685);
      match(CypherParser::CASE);
      setState(2690); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2687);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2686);
                  match(CypherParser::SP);
                }
                setState(2689);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2692); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 457, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(2694);
      match(CypherParser::CASE);
      setState(2696);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2695);
        match(CypherParser::SP);
      }
      setState(2698);
      oC_Expression();
      setState(2703); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2700);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2699);
                  match(CypherParser::SP);
                }
                setState(2702);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2705); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 460, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(2717);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 464, _ctx)) {
    case 1: {
      setState(2710);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2709);
        match(CypherParser::SP);
      }
      setState(2712);
      match(CypherParser::ELSE);
      setState(2714);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2713);
        match(CypherParser::SP);
      }
      setState(2716);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(2720);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2719);
      match(CypherParser::SP);
    }
    setState(2722);
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}


CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 316, CypherParser::RuleOC_CaseAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2724);
    match(CypherParser::WHEN);
    setState(2726);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2725);
      match(CypherParser::SP);
    }
    setState(2728);
    oC_Expression();
    setState(2730);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2729);
      match(CypherParser::SP);
    }
    setState(2732);
    match(CypherParser::THEN);
    setState(2734);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2733);
      match(CypherParser::SP);
    }
    setState(2736);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}


CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 318, CypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2738);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}


CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 320, CypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2742);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2740);
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::DecimalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(2741);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}


CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 322, CypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2744);
    match(CypherParser::T__25);
    setState(2747);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2745);
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
        setState(2746);
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}


CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 324, CypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2749);
    oC_Atom();
    setState(2751);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2750);
      match(CypherParser::SP);
    }
    setState(2753);
    oC_PropertyLookup();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}


CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 326, CypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2755);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}


CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 328, CypherParser::RuleOC_IntegerLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2757);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}


CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 330, CypherParser::RuleOC_DoubleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2759);
    match(CypherParser::RegularDecimalReal);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}


CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 332, CypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2761);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

CypherParser::KU_NonReservedKeywordsContext* CypherParser::OC_SymbolicNameContext::kU_NonReservedKeywords() {
  return getRuleContext<CypherParser::KU_NonReservedKeywordsContext>(0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}


CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 334, CypherParser::RuleOC_SymbolicName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2768);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::UnescapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2763);
        match(CypherParser::UnescapedSymbolicName);
        break;
      }

      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(2764);
        antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken = match(CypherParser::EscapedSymbolicName);
        if ((antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken != nullptr ? antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken->getText() : "") == "``") { notifyEmptyToken(antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken); }
        break;
      }

      case CypherParser::HexLetter: {
        enterOuterAlt(_localctx, 3);
        setState(2766);
        match(CypherParser::HexLetter);
        break;
      }

      case CypherParser::ADD:
      case CypherParser::ALTER:
      case CypherParser::AS:
      case CypherParser::ATTACH:
      case CypherParser::BEGIN:
      case CypherParser::BY:
      case CypherParser::CALL:
      case CypherParser::COMMENT:
      case CypherParser::COMMIT:
      case CypherParser::CONTAINS:
      case CypherParser::COPY:
      case CypherParser::COUNT:
      case CypherParser::CYCLE:
      case CypherParser::DATABASE:
      case CypherParser::DELETE:
      case CypherParser::DETACH:
      case CypherParser::DROP:
      case CypherParser::EXPLAIN:
      case CypherParser::EXPORT:
      case CypherParser::EXTENSION:
      case CypherParser::GRAPH:
      case CypherParser::IMPORT:
      case CypherParser::IF:
      case CypherParser::INCREMENT:
      case CypherParser::IS:
      case CypherParser::KEY:
      case CypherParser::LOAD:
      case CypherParser::MATCH:
      case CypherParser::MAXVALUE:
      case CypherParser::MERGE:
      case CypherParser::MINVALUE:
      case CypherParser::NO:
      case CypherParser::NODE:
      case CypherParser::PROJECT:
      case CypherParser::READ:
      case CypherParser::REL:
      case CypherParser::RENAME:
      case CypherParser::RETURN:
      case CypherParser::ROLLBACK:
      case CypherParser::SEQUENCE:
      case CypherParser::SET:
      case CypherParser::START:
      case CypherParser::TRANSACTION:
      case CypherParser::TYPE:
      case CypherParser::USE:
      case CypherParser::WRITE:
      case CypherParser::DECIMAL: {
        enterOuterAlt(_localctx, 4);
        setState(2767);
        kU_NonReservedKeywords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_NonReservedKeywordsContext ------------------------------------------------------------------

CypherParser::KU_NonReservedKeywordsContext::KU_NonReservedKeywordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::AS() {
  return getToken(CypherParser::AS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ATTACH() {
  return getToken(CypherParser::ATTACH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::CYCLE() {
  return getToken(CypherParser::CYCLE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DATABASE() {
  return getToken(CypherParser::DATABASE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DECIMAL() {
  return getToken(CypherParser::DECIMAL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXPORT() {
  return getToken(CypherParser::EXPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::GRAPH() {
  return getToken(CypherParser::GRAPH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IF() {
  return getToken(CypherParser::IF, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::IMPORT() {
  return getToken(CypherParser::IMPORT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::INCREMENT() {
  return getToken(CypherParser::INCREMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MAXVALUE() {
  return getToken(CypherParser::MAXVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::MINVALUE() {
  return getToken(CypherParser::MINVALUE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NO() {
  return getToken(CypherParser::NO, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::PROJECT() {
  return getToken(CypherParser::PROJECT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::SEQUENCE() {
  return getToken(CypherParser::SEQUENCE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::SET() {
  return getToken(CypherParser::SET, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::START() {
  return getToken(CypherParser::START, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::TYPE() {
  return getToken(CypherParser::TYPE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::USE() {
  return getToken(CypherParser::USE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::WRITE() {
  return getToken(CypherParser::WRITE, 0);
}


size_t CypherParser::KU_NonReservedKeywordsContext::getRuleIndex() const {
  return CypherParser::RuleKU_NonReservedKeywords;
}


CypherParser::KU_NonReservedKeywordsContext* CypherParser::kU_NonReservedKeywords() {
  KU_NonReservedKeywordsContext *_localctx = _tracker.createInstance<KU_NonReservedKeywordsContext>(_ctx, getState());
  enterRule(_localctx, 336, CypherParser::RuleKU_NonReservedKeywords);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2770);
    _la = _input->LA(1);
    if (!(((((_la - 46) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 46)) & 8022426305271089045) != 0) || ((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 1143278461) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}


CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 338, CypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2772);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2013282304) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}


CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 340, CypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2774);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 32212320256) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DashContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}


CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 342, CypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2776);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70334384439296) != 0) || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CypherParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 51: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);
    case 79: return kU_JoinNodeSempred(antlrcpp::downCast<KU_JoinNodeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_DataTypeSempred(KU_DataTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 5);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_JoinNodeSempred(KU_JoinNodeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 4);
    case 2: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
