name: Multiplatform Build and Test

env:
  USE_EXISTING_BINARY_DATASET: 1

on:
  workflow_dispatch:
  schedule:
    - cron: "0 8 * * *"

jobs:
  generate-binary-demo:
    runs-on: kuzu-self-hosted-testing
    env:
      NUM_THREADS: 32
      GEN: Ninja
      CC: gcc
      CXX: g++
    steps:
      - uses: actions/checkout@v4

      - name: Build
        run: make release

      - name: Generate datasets
        run: bash scripts/generate_binary_demo.sh

      - name: Upload binary-demo
        uses: actions/upload-artifact@v4
        with:
          name: binary-demo
          path: dataset/binary-demo

  rhel-fedora-build-test:
    strategy:
      matrix:
        image: [ "fedora:42" ]
      fail-fast: false
    name: ${{ matrix.image }}
    needs: [ generate-binary-demo ]
    runs-on: ubuntu-24.04
    container:
      image: ${{ matrix.image }}
    env:
      CC: gcc
      CXX: g++
      JAVA_HOME: /usr/lib/jvm/java-${{ matrix.image == 'fedora:42' && '21' || '17' }}-openjdk
      HOME: /root
    steps:
      - name: Enable EPEL
        continue-on-error: true
        if: ${{ matrix.image == 'rockylinux:8' || matrix.image ==  'rockylinux:9' }}
        run: |
          dnf update -y
          dnf install -y epel-release
          dnf update -y

      - name: Enable SHA-1 on Rocky Linux 9
        continue-on-error: true
        if: matrix.image == 'rockylinux:9'
        run: update-crypto-policies --set LEGACY

      - name: Install packages
        continue-on-error: true
        run: |
          curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
          dnf install -y git cmake nodejs ${{ (matrix.image == 'rockylinux:8' || matrix.image ==  'rockylinux:9') && 'gcc-toolset-12 python3.11 python3.11-devel' || 'gcc gcc-c++ python3-devel' }} ${{ matrix.image == 'fedora:42' && 'java-21-openjdk-devel' || 'java-17-openjdk-devel' }}
          dnf clean all

      - name: Enable gcc-toolset-12 and python3.11 on Rocky Linux
        if: ${{ matrix.image == 'rockylinux:8' || matrix.image ==  'rockylinux:9' }}
        continue-on-error: true
        run: |
          source /opt/rh/gcc-toolset-12/enable
          echo $PATH >> $GITHUB_PATH
          alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
          alternatives --set python3 /usr/bin/python3.11
          echo "PYTHON_EXECUTABLE=/usr/bin/python3.11" >> $GITHUB_ENV
          echo "PYBIND11_PYTHON_VERSION=3.11" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        continue-on-error: true

      - name: Download binary-demo
        uses: actions/download-artifact@v4
        with:
          name: binary-demo
          path: ${{ github.workspace }}/dataset/binary-demo

      - name: Test
        continue-on-error: true
        run: |
          set +e
          echo NUM_THREADS=$(nproc)
          make test NUM_THREADS=$(nproc)
          echo "Test,$?" >> status.txt
          make clean
          rm -rf dataset/ldbc-1

      - name: Rename status.txt
        continue-on-error: true
        run: |
          PLATFORM=$(echo ${{ matrix.image }} | tr ':' '-')
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          mv status.txt $PLATFORM.csv

      - uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: ${{env.PLATFORM}}
          path: ${{env.PLATFORM}}.csv

  archlinux-build-test:
    name: archlinux
    runs-on: ubuntu-24.04
    needs: [ generate-binary-demo ]
    container:
      image: archlinux:latest
    env:
      CC: gcc
      CXX: g++
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk
    steps:
      - name: Install packages
        continue-on-error: true
        run: |
          pacman -Syu --noconfirm
          pacman -S --needed --noconfirm git base-devel cmake gcc python python-pip npm jdk17-openjdk

      - uses: actions/checkout@v4
        continue-on-error: true

      - name: Download binary-demo
        uses: actions/download-artifact@v4
        with:
          name: binary-demo
          path: ${{ github.workspace }}/dataset/binary-demo

      - name: Test
        continue-on-error: true
        run: |
          set +e
          echo NUM_THREADS=$(nproc)
          make test NUM_THREADS=$(nproc) USE_STD_FORMAT=TRUE
          echo "Test,$?" >> status.txt
          make clean
          rm -rf dataset/ldbc-1

      - name: Rename status.txt
        continue-on-error: true
        run: |
          mv status.txt archlinux.csv

      - uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: archlinux
          path: archlinux.csv

  collect-results:
    runs-on: ubuntu-22.04
    env:
      DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
      GITHUB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    if: ${{ always() }}
    needs:
      [
        rhel-fedora-build-test,
        archlinux-build-test,
      ]
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: results

      - name: List artifacts
        run: ls -R results

      - name: Create summary
        run: |
          pip3 install pandas tabulate discord.py
          python3 scripts/multiplatform-test-helper/collect-results.py results
          python3 scripts/multiplatform-test-helper/notify-discord.py results.json

      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: results
          path: results.md
